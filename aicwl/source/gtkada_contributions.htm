<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<HTML lang="en">
<HEAD>
<link REL="SHORTCUT ICON" href="http://www.dmitry-kazakov.de/favicon.ico">
<TITLE>GTKAda contributions</TITLE>
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Type" content="text/html; charset=us-ascii">
<META name="keywords" content="Tree view, tree model, sortable, tasking, cell renderer. GtkTreeView, GtkTreeModel, GtkCellRenderer, Gtk, Gtk+, gtkada, Ada, Ada 95, IHLS, 3D color space, units of measurement, Ada programming, columned model">
<META name="Author" content="Dmitry Kazakov">
<META name="Description" content="Contributions to GtkAda">
</HEAD>
<BODY bgcolor="#FFFFFF" link="#0000FF" vlink="#800080">
<P align="center">
<font size="6"><b>GtkAda Contributions</b></font><BIG><br>
<EM>version 3.18</EM></BIG><br>
<div align="center">
<table border="0" cellspacing="0" cellpadding="0">
	<tr>
		<td align="center">
<BIG>Dmitry A. Kazakov</BIG></td>
		<td align="center">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <big>and</big>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </td>
		<td align="center"><BIG>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Maxim Reznik&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </BIG></td>
	</tr>
	<tr>
		<td align="center">(<A HREF="mailto:mailbox@dmitry-kazakov.de">mailbox@dmitry-kazakov.de</A>)</td>
		<td align="center">&nbsp;</td>
		<td align="center">&nbsp;</td>
	</tr>
	<tr>
		<td align="center">
<a href="http://www.dmitry-kazakov.de"><img border="0" src="home.jpg" alt="[Home]" width="40" height="40"></a></td>
		<td align="center">&nbsp;</td>
		<td align="center">&nbsp;</td>
	</tr>
</table>
</div>
<P>
This library is free software; you can redistribute it and/or modify it under 
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later 
version. This library is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
FITNESS FOR A PARTICULAR PURPOSE. See the
<a href="http://www.gnu.org/licenses/gpl.html">GNU General Public License</a> 
for more details. You should have received a copy of the GNU General Public 
License along with this library; if not, write to the Free Software Foundation, 
Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.</P>
<P>
As a special exception, if other files instantiate generics from this unit, or 
you link this unit with other files to produce an executable, this unit does not 
by itself cause the resulting executable to be covered by the GNU General Public 
License. This exception does not however invalidate any other reasons why the 
executable file might be covered by the GNU Public License.</P>
<hr>
<table border="0" cellspacing="0" cellpadding="0" style="border-top-width: 0px; border-bottom-width:0px">
	<tr>
		<td style="border-top-style: none; border-top-width: medium" colspan="3">&nbsp;</td>
		<td style="border-top-style: none; border-top-width: medium" align="right">
		&nbsp;</td>
		<td>&nbsp;</td>
		<td align="center">ARM</td>
		<td align="center" colspan="2">Intel</td>
	</tr>
	<tr>
		<td style="border-top-style: none; border-top-width: medium" colspan="3"><b>Download GtkAda Contributions</b></td>
		<td style="border-top-style: none; border-top-width: medium" align="right">
		<b>Platform:</b></td>
		<td>&nbsp;</td>
		<td align="center">v7</td>
		<td align="center">64-</td>
		<td align="center">32bit</td>
	</tr>
	<tr>
		<td style="border-top-style: solid; border-top-width: 1px">
		<a name="fedora_packages"></a>Fedora packages	<img border="0" src="fedora-logo.jpg" width="16" height="16" alt="fedora"></td>
		<td style="border-top-style: solid; border-top-width: 1px">&nbsp;</td>
		<td style="border-top-style: solid; border-top-width: 1px">precompiled and packaged using RPM</td>
		<td style="border-top-style: solid; border-top-width: 1px">&nbsp;</td>
		<td>&nbsp;</td>
		<td align="right">
		<a href="http://www.dmitry-kazakov.de/distributions/gtkada_contributions_fedora_armv7hl.htm">	<img src="in.jpg" align=middle alt="[Download page]" width="29" height="29"></a></td>
		<td align="center"><a href="http://www.dmitry-kazakov.de/distributions/gtkada_contributions_fedora_x86_64.htm">	<img src="in.jpg" align=middle alt="[Download page]" width="29" height="29"></a></td>
		<td align="center"><a href="http://www.dmitry-kazakov.de/distributions/gtkada_contributions_fedora_i686.htm"> <img src="in.jpg" align=middle alt="[Download page]" width="29" height="29"></a></td>
	</tr>
	<tr>
		<td style="border-top-style: solid; border-top-width: 1px">
		<a name="CentOS_packages"></a>CentOS packages <img border="0" src="centos-logo.jpg" width="16" height="16" alt="CentOS"></td>
		<td style="border-top-style: solid; border-top-width: 1px">&nbsp;</td>
		<td style="border-top-style: solid; border-top-width: 1px">precompiled and packaged using RPM</td>
		<td style="border-top-style: solid; border-top-width: 1px">&nbsp;</td>
		<td>&nbsp;</td>
		<td align="right">&nbsp;</td>
		<td align="center"><a href="http://www.dmitry-kazakov.de/distributions/centos/gtkada_contributions_centos_x86_64.htm"><img src="in.jpg" align=middle alt="[Download page]" width="29" height="29"></a></td>
		<td align="center"><a href="http://www.dmitry-kazakov.de/distributions/centos/gtkada_contributions_centos_i686.htm"><img src="in.jpg" align=middle alt="[Download page]" width="29" height="29"></a></td>
	</tr>
	<tr>
		<td style="border-top-style: solid; border-top-width: 1px; border-bottom-style: solid; border-bottom-width: 1px">
		<a name="debian_packages"></a>Debian packages	<img border="0" src="debian-logo.jpg" width="16" height="16" alt="debian"></td>
		<td style="border-top-style: solid; border-top-width: 1px; border-bottom-style: solid; border-bottom-width: 1px">&nbsp;</td>
		<td style="border-top-style: solid; border-top-width: 1px; border-bottom-style: solid; border-bottom-width: 1px" colspan="2">precompiled and packaged for dpkg</td>
		<td style="border-bottom-style: none; border-bottom-width: medium">&nbsp;</td>
		<td style="border-bottom-style: none; border-bottom-width: medium" align="right">
		<a href="http://www.dmitry-kazakov.de/distributions/gtkada_contributions_debian_armhf.htm"><img src="in.jpg" align=middle alt="[Download page]" width="29" height="29"></a></td>
		<td style="border-bottom-style: none; border-bottom-width: medium" align="center"><a href="http://www.dmitry-kazakov.de/distributions/gtkada_contributions_debian_x86_64.htm"><img src="in.jpg" align=middle alt="[Download page]" width="29" height="29"></a></td>
		<td style="border-bottom-style: none; border-bottom-width: medium" align="center"><a href="http://www.dmitry-kazakov.de/distributions/gtkada_contributions_debian_i686.htm"><img src="in.jpg" align=middle alt="[Download page]" width="29" height="29"></a></td>
	</tr>
	<tr>
		<td style="border-bottom-style: solid; border-bottom-width: 1px">Source distribution (any platform)</td>
		<td style="border-bottom-style: solid; border-bottom-width: 1px">&nbsp;</td>
		<td style="border-bottom-style: solid; border-bottom-width: 1px" colspan="2"><a href="http://www.dmitry-kazakov.de/ada/gtkada_contributions_3_18.tgz">gtkada_contributions_3_18.tgz</a> (<b>tar</b> + <b>gzip</b>, Windows users may use WinZip)</td>
		<td style="border-bottom-style: none; border-bottom-width: medium">&nbsp;</td>
		<td style="border-bottom-style: none; border-bottom-width: medium" align="right">&nbsp;</td>
		<td style="border-bottom-style: none; border-bottom-width: medium" align="right"><a href="http://www.dmitry-kazakov.de/ada/gtkada_contributions_3_18.tgz"><img src="download.jpg" align=middle alt="[Download]" width="29" height="29"></a></td>
		<td style="border-bottom-style: none; border-bottom-width: medium" align="right">&nbsp;</td>
	</tr>
	<tr>
		<td style="border-top-style: none; border-top-width: medium; border-bottom-style: solid; border-bottom-width: 1px" colspan="4"><b>
		<br>Download XPM to GtkAda converter</b> (embedding images into	<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/">GtkAda</a> applications<a href="#xpm2gtkada"> see</a>)</td>
		<td style="border-top-style: none; border-top-width: medium">&nbsp;</td>
		<td style="border-top-style: none; border-top-width: medium" valign="bottom" align="right">&nbsp;</td>
		<td style="border-top-style: none; border-top-width: medium" valign="bottom" align="center">64-</td>
		<td style="border-top-style: none; border-top-width: medium" valign="bottom" align="center">32bit</td>
	</tr>
	<tr>
		<td style="border-top-style: none; border-top-width: medium; border-bottom-style: solid; border-bottom-width: 1px">Windows i686</td>
		<td style="border-top-style: none; border-top-width: medium; border-bottom-style: solid; border-bottom-width: 1px">&nbsp;</td>
		<td style="border-top-style: none; border-top-width: medium; border-bottom-style: solid; border-bottom-width: 1px" colspan="2">
		<a href="http://www.dmitry-kazakov.de/ada/xpm2gtkada.exe.gz">xpm2gtkada.exe.gz</a> (<b>gzip</b> compressed, Windows users may use WinZip)</td>
		<td>&nbsp;</td>
		<td align="right">&nbsp;</td>
		<td align="center">&nbsp;</td>
		<td align="center"><a href="http://www.dmitry-kazakov.de/ada/xpm2gtkada.exe.gz"><img src="download.jpg" align=middle alt="[Download]" width="29" height="29"></a></td>
	</tr>
	<tr>
		<td style="border-top-style: none; border-top-width: medium; border-bottom-style: solid; border-bottom-width: 1px">Fedora packages <img border="0" src="fedora-logo.jpg" width="16" height="16" alt="fedora"></td>
		<td style="border-top-style: none; border-top-width: medium; border-bottom-style: solid; border-bottom-width: 1px">&nbsp;</td>
		<td style="border-top-style: none; border-top-width: medium; border-bottom-style: solid; border-bottom-width: 1px" colspan="2">is a part of the developing package (has <i>devel</i> suffix)</td>
		<td>&nbsp;</td>
		<td align="right">
		<a href="http://www.dmitry-kazakov.de/distributions/gtkada_contributions_fedora_armv7hl.htm"><img src="in.jpg" align=middle alt="[Download page]" width="29" height="29"></a></td>
		<td align="center"><a href="http://www.dmitry-kazakov.de/distributions/gtkada_contributions_fedora_x86_64.htm"><img src="in.jpg" align=middle alt="[Download page]" width="29" height="29"></a></td>
		<td align="center"><a href="http://www.dmitry-kazakov.de/distributions/gtkada_contributions_fedora_i686.htm"><img src="in.jpg" align=middle alt="[Download page]" width="29" height="29"></a></td>
	</tr>
	<tr>
		<td style="border-top-style: none; border-top-width: medium; border-bottom-style: solid; border-bottom-width: 1px">
		CentOS packages <img border="0" src="centos-logo.jpg" width="16" height="16" alt="CentOS"></td>
		<td style="border-top-style: none; border-top-width: medium; border-bottom-style: solid; border-bottom-width: 1px">&nbsp;</td>
		<td style="border-top-style: none; border-top-width: medium; border-bottom-style: solid; border-bottom-width: 1px" colspan="2">is a part of the developing package (has <i>devel</i> suffix)</td>
		<td>&nbsp;</td>
		<td align="right">&nbsp;</td>
		<td align="center"><a href="http://www.dmitry-kazakov.de/distributions/centos/gtkada_contributions_centos_x86_64.htm"><img src="in.jpg" align=middle alt="[Download page]" width="29" height="29"></a></td>
		<td align="center"><a href="http://www.dmitry-kazakov.de/distributions/centos/gtkada_contributions_centos_i686.htm"><img src="in.jpg" align=middle alt="[Download page]" width="29" height="29"></a></td>
	</tr>
	<tr>
		<td style="border-bottom-style: solid; border-bottom-width: 1px">Debian packages<img border="0" src="debian-logo.jpg" width="16" height="16" alt="debian"></td>
		<td style="border-bottom-style: solid; border-bottom-width: 1px">&nbsp;</td>
		<td style="border-bottom-style: solid; border-bottom-width: 1px" colspan="2">is a part of the developing package (has <i>dev</i> suffix)</td>
		<td>&nbsp;</td>
		<td align="right">
		<a href="http://www.dmitry-kazakov.de/distributions/gtkada_contributions_debian_armhf.htm">	<img src="in.jpg" align=middle alt="[Download page]" width="29" height="29"></a></td>
		<td align="center"><a href="http://www.dmitry-kazakov.de/distributions/gtkada_contributions_debian_x86_64.htm">	<img src="in.jpg" align=middle alt="[Download page]" width="29" height="29"></a></td>
		<td align="center"><a href="http://www.dmitry-kazakov.de/distributions/gtkada_contributions_debian_i686.htm"><img src="in.jpg" align=middle alt="[Download page]" width="29" height="29"></a></td>
	</tr>
	</table>
<p>See also:</p>
<ul>
	<li><a href="#gtkada_windows_packages">Additional GTK packages for Windows</a>;</li>
	<li><a href="#gtkada_fedora_packages">GtkAda packages for Fedora</a>;</li>
	<li><a href="#gtkada_debian_packages">GtkAda packages for Debian</a>.</li>
</ul>
<HR>
<P align="left">
The described here packages are proposed as a contribution to
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/">GtkAda</a>, an Ada bindings to
<a href="http://www.gtk.org">GTK+</a>. It deals with the following issues:</p>
<ul>
	<li>
	Tasking support;</li>
	<li>
	Custom models for tree view widget;</li>
	<li>
	Custom cell renderers for tree view widget;</li>
	<li>
	Multi-columned derived model;</li>
	<li>
	Extension derived model (to add columns to an existing model);</li>
	<li>
	Abstract caching model for directory-like data;</li>
	<li>
	Tree view and list view widgets for navigational browsing of abstract 
	caching models;</li>
	<li>
	File system navigation widgets with wildcard filtering;</li>
	<li>
	Resource styles;</li>
	<li>
	Capturing resources of a widget;</li>
	<li>
	Embeddable images;</li>
	<li>
	Some missing subprograms and bug fixes;</li>
	<li>
	Measurement unit selection widget and dialogs;</li>
	<li>
	Improved hue-luminance-saturation color model;</li>
	<li>
	Simplified image buttons and buttons customizable by style properties;</li>
	<li>Controlled Ada types for GTK+ strong and weak references;</li>
	<li>Simplified means to create lists of strings;</li>
	<li>Spawning processes synchronously and asynchronously with pipes;</li>
	<li>Capturing asynchronous process standard I/O by Ada tasks and by text 
	buffers;</li>
	<li>Source view widget support.</li>
</ul>
<P align="left">
See also <a href="#changes_log">changes log</a>.&nbsp;</p>
<P align="right">
<A name="1"></A><a href="#14"><IMG src="index.gif" alt="[TOC]" width="29"
    height="29"></a><a href="#2"><IMG src="next.gif" alt="[Next]" width="29"
    height="29"></a></p>
<H2>1. Tasking with GTK+</H2>
<p>The package Gtk.Main.Router provides a synchronization mechanism to use 
<a href="http://www.gtk.org">GTK+</a> 
framework with Ada tasks. <a href="http://www.gtk.org">GTK+</a> is known to be task unsafe. In particular, all 
calls need to be made from the same task (thread). Further
<a href="http://www.gtk.org">GTK+</a> has 
a callback-based architecture which makes it difficult to use Ada's entry 
points for synchronization, because callback subprograms cannot act as entries. This package allows Ada tasks 
triggering some <a href="http://www.gtk.org">GTK+</a> actions to synchronize on a 
protected object with the task handling <a href="http://www.gtk.org">GTK+</a> 
events. Basically, the task waits for <a href="http://www.gtk.org">GTK+</a> be ready to serve 
it. Serving occurs upon idle loop 
processing, which performs the requested action on the context of the main
<a href="http://www.gtk.org">GTK+</a> 
thread. Upon action completion the task is unblocked and continues its work. For the task it 
appears much as a rendezvous with the <a href="http://www.gtk.org">GTK+</a> main thread. <br>
<br>
The package provides three ways to request an action to be performed on the 
context of 
<a href="http://www.gtk.org">GTK+</a> main thread.</p>
<ul>
	<li>Extensible tagged type. The task that needs to call some 
	<a href="http://www.gtk.org">GTK+</a> 
	subroutines, derives from the type <a href="#Gtk.Main.Router.Request_Data">Request_Data</a> and places the parameters 
	there. It overrides the procedure <a href="#Gtk.Main.Router.Service">Service</a> with a sequence of calls, needed 
	to be done. Then it calls 
	to <a href="#Gtk.Main.Router.Request_1">Request</a> one or multiple times. Exceptions raised in <a href="#Gtk.Main.Router.Service">Service</a> are 
	propagated to the task called Request. It is safe to use this 
	<a href="#Gtk.Main.Router.Request_1">Request</a> from 
	any task, including one of the main <a href="http://www.gtk.org">GTK+</a> loop. In the latter case 
<a href="#Gtk.Main.Router.Request">Request</a> will not block.</li>
	<li>Plain callback routine. The type Gtk_Callback is a pointer to a 
	parameterless procedure. The procedure 
<a href="#Gtk.Main.Router.Request">Request</a> with the parameter of this 
	type can be used to request a call to the procedure on the context of the 
	main <a href="http://www.gtk.org">GTK+</a> loop. Similarly to the variant with a tagged type, it is safe to 
	call 
<a href="#Gtk.Main.Router.Request">Request</a> on any context.</li>
	<li>Generic package <a href="#Gtk.Main.Router.Generic_Callback_Request">
	Generic_Callback_Request</a> can be instantiated with an 
	appropriate type of callback routine parameters. The procedure Request 
	defined in the package acts like a plain callback routine described above 
	and also accepts a parameter of the user-defined type.</li>
	<li>Generic package <a href="#Gtk.Main.Router.Generic_Message">
	Generic_Message</a> is provided for potentially asynchronous execution of 
	user-defined handlers on the GTK+ context. Differently to the methods listed 
	above it the caller does not wait for request completion.</li>
</ul>
<p>Note that the package is based on timer events.</p>
		<blockquote>
<p><tt>Quit_Error : <font color="#0000FF">exception</font>;<br>
Busy_Error : <font color="#0000FF">exception</font>;</tt></p>
</blockquote>
<p>The exception propagated when servicing is impossible because the main <a href="http://www.gtk.org">GTK+</a> 
loop was prematurely left.</p>
		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Main.Router.Init"></a>procedure</font> 
Init<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Window</b>&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Window_Record'Class;<br>
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Period</b>&nbsp;&nbsp; : Duration := 0.2;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
GPS_Port</b> : Natural&nbsp; := 50_000<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure should be called once from the main GTK+ thread after
<a href="#Gtk.Main.Router.Init">Init</a>. Usually it is done before entering the 
loop of processing events and before starting tasks which might use the package 
functionality. <b>Period</b> specifies how frequently the mail loop will poll 
for graphic requests from other tasks. The parameter <b>Window</b> is the 
application window for which the main loop is used. The parameter <b>GPS_Port</b> specifies 
the port used to connect to the GPS, when the latter is in the server mode.</p>
		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Main.Router.Request_Data"></a>type</font> 
Request_Data <font color="#0000FF">is abstract<br>
&nbsp;&nbsp; new </font>Ada.Finalization.Limited_Controlled
<font color="#0000FF">with null record</font>;</tt></p>
</blockquote>
<p>The base type of a request.</p>
		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Main.Router.Request_1"></a>procedure</font> Request (<b>Data</b> :
<font color="#0000FF">in out</font> Request_Data'Class);</tt></p>
</blockquote>
<p>This procedure is called in order to request <b>Data</b> to be serviced on 
the context of the main GTK+ task. The call is blocking. The caller will wait 
until the request will be serviced through a call to
<a href="#Gtk.Main.Router.Service">Service</a> on the GTK+ context. 
Program_Error is propagated when <a href="#Gtk.Main.Router.Init">Init</a> was 
not called. Other exceptions are the exceptions propagated out of
<a href="#Gtk.Main.Router.Service">Service</a> and re-raised on the caller's 
context. Quit_Error is propagated when the main <a href="http://www.gtk.org">GTK+</a> 
loop was quitted before the request was serviced.</p>
		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Main.Router.Service"></a>procedure</font> 
Service (<b>Data</b> : <font color="#0000FF">in out</font> Request_Data)
<font color="#0000FF">is abstract</font>;</tt></p>
</blockquote>
<p>This abstract procedure which any derived type should implement. All GTK+ 
calls shall be placed here. Note that <a href="#Gtk.Main.Router.Service">Service</a> 
is called on the context of the main GTK+ thread. An implementation may 
propagate exceptions which are caught and re-raised on the context of
<a href="#Gtk.Main.Router.Request_1">Request</a>.</p>
		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Main.Router.Request"></a>procedure</font> Request (<b>Service</b> : 
Gtk_Callback);</tt></p>
</blockquote>
<p>The caller will wait 
until the request will be serviced through a call to <b>Service</b> on the GTK+ context. 
Program_Error is propagated when <a href="#Gtk.Main.Router.Init">Init</a> was 
not called. Other exceptions are the exceptions propagated out of
<a href="#Gtk.Main.Router.Service">Service</a> and re-raised on the caller's 
context. Quit_Error is propagated when the main <a href="http://www.gtk.org">GTK+</a> 
loop was quitted before the request was serviced.</p>
		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Main.Router.Generic_Callback_Request">
</a>generic<br>
&nbsp;&nbsp; type </font>User_Data (&lt;&gt;)<font color="#0000FF"> is limited private</font>;<br>
<font color="#0000FF">package</font> Generic_Callback_Request
<font color="#0000FF">is</font> ...</tt></p>
</blockquote>
<p>The package is instantiated with the user data type. It declares the type:</p>
		<blockquote>
<p><tt><font color="#0000FF">type</font> Callback_Procedure
<font color="#0000FF">is<br>
&nbsp;&nbsp; access procedure </font>(<b>Data</b> : <font color="#0000FF">not 
null access</font> 
User_Data);</tt></p>
</blockquote>
<p>This is the procedure to be called on the GTK+ context.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Request<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Callback</b> : 
Callback_Procedure;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> User_Data<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>The caller will wait 
until the request will be serviced through a call to <b>Callback</b> on the GTK+ context. 
Program_Error is propagated when <a href="#Gtk.Main.Router.Init">Init</a> was 
not called. Other exceptions are the exceptions propagated out of
<b>Callback</b> and re-raised on the caller's 
context. Quit_Error is propagated when the main <a href="http://www.gtk.org">GTK+</a> 
loop was quitted before the request was serviced.</p>
		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Main.Router.Generic_Message"></a>
generic<br>
&nbsp;&nbsp; type </font>User_Data<font color="#0000FF"> is private;<br>
package </font>Generic_Message<font color="#0000FF"> is</font> ...</tt></p>
</blockquote>
<p>The package is provided for execution of user-defined procedures on the GTK+ 
context asynchronously to the caller. The package formal parameter is the data 
type passed to a call. Note that the type is not limited because the values of 
are marshaled. Note also that this package does not provide any performance 
advantages over synchronous calls. It is provided for rare cases when servicing 
the request requires completion of the caller. For example, when the caller is a 
task that performs some lengthy action which upon completion should destroy a widget 
that owns the task. When widget destruction is requested from the task it will 
also wait for the task to finalize. When accomplished synchronously this would 
deadlock. Observe that for this reason use of
<a href="#Gtk.Main.Router.Generic_Message">Generic_Message</a> on the GTK+ 
context is meaningless, though allowed.</p>
		<blockquote>
<p><tt><font color="#0000FF">type</font> Handler_Procedure <font color="#0000FF">
is access procedure</font> (<b>Data</b> : <font color="#0000FF">in out </font>User_Data);</tt></p>
</blockquote>
<p>This is the procedure to be called on the GTK+ context.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Send<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Handler</b> : 
Handler_Procedure;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp; 
: User_Data;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Timeout</b> : Duration := <font color="#800000">0.5</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This call requests execution of <b>Handler</b> with <b>Data</b> parameters. 
It does not block the caller. When called on the context of the main loop, the 
callback is postponed until messages loop end. <b>Data</b> is marshaled. Program_Error is propagated when <a href="#Gtk.Main.Router.Init">Init</a> was 
not called. Quit_Error is propagated when the main <a href="http://www.gtk.org">GTK+</a> 
loop was quitted before the request was serviced. Busy_Error is propagated when
<b>Timeout</b> is expired.</p>
<H3><a name="1.1"></a>1.1. Example</H3>
<p>The following is a small test program illustrating use of the package.</p>File <EM>test_gtk_tasking.adb</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt><font color="#0000FF">with</font> Ada.Exceptions; <font color="#0000FF">&nbsp;use</font> 
Ada.Exceptions;<font color="#0000FF"><br>
with </font>GtkAda.Handlers; <font color="#0000FF">use</font> GtkAda.Handlers;<font color="#0000FF"><br>
with </font>Gtk.Main.Router; <font color="#0000FF">use </font>Gtk.Main.Router; <font color="#0000FF">
<br>
with</font> Gtk.Window; <font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp; use </font>
Gtk.Window;<font color="#0000FF"><br>
with </font>Gtk.Widget; <font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp; use</font> 
Gtk.Widget;<font color="#0000FF"><br>
with </font>Gtk.Table; <font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; use </font>
Gtk.Table;<font color="#0000FF"><br>
with </font>Gtk.Label;&nbsp; <font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp; use</font> 
Gtk.Label;<font color="#0000FF"><br>
<br>
with</font> Ada.Unchecked_Conversion;<font color="#0000FF"><br>
with </font>Gtk.Missed;<font color="#0000FF"><br>
<br>
procedure </font>Test_Gtk_Tasking<font color="#0000FF"> is<br>
</font><font color="#008000">&nbsp;&nbsp; --<br>
&nbsp;&nbsp; -- All data are global, for the sake of simplicity<br>
&nbsp;&nbsp; --</font><font color="#0000FF"><br>
</font>&nbsp;&nbsp; Window&nbsp; : Gtk_Window;<br>
&nbsp;&nbsp; Grid&nbsp;&nbsp;&nbsp; : Gtk_Table;<br>
&nbsp;&nbsp; Label&nbsp;&nbsp; : Gtk_Label;<br>
&nbsp;&nbsp; Counter : Integer;<br>
<br>
<font color="#008000">&nbsp;&nbsp; -- Circumvention of access rules, 
don't do it, it is here only to<br>
&nbsp;&nbsp; -- simplify the test <br>
</font><font color="#0000FF">&nbsp;&nbsp; type </font>Local_Callback<font color="#0000FF"> 
is access procedure</font>;<font color="#0000FF"><br>
&nbsp;&nbsp; function </font>&quot;<font color="#FF0000">+</font>&quot;<font color="#0000FF"> 
is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new </font>Ada.Unchecked_Conversion (Local_Callback, 
Gtk_Callback);<font color="#0000FF"><br>
<br>
&nbsp;&nbsp; task type </font>Process;<font color="#0000FF"><br>
<br>
</font><font color="#008000">&nbsp;&nbsp; -- Update will write the label<br>
</font><font color="#0000FF">&nbsp;&nbsp; procedure </font>Update<font color="#0000FF"> 
is<br>
&nbsp;&nbsp; begin<br>
&nbsp;&nbsp; </font>&nbsp;&nbsp; Label.Set_Text (&quot;<font color="#FF0000">Counter</font>&quot; 
&amp; Integer'Image (Counter));<font color="#0000FF"><br>
&nbsp;&nbsp; end </font>Update;<font color="#0000FF"><br>
<br>
</font><font color="#008000">&nbsp;&nbsp; -- The task that calls to Update<br>
</font><font color="#0000FF">&nbsp;&nbsp; task body</font> Process
<font color="#0000FF">is<br>
&nbsp;&nbsp; begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for </font>Index<font color="#0000FF"> in </font>
Positive'Range<font color="#0000FF">  
loop<br>
</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Counter := Index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Request (+Update'<font color="#0000FF">Access</font>);<font color="#008000"> 
-- Request execution of Update</font><font color="#0000FF"><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font>delay 
<font color="#800000">0.5</font>;<font color="#0000FF"><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; end loop</font>;<font color="#0000FF"><br>
&nbsp;&nbsp; exception<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when </font>Quit_Error =&gt;<font color="#008000"> 
-- Main loop was quitted, we follow</font><font color="#0000FF"><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; null</font>;<font color="#0000FF"><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when </font>Error :<font color="#0000FF"> others</font> 
=&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Say (Exception_Information 
(Error)); <font color="#008000">-- This is safe</font><font color="#0000FF"><br>
&nbsp;&nbsp; end</font> Process;<br>
<font color="#0000FF"><br>
begin<br>
</font>&nbsp;&nbsp; Gtk.Main.Init;<br>
&nbsp;&nbsp; Gtk.Window.Gtk_New (Window);<br>
&nbsp;&nbsp; Gtk.Main.Router.Init (Window); <font color="#008000">-- This must be called 
once</font><font color="#0000FF"><br>
</font>&nbsp;&nbsp; Window.Set_Title (&quot;<font color="#FF0000">Test</font>&quot;);<br>
&nbsp;&nbsp; Window.On_Delete_Event (Gtk.Missed.Delete_Event_Handler'Access);<br>
&nbsp;&nbsp; Window.On_Destroy (Gtk.Missed.Destroy_Handler'Access);<br>
&nbsp;&nbsp; Gtk_New (Grid, <font color="#800000">1</font>,
<font color="#800000">1</font>, False);<br>
&nbsp;&nbsp; Window.Add (Grid);<br>
&nbsp;&nbsp; Gtk_New (Label, &quot;<font color="#FF0000">label</font>&quot;);<br>
&nbsp;&nbsp; Grid.Attach (Label, <font color="#800000">0</font>,
<font color="#800000">1</font>, <font color="#800000">0</font>,
<font color="#800000">1</font>);<br>
<br>
&nbsp;&nbsp; Label.Show;<br>
&nbsp;&nbsp; Grid.Show;<br>
&nbsp;&nbsp; Window.Show;<font color="#0000FF"><br>
&nbsp;&nbsp; declare<br>
</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Worker : Process;<font color="#008000"> -- 
Now the task is on</font><font color="#0000FF"><br>
&nbsp;&nbsp; begin<br>
</font><font color="#008000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- Enter the events 
processing loop<br>
</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Gtk.Main.Main;<br>
<font color="#0000FF">&nbsp;&nbsp; end</font>;<font color="#0000FF"><br>
exception<br>
&nbsp;&nbsp; when</font> Error : <font color="#0000FF">others</font> =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Say (Exception_Information (Error));<font color="#008000"> 
-- This is safe</font><font color="#0000FF"><br>
end</font> Test_Gtk_Tasking;</tt></TD>
  </TR>
</TABLE>

<H3><a name="1.2"></a>1.2. Debugging tools</H3>
<p>The package Gtk.Main.Router also provides two procedures for simple debugging and messaging 
purposes:</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure </font>Say<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Message</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Title</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : UTF8_String 
:= &quot;&quot;;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Mode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</b>&nbsp;&nbsp; : UTF8_String := Stock_Dialog_Info;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Justification</b> : Gtk_Justification := Justify_Left;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Parent</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">
access</font> Gtk_Widget_Record'Class 
:= <font color="#0000FF">null</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
		<p>This procedure pops a dialog box with <b>Message</b> in it. It can be called from any task. </p>

		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Main.Router.Trace"></a>procedure </font>Trace<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Message</b> : 
UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Break</b>&nbsp;&nbsp; : Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
		<p>This procedure represents a simplified tracing mechanism. When called 
		first time it pops up a dialog box containing <b>Message</b>.</p>
<blockquote>
	<p><img border="0" src="main_router_trace.gif" width="392" height="226" alt="main router trace"></p>
</blockquote>
<p>All further calls add new messages to the box. The dialog box has the check 
button <i>break</i>. When this button is checked each call to Trace blocks until user confirmation. When the button is unchecked the procedure 
adds its message without waiting. The button <i>break</i> can be checked at any 
time. Once checked it will hold on the next message. Then the button <i>next</i> 
continues execution until a next message. It has the effect of checking the <i>break</i> button. The button
<i>record</i> continues without further confirmations, and thus it resets the check state 
of <i>break</i>. The button
<i>quit</i> closes the box. The box will be automatically reopened empty on the 
next message. The parameter <b>Break</b> when set to <i><font color="#800000">
true</font></i> overrides unchecked <i>break</i> button and enters wait after 
adding the message. This can be useful when the message indicates a certain 
error.</p>

		<blockquote>
<p><tt><font color="#0000FF">procedure </font>Trace<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Error</b> : 
Exception_Occurence;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Break</b> : Boolean := True<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
		<p>This procedure is a shortcut for</p>

		<blockquote>
<p><tt>Trace (Ada.Exceptions.Exception_Information (Error), Break);</tt></p>
</blockquote>
		<p>It typically is used like:</p>

		<blockquote>
<p><tt>&nbsp;&nbsp; ... <font color="#008000">-- A suspicious code fragment</font><br>
<font color="#0000FF">exception<br>
&nbsp;&nbsp; when </font>Error : <font color="#0000FF">others</font> =&gt;
<font color="#008000">-- Breaks execution, shows</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Trace (Error);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#008000">-- the exception message</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">raise</font>;<br>
<font color="#0000FF">end</font>;</tt></p>
</blockquote>

<H3><a name="1.3"></a>1.3. GNAT-specific debugging tools</H3>
<p>The child package Gtk.Main.Router.GNAT_Stack provides procedures 
<a href="#Gtk.Main.Router.GNAT_Stack.Say">Say</a> and 
<a href="#Gtk.Main.Router.GNAT_Stack.Trace">Trace</a> of the same profile as its parent. They add stack symbolic traceback to 
the message printed:</p>
		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Main.Router.GNAT_Stack.Say"></a>procedure </font>Say<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Message</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Title</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : UTF8_String 
:= &quot;&quot;;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Mode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</b>&nbsp;&nbsp; : UTF8_String := Stock_Dialog_Info;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Justification</b> : Gtk_Justification := Justify_Left;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Parent</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">
access</font> Gtk_Widget_Record'Class := <font color="#0000FF">null</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
<a name="Gtk.Main.Router.GNAT_Stack.Trace"></a>procedure </font>Trace<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Message</b> : 
UTF8_String;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
<b>Break</b>&nbsp;&nbsp; : Boolean := False<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure </font>Trace<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Error</b> : 
Exception_Occurence;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
<b>Break</b> : Boolean := True<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p><a href="#Gtk.Main.Router.GNAT_Stack.Trace">Trace</a> can be used as follows:</p>
<blockquote>
	<p><tt>&nbsp;&nbsp; ... <font color="#008000">-- A suspicious code fragment</font><br>
	<font color="#0000FF">exception<br>&nbsp;&nbsp; when </font>Error : 
	<font color="#0000FF">others</font> =&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	<font color="#008000">-- Breaks execution, shows<br></font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	Gtk.Main.Router.GNAT_Stack.Trace (Error);<font color="#008000"> -- the 
	exception message</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	<font color="#0000FF">raise</font>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	<font color="#008000">-- and the call stack</font><br><font color="#0000FF">end</font>;</tt></p>
</blockquote>
<p>The procedures use GNAT.Traceback.Symbolic for this purpose. Please refer to 
the <i>GNAT Reference Manual</i> for the prerequisites of.</p>

		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Main.Router.GNAT_Stack.Set_Log_Trace">
</a>procedure </font>Set_Log_Trace<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Domain</b> : 
String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Level</b>&nbsp; : Log_Level_Flags := Log_Fatal_Mask <font color="#0000FF">or</font> 
Log_Level_Critical<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<font color="#0000FF">procedure </font>Set_Log_Trace;</tt></p>
</blockquote>
		<p>This procedure is used for catching 
			<a href="http://www.gtk.org">GTK+</a> log messages. Usually these 
		messages indicate very severe errors which are extremely difficult to 
		track down, because they occur in the core libraries of 
			<a href="http://www.gtk.org">GTK+</a> written in C. The procedure 
		eases debugging such errors by&nbsp;causing a log message to appear 
		in the tracing dialog box accompanied by the call stack dump. Doing that 
		it stops the application until user confirmation. The parameters of 
		the procedure are <b>Domain</b> indicating which messages has to be 
		caught and <b>Level</b> specifying the severity level of. When this 
		procedure is called several times its effect is accumulated. Some domain 
		names are:</p>
<ul>
	<li><i>Gtk</i> stands for the Gtk library;</li>
	<li><i>GLib-GObject</i> is for GLib's objects;</li>
	<li><i>GtkAda+</i> is used by this library.</li>
</ul>
<p>Please refer <a href="http://www.gtk.org">GTK+</a> documentation for further 
domain names. When <b>Domain</b> and <b>Level</b> are omitted, all messages from all domains are 
caught. Note that this happens only if the messages are not caught by other 
means, i.e. it acts as a default message handler.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure </font>Indent<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Message</b> : 
UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Break</b>&nbsp;&nbsp; : Boolean&nbsp; := False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Step</b>&nbsp;&nbsp;&nbsp; 
: Positive := <font color="#800000">2</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure places <b>Message</b> in the messages box adding as the prefix 
a chain of spaces, which length is <b>Step</b> multiplied by the depth of the 
call step: It can be useful to trace recursive subprograms in order to 
determine which instance of the caller has printed the message.</p>

		<blockquote>
<p><tt><font color="#0000FF">type </font>Log_Filter<font color="#0000FF"> is 
abstract tagged limited private</font>;</tt></p>
</blockquote>
		<p>An object of this type is used to filter messages additionally to the 
		domain and level.</p>

		<blockquote>
<p><tt><font color="#0000FF">function </font>Ignore<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Filter</b>&nbsp; :
<font color="#0000FF">not null access</font> Log_Filter;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Domain</b>&nbsp; 
: String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Level</b>&nbsp;&nbsp; 
: Log_Level_Flags;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Message</b> 
: UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return </font>Boolean<font color="#0000FF"> is abstract</font>;</tt></p>
</blockquote>
		<p>This function returns <i><font color="#800000">true</font></i> if the 
		message must be ignored. If any of the filters returns <i>
		<font color="#800000">true</font></i> the message is not traced. </p>
<h3><a name="1.4"></a>1.4. Translation of addresses into the source lines</h3>
<p><a name="Translation-of-addresses"></a>Right mouse click on the trace dialog brings the dropdown menu expanded with 
two items as shown below (the look and feel may vary as it depends on the 
operating system):</p>
<blockquote>
	<p><img border="0" src="trace_dropdown_menu.gif" alt="trace dropdown menu"></p>
</blockquote>
<p>The choice <i>paste stack traceback</i> is used to paste GNAT exception 
traceback. The traceback is a part of Exception_Information. It has the format:</p>

		<blockquote>
<p><tt>0x5e1b6e 0x5e109f 0x5f1c28 0x5f850a 0x5f7511 0x5f06df 0x59544b 0x5a66a5</tt></p>
</blockquote>
		<p>When pasted it is replaced by the symbolic traceback as the utility 
		addr2line does. The prerequisite is that the application is build with 
		debug information included.</p>
<h3><a name="1.5"></a>1.5. Source navigation</h3>
<p>The <i>choice go to the source location</i> is used to open a file in the GPS. 
When the mouse cursor point at a traceback line which contains a reference to a 
source file, then GPS is asked to open the file at the line specified in the 
traceback line. The prerequisites are</p>
<ol>
	<li>The application has debug information;</li>
	<li>The file is a part of the project;</li>
	<li>GPS is running and has the project open;</li>
	<li>GPS is running in the server mode;</li>
	<li>The port GPS server listens must be available for the application (e.g. 
	not blocked by the firewall).</li>
</ol>
<p>The server mode of GPS is activated as follows:</p>

		<blockquote>
<p><tt>&gt; gps --server=50000</tt></p>
</blockquote>
		<p>Here 50000 is the TCP/IP port GPS will listen. The port number is 
		specified in the <a href="#Gtk.Main.Router.Init">Init</a> call.</p>
<h3><a name="1.6"></a>1.6. Debugging GTK+ programs</h3>
<p>It is sometimes quite tedious to track down bugs in a GTK+ application. Many of 
the safeguards, the Ada language has, do not really work with GTK+. Errors are 
usually detected at run-time at the context of the GTK+, where little can be 
done. Here is a summary of the 
basic techniques for designing and debugging GTK+ programs in Ada: </p>
<p>Begin your GTK+ program with:</p>
<blockquote>
	<p><tt><font color="#0000FF">begin</font><br>
&nbsp;&nbsp; Gtk.Main.Init;<br>
&nbsp;&nbsp; Gtk.Main.Router.Init; <font color="#008000">-- Start routing and 
	tracing</font><br>
&nbsp;&nbsp; Gtk.Main.Router.GNAT_Stack.Set_Log_Trace (&quot;<font color="#FF0000">Gdk</font>&quot;);<br>
&nbsp;&nbsp; Gtk.Main.Router.GNAT_Stack.Set_Log_Trace (&quot;<font color="#FF0000">Gtk</font>&quot;);<br>
&nbsp;&nbsp; Gtk.Main.Router.GNAT_Stack.Set_Log_Trace (&quot;<font color="#FF0000">GLib-GObject</font>&quot;);<br>
&nbsp;&nbsp; Gtk.Main.Router.GNAT_Stack.Set_Log_Trace (&quot;<font color="#FF0000">GtkAda+</font>&quot;);<br>
&nbsp;&nbsp; Gtk.Main.Router.GNAT_Stack.Set_Log_Trace (&quot;<font color="#FF0000">my_application</font>&quot;);<br>
&nbsp;&nbsp; ...<br>
&nbsp;&nbsp; Gtk.Main.Main;</tt></p>
</blockquote>
<p>This enables routing and tracing, while catching GTK+ errors. The procedure
<a href="#Gtk.Main.Router.GNAT_Stack.Set_Log_Trace">Set_Log_Trace</a> described 
above turns on tracing for the errors in Gdk, Gtk, GLib, GtkAda contributions and 
the application itself. The most of errors happen in event handlers. Note that a 
handler is called on the context of GTK+. Propagation of an exception out of a 
handler will most likely crash the application. This is the reason why all 
handlers should rather catch exceptions. E.g.:</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Button_Clicked (Button :
	<font color="#0000FF">access</font> Gtk_Button_Record'Class)
	<font color="#0000FF">is<br>
	begin</font><br>
&nbsp;&nbsp; ...<br>
	<font color="#0000FF">exception<br>
&nbsp;&nbsp; when</font> Error : <font color="#0000FF">others</font> =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Log<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; &quot;<font color="#FF0000">my_application</font>&quot;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Log_Level_Critical,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">Fault in 
	Button_Clicked:</font>&quot; &amp; Exception_Information (Error)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
	<font color="#0000FF">end</font> Button_Clicked;</tt></p>
</blockquote>
<p>In combination with an initialization shown above, the effect of an exception in Button_Clicked 
will cause the trace dialog popped up, with the exception information in it. The 
application will be stopped. If the GPS is active and in the server mode, you 
will be able to 
navigate the call stack of the error inspecting the source code locations as 
described <a href="#Translation-of-addresses">above</a>. The application can be 
continued from the trace dialog, which will not crash it. As it was said above 
it is meaningless to propagate an exception out of an event handler.</p>
<p>The GPS in server mode is started as:</p>
<blockquote>
	<p><tt>&gt; gps --server=50000 <i>my-project-name</i>.gpr</tt></p>
</blockquote>
<p>Note that even release version can be built with the <tt>-g</tt> switch. This does not have any effect on the program performance, 
since it only adds the debugging information necessary to translate stack trace back into 
source line locations.</p>

<hr><p align="right">
  <A name="2"></A><a href="#1"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><a href="#14"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></a><a href="#3"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H2>2. GTK+ tree view</H2>
<a href="https://developer.gnome.org/gtk3/stable/GtkTreeView.html">GtkTreeView</a>
provides tree views in <a href="http://www.gtk.org">GTK+</a>. The following packages are provided for dealing 
with <a href="https://developer.gnome.org/gtk3/stable/GtkTreeView.html">GtkTreeView</a>
from Ada. The code of Gtk.Tree_Model.Abstract_Store was inspired by an 
implementation of a custom model by Maxim Resznik.<p><i>Notes about sizing tree 
views placed in a scrolled window</i>. The tree view widget does not 
automatically shrink or expand its parent scrolled window. The effect is that 
the vertical height of the tree view is often too small when the scrolled window 
containing it is in turn a part of a top level window, such as a dialog. An 
application might wish to find a better size for the scroll window than  
			<a href="http://www.gtk.org">GTK+</a>  
does. That is - no blank rows beneath the last visible row, all expanded rows 
visible when there is not too many of them. The following code snippet 
illustrates a possible approach:</p>
		<blockquote>
<p><tt>. . .<font color="#008000"> -- Placing items into the model, expanding 
rows, etc<br>
</font><font color="#0000FF">declare<br>
</font>&nbsp;&nbsp; Dummy&nbsp; : GInt;<br>
&nbsp;&nbsp; Height : GInt;<br>
&nbsp;&nbsp; Width&nbsp; : GInt;<font color="#0000FF"><br>
begin<br>
</font>&nbsp;&nbsp; Tree_View.Columns_Autosize;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#008000"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- Size columns<br>
&nbsp;&nbsp;
</font>Tree_View.Get_Preferred_Width&nbsp; (Dummy, Width); <font color="#008000"> &nbsp;-- 
Query the integral<br>
&nbsp;&nbsp;
</font>Tree_View.Get_Preferred_Height (Dummy, Height);<font color="#008000"> -- 
tree view size</font><br>
&nbsp;&nbsp; Tree_View.Set_Size_Request&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;
<font color="#008000">-- Set new size</font><br>
&nbsp;&nbsp; (&nbsp; GInt'Min (Width,&nbsp; <font color="#800000">
600</font>),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GInt'Min (Height, <font color="#800000">500</font>)<br>
&nbsp;&nbsp; );<br>
<font color="#0000FF">end</font>;</tt></p>
</blockquote>
<p>Here Get_Preferred_Width and Get_Preferred_Height ask the tree view to return its integral size. Note that 
at this point the rows should be already added and expanded as necessary. Then Set_Size_Request sets the new tree view size to the 
returned height and width, but not greater than some reasonable limits, usually chosen to fit 
into the screen size or parent window. The container widget (a scrolled window) 
will automatically resize together with the tree view.</p>
<H3>2.1. <a name="2.1"></a>Abstract custom model</H3>
<p>The package Gtk.Tree_Model.Abstract_Store provides an abstract base type 
(Gtk_Abstract_Model_Record) for developing custom tree view models:<blockquote>
	<p><tt><font color="#0000FF"><a name="Gtk_Abstract_Model_Record"></a>type
	</font>Gtk_Abstract_Model_Record<font color="#0000FF"> is<br>
&nbsp;&nbsp; abstract new </font>Gtk_Root_Tree_Model_Record <font color="#0000FF"> with private</font>;</tt></blockquote>
<p>Objects of the types derived from <a href="#Gtk_Abstract_Model_Record">
Gtk_Abstract_Model_Record</a> will implement the
<a href="https://developer.gnome.org/gtk3/stable/GtkTreeModel.html">GtkTreeModel</a> interface.&nbsp;The 
implementation maps <a href="http://www.gtk.org">GTK+</a> virtual functions to the abstract primitive operations of the base type. A derived type shall provide implementations for them. 
The abstract primitive operations to override are:<ul>
	<li><i>Children</i> returns the first child node of a tree node. Each node of the 
	tree corresponds to a row;</li>
	<li><i>Get_Column_Type</i> returns the type of a column. Columns are numbered from 
	0;</li>
	<li><i>Get_Flags</i> returns the flags of the model;</li>
	<li><i>Get_Iter</i> converts a path to the corresponding iterator. An iterator 
	uniquely identifies a row. A path uniquely identifies a sequence of rows 
	bound by a parent-child relation;</li>
	<li><i>Get_N_Columns</i> returns the number of columns;</li>
	<li><i>Get_Path</i> converts an iterator to the corresponding path;</li>
	<li><i>Get_Value</i> returns a cell value specified by the column and row. The latter is 
	indicated by an iterator;</li>
	<li><i>Has_Child</i> returns <i><font color="#800000">true</font></i> if a tree node has children;</li>
	<li><i>Next</i> returns an iterator to the next sibling of a node;</li>
	<li><i>Nth_Child</i> returns an iterator to the Nth child of a node;</li>
	<li><i>N_Children</i> returns the number of children of a node;</li>
	<li><i>Parent</i> returns an iterator to the parent node;</li>
	<li><i>Previous</i> returns an iterator to the previous sibling of a node.</li>
	</ul>
	<p>The following operations have a default implementation:</p>
	<ul>
		<li><i>Ref_Node</i> notifies that a node is in use</li>
		<li><i>Unref_Node</i> notifies that a node is no more in use</li>
		</ul>
		<p>Other operations:</p>
		<ul>
			<li><i>Finalize</i> can be overridden to provide an Ada-style finalization. 
			When overridden, it must call the default implementation from the body;</li>
			<li><i>Initialize</i> shall be called by any derived type;</li>
			<li><i>Register</i> shall be called once, to register the 
			<a href="http://www.gtk.org">GTK+</a> type of the 
			implementation.</li>
		</ul>
		<blockquote>
			<p><tt><font color="#0000FF">function</font> Children<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b>&nbsp; :
			<font color="#0000FF">not null access</font> Gtk_Abstract_Model_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Parent</b> 
			: Gtk_Tree_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
			return</font> Gtk_Tree_Iter<font color="#0000FF"> is abstract</font>;</tt></p>
		</blockquote>
		<p>This function return the first child of <b>Parent</b> or Null_Iter. When 
		<b>Parent</b> is Null_Iter, the first top node should be the result.</p>
		<blockquote>
			<p><tt><font color="#0000FF">procedure</font> Finalize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Model :
			<font color="#0000FF">not null access</font> 
			Gtk_Abstract_Model_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
			<font color="#0000FF">is null</font>;</tt></p>
		</blockquote>
		<p>This procedure is called upon object destruction. The override, if 
		any, shall call the parent's version.</p>
		<blockquote>
			<p><tt><font color="#0000FF">function </font>Get_Column_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b> :
			<font color="#0000FF">not null access</font> Gtk_Abstract_Model_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b> 
			: GInt<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
			return </font>GType<font color="#0000FF"> is abstract</font>;</tt></p>
		</blockquote>
		<p>This function returns the type of the model column. <b>Index</b> is the 
		column number, zero based. GType_Invalid is returned when the column 
		does not exist.</p>
		<blockquote>
			<p><tt><font color="#0000FF">function </font>Get_Flags (<b>Model</b> 
			: <font color="#0000FF">not null access</font> Gtk_Abstract_Model_Record)<font color="#0000FF"><br>
&nbsp;&nbsp; return </font>Tree_Model_Flags<font color="#0000FF"> is abstract</font>;</tt></p>
		</blockquote>
		<p>This function returns the flags of <b>Model</b>.</p>
		<blockquote>
			<p><tt><font color="#0000FF">function </font>Get_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b> :
			<font color="#0000FF">not null access</font> Gtk_Abstract_Model_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Path</b>&nbsp; 
			: Gtk_Tree_Path<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
			return </font>Gtk_Tree_Iter<font color="#0000FF"> is abstract</font>;</tt></p>
		</blockquote>
		<p>This function converts <b>Path</b> to iterator. The result is 
		Null_Iter when the path is invalid.</p>
		<blockquote>
			<p><tt><font color="#0000FF">function </font>Get_N_Columns (<b>Model</b> 
			: <font color="#0000FF">not null access</font> Gtk_Abstract_Model_Record)<br>
&nbsp;&nbsp; <font color="#0000FF">return </font>GInt<font color="#0000FF"> is 
			abstract</font>;</tt></p>
		</blockquote>
		<p>This function returns number of columns in <b>Model</b>.</p>
		<blockquote>
			<p><tt><font color="#0000FF">function </font>Get_Path<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b> :
			<font color="#0000FF">not null access</font> Gtk_Abstract_Model_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Iter</b>&nbsp; 
			: Gtk_Tree_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
			return </font>Gtk_Tree_Path<font color="#0000FF"> is abstract</font>;</tt></p>
		</blockquote>
	<p>This function gets the path from an iterator. A path is dynamically 
	allocated and has to be freed later using Path_Free.</p>
		<blockquote>
			<p><tt><font color="#0000FF">procedure </font>Get_Value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b>&nbsp; 
			: <font color="#0000FF">not null access</font> Gtk_Abstract_Model_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Iter</b>&nbsp;&nbsp; 
			: Gtk_Tree_Iter;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
			Column</b> : Gint;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
			Value</b>&nbsp; : <font color="#0000FF">out</font> GValue<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
			<font color="#0000FF">is abstract</font>;</tt></p>
		</blockquote>
	<p>This procedure is used to query a value from <b>Model</b> for the 
	iterator <b>Iter</b> and column <b>Column</b> (zero-based). The result is 
	returned in <b>Value</b>. Values are freed by the caller using Unset. It 
	means that the implementation must always initialize <b>Value</b>. When no 
	value can be returned because of some errors an invalid value can be used 
	instead:</p>
		<blockquote>
			<p><tt>Init (Value, GType_Invalid);</tt></p>
		</blockquote>
<p>Here the value is initialized for the type GType_Invalid.</p>
		<blockquote>
			<p><tt><font color="#0000FF">function </font>Has_Child<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b> :
			<font color="#0000FF">not null access </font>Gtk_Abstract_Model_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Iter</b>&nbsp; 
			: Gtk_Tree_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
			return </font>Boolean<font color="#0000FF"> is abstract</font>;</tt></p>
		</blockquote>
	<p>This function returns <i><font color="#800000">true</font></i> if the row 
	indicated by <b>Iter</b> has a child in <b>Model</b>.</p>
		<blockquote>
			<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b>&nbsp;&nbsp; 
			: <font color="#0000FF">not null access</font> 
			Gtk_Abstract_Model_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
			Type_Of</b> : GType<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
		</blockquote>
	<p>This procedure has to be called by any derived type upon object 
	construction. Normally it is the first call of its Initialize, which in turn 
	is called from a Gtk_New. The parameter <b>Type_Of</b> must be a value 
	returned by <a href="#Gtk.Tree_Model.Abstract_Store.Register">Register</a> 
	called with the name assigned to the GTK+ type of the derived type. Note 
	that <a href="#Gtk.Tree_Model.Abstract_Store.Register">Register</a> shall be 
	called only once. So its result must be stored somewhere in the package that 
	derives the type. The following code snippets illustrate use of Register: The package 
		specification:</p>
		<blockquote>
<p><tt><font color="#0000FF">type </font>My_Model_Record<font color="#0000FF"> 
is new </font>Gtk_Abstract_Model_Record<font color="#0000FF"> with private</font>;<font color="#0000FF"><br>
type </font>My_Model<font color="#0000FF"> is access all </font>
My_Model_Record'Class;<font color="#0000FF"><br>
<br>
function </font>Get_Type<font color="#0000FF"> return</font> Gtk_Type;<font color="#0000FF"><br>
function</font> Gtk_New (Model : <font color="#0000FF">out</font> My_Model);<br>
<font color="#0000FF">procedure </font>Initialize (Model : <font color="#0000FF">
not null
access </font>My_Model_Record'Class);<br>
. . .<font color="#008000"> -- Overriding primitive operations</font></tt></p>
</blockquote>
		<p>The package body:</p>
		<blockquote>
<p><tt>My_Model_Type : GType := GType_Invalid;<font color="#0000FF"><br>
<br>
function </font>Get_Type<font color="#0000FF"> return </font>Gtk_Type<font color="#0000FF"> 
is<br>
begin<br>
&nbsp; if </font>My_Model_Type = GType_Invalid <font color="#0000FF">then<br>
&nbsp;&nbsp;&nbsp;&nbsp; </font>My_Model_Type := Register (&quot;<font color="#FF0000">MyModel</font>&quot;);<br>
<font color="#0000FF">&nbsp; end if</font>;<font color="#0000FF"><br>
&nbsp; return</font> My_Model_Type;<font color="#008000"> -- Registering the GTK+ 
type</font><br>
<font color="#0000FF">end</font> Get_Type;<font color="#0000FF"><br>
<br>
procedure </font>Initialize (Model : <font color="#0000FF">not null access </font>
My_Model_Record'Class)<font color="#0000FF"> is<br>
begin<br>
</font>&nbsp;&nbsp; Initialize (Model, Get_Type);<br>
&nbsp;&nbsp; . . .<font color="#008000"> -- Custom initialization</font><br>
<font color="#0000FF">end </font>Initialize;</tt></p>
</blockquote>
		<blockquote>
			<p><tt><font color="#0000FF">procedure</font> Next<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b> :
			<font color="#0000FF">not null access</font> Gtk_Abstract_Model_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Iter</b>&nbsp; 
			: <font color="#0000FF">in out</font> Gtk_Tree_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
			<font color="#0000FF">is abstract</font>;</tt></p>
		</blockquote>
	<p>This function moves <b>Iter</b> to the next sibling node. Null_Iter is 
	the result when there is no more siblings.</p>
		<blockquote>
			<p><tt><font color="#0000FF">function</font> Nth_Child<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b>&nbsp; :
			<font color="#0000FF">not null access</font> Gtk_Abstract_Model_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Parent</b> 
			: Gtk_Tree_Iter;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>N</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
			: GInt<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
			return</font> Gtk_Tree_Iter <font color="#0000FF">is abstract</font>;</tt></p>
		</blockquote>
	<p>This gets iterator to a child of <b>Parent</b> by its zero-based number
	<b>N</b>. Null_Iter is the result when there is no such child. When <b>
	Parent</b> is Null_Iter roots are returned.</p>
		<blockquote>
			<p><tt><font color="#0000FF">function</font> N_Children<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b> :
			<font color="#0000FF">not null access</font> Gtk_Abstract_Model_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Iter</b>&nbsp; 
			: Gtk_Tree_Iter := Null_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
			return</font> GInt <font color="#0000FF">is abstract</font>;</tt></p>
		</blockquote>
	<p>This function returns the number of children of <b>Iter</b>.</p>
		<blockquote>
			<p><tt><font color="#0000FF">function</font> Parent<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b> :
			<font color="#0000FF">not null access</font> Gtk_Abstract_Model_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Child</b> 
			: Gtk_Tree_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
			return</font> GInt <font color="#0000FF">is abstract</font>;</tt></p>
		</blockquote>
	<p>This function returns the parent of <b>Child</b>. For roots Null_Iter is 
	returned.</p>
		<blockquote>
			<p><tt><font color="#0000FF">procedure</font> Previous<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b> :
			<font color="#0000FF">not null access</font> Gtk_Abstract_Model_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Iter</b>&nbsp; 
			: <font color="#0000FF">in out</font> Gtk_Tree_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
			<font color="#0000FF">is abstract</font>;</tt></p>
		</blockquote>
	<p>This function moves <b>Iter</b> to the previous sibling node. Null_Iter is 
	the result when there is no more siblings.</p>
		<blockquote>
			<p><tt><font color="#0000FF">procedure</font> Ref_Node<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b> :
			<font color="#0000FF">not null access</font> Gtk_Abstract_Model_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Iter</b>&nbsp; 
			: Gtk_Tree_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
		</blockquote>
	<p>The default implementation does nothing.</p>
		<blockquote>
			<p><tt><font color="#0000FF">
			<a name="Gtk.Tree_Model.Abstract_Store.Register"></a>function</font> 
			Register<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Signals</b>&nbsp;&nbsp;&nbsp; 
			: Chars_Ptr_Array := Null_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Parameters</b> 
			: Signal_Parameter_Types :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
			Null_Parameter_Types<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
			return</font> GType;</tt></p>
		</blockquote>
	<p>For each non-abstract derived type of
	<a href="#Gtk_Abstract_Model_Record">Gtk_Abstract_Model_Record</a> this 
	function shall be called once before creation of the first object of. For 
	each element of <b>Signals</b> a signal with this name and parameters from 
	the corresponding row of <b>Parameters</b> is added to 
	the registered type. The rows of the array <b>Parameters</b> are padded by 
	GType_None.</p>
		<blockquote>
			<p><tt><font color="#0000FF">procedure</font> Unref_Node<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b> :
			<font color="#0000FF">not null access</font> Gtk_Abstract_Model_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Iter</b>&nbsp; 
			: Gtk_Tree_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
		</blockquote>
	<p>The default implementation does nothing.</p>
<h4>2.1.1. <a name="2.1.1"></a>Custom model example</h4>
<p>Here we consider using the package Gtk_Abstract_Model_Record for developing a custom tree view model. 
The custom store is based on a doubly-linked list of records. The records 
contain imaginary transaction data:<ul>
	<li>Account number,</li>
	<li>User name,</li>
	<li>Amount,</li>
	<li>Timestamp.</li>
	</ul>
<p>The subdirectory <i>test_gtkada</i> contains the full source:</p>File g<i>tk.tree_model.custom_store</i><EM>.ads</EM>:<TABLE border="1" cellpadding="15" cellspacing="0" id="table1">
  <TR>
<TD bgcolor="#FFDEBD">
<p><tt><font color="#0000FF">with</font>
Ada.Strings.Unbounded; <font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; use</font> Ada.Strings.Unbounded;<br>
<font color="#0000FF">with</font> Ada.Calendar;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">&nbsp;use</font> Ada.Calendar;<br>
<font color="#0000FF">with</font> GLib;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">&nbsp;use</font> GLib;<br>
<font color="#0000FF">with</font> GLib.Values; <font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; use</font> GLib.Values;<br>
<font color="#0000FF">with</font> Gtk.Tree_Model;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">&nbsp;use</font> Gtk.Tree_Model;<br>
<font color="#0000FF">with</font> Gtk.Tree_Model.Abstract_Store;&nbsp;
<font color="#0000FF">use</font> Gtk.Tree_Model.Abstract_Store;<br>
<br>
<font color="#0000FF">package</font> Gtk.Tree_Model.Custom_Store
<font color="#0000FF">is</font><br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Account_No <font color="#0000FF">is range</font>
<font color="#800000">1</font>..<font color="#800000">100_000_000</font>;<br>
<font color="#0000FF">&nbsp;&nbsp;&nbsp;type</font>&nbsp;Currency&nbsp;<font color="#0000FF">is&nbsp;delta</font>&nbsp;<font color="#800000">0.01</font>&nbsp;<font color="#0000FF">range</font> -<font color="#800000">1_000_000_000.0</font>..<font color="#800000">1_000_000_000.0</font>;<br>
<font color="#008000">--<br>
-- Gtk_Transaction_Store_Record -- The type of the model<br>
--</font><br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Gtk_Transaction_Store_Record<font color="#0000FF"> is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
new </font>Gtk_Abstract_Model_Record<font color="#0000FF"> with private</font>;<br>
<font color="#008000">--<br>
-- Gtk_Transaction_Store -- The access type to deal with the objects of<br>
--</font><br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Gtk_Transaction_Store<font color="#0000FF"> is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
access all </font>Gtk_Transaction_Store_Record'Class;<br>
<font color="#008000">--<br>
-- Insert -- Add a new row into the model<br>
--</font><br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Insert<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Model&nbsp;&nbsp; : <font color="#0000FF">not null access</font> Gtk_Transaction_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Account : Account_No;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
User&nbsp;&nbsp;&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Amount&nbsp; : Currency;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Date&nbsp;&nbsp;&nbsp; : Time<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);<br>
<font color="#008000">--<br>
-- Gtk_New -- Create a new object<br>
--<br>
-- Model - The result<br>
--</font><br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Gtk_New (Model : 
<font color="#0000FF">out</font> Gtk_Transaction_Store);</tt></TD>
  </TR>
</TABLE>

	<p>The package defines the types of the record fields. Then 
	Gtk_Transaction_Store_Record is derived from Gtk_Abstract_Model_Record. 
	According to
	<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/">GtkAda</a> conventions this type is 
	not used directly. An access type Gtk_Transaction_Store to it is used 
	instead. The rationale is that 
	<a href="http://www.gtk.org">GTK+</a> 
	objects are subject of garbage collection. So they are never allocated on 
	the stack and are never freed explicitly.</p>
<p>Finally the public part of the interface contains the procedure Insert used 
to add new record to the store and the procedure Gtk_New, whch creates an empty 
store.</p>File <i>gtk.tree_model.custom_store</i><EM>.ads</EM><i> (continued)</i>:<TABLE border="1" cellpadding="15" cellspacing="0" id="table3">
  <TR>
<TD bgcolor="#FFDEBD">
<tt><font color="#0000FF">private</font><br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Transaction_Record;<br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Transaction_Record_Ptr
<font color="#0000FF">is access </font>Transaction_Record;<br>
<font color="#008000">--<br>
-- Gtk_Transaction_Store_Record -- Implemenbtation is a doubly-linked<br>
--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;list&nbsp;of&nbsp;Transaction_Record.&nbsp;The&nbsp;store<br>
-- holds a pointer to the first element in the list.<br>
--</font><br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Gtk_Transaction_Store_Record
<font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
new </font>Gtk_Abstract_Model_Record <font color="#0000FF">with<br>
&nbsp;&nbsp;
record</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
First : Transaction_Record_Ptr;<br>
&nbsp; <font color="#0000FF">&nbsp;end record</font>;</tt></TD>
  </TR>
</TABLE>

	<p>In the private part the Gtk_Transaction_Store_Record completed. It holds 
	a pointer to the first element of a doubly-linked list of Transaction_Record 
	items. Then the abstract primitive operations of Gtk_Abstract_Model_Record 
	get overridden:</p>
File <i>gtk.tree_model.custom_store</i><EM>.ads</EM><i> (continued)</i>:<TABLE border="1" cellpadding="15" cellspacing="0" id="table2">
  <TR>
<TD bgcolor="#FFDEBD">
<tt><font color="#008000">--<br>
-- Now, the implementation of the Gtk_Abstract_Model_Record primitive<br>
-- operations follows: <br>
--</font><br>
&nbsp;&nbsp; <font color="#0000FF">function</font> Children<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Model&nbsp; : <font color="#0000FF">not null access</font> Gtk_Transaction_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Parent : Gtk_Tree_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">return</font> Gtk_Tree_Iter;<br>
&nbsp;&nbsp; <font color="#0000FF">function</font> Get_Column_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Model : <font color="#0000FF">not null access</font> Gtk_Transaction_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Index : GInt<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">return</font> GType;<br>
&nbsp;&nbsp; <font color="#0000FF">function</font> Get_Flags (Model : <font color="#0000FF">
not null access</font> Gtk_Transaction_Store_Record)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> Tree_Model_Flags;<br>
&nbsp;&nbsp; <font color="#0000FF">function</font> Get_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Model : <font color="#0000FF">not null access</font> Gtk_Transaction_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Path&nbsp; : Gtk_Tree_Path<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">return</font> Gtk_Tree_Iter;<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">function</font>&nbsp;Get_N_Columns&nbsp;(Model&nbsp;:&nbsp;<font color="#0000FF">not 
null access</font>&nbsp;Gtk_Transaction_Store_Record)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> GInt;<br>
&nbsp;&nbsp; <font color="#0000FF">function</font> Get_Path<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Model : <font color="#0000FF">not null access</font> Gtk_Transaction_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Iter&nbsp; : Gtk_Tree_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">return</font> Gtk_Tree_Path;<br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Get_Value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Model&nbsp; : <font color="#0000FF">not null access</font> Gtk_Transaction_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Iter&nbsp;&nbsp; : Gtk_Tree_Iter;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Column : Gint;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Value&nbsp; : <font color="#0000FF">out</font> GValue<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);<br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Finalize (Model : 
<font color="#0000FF">not null access</font> Gtk_Transaction_Store_Record);<br>
&nbsp;&nbsp; <font color="#0000FF">function</font> Has_Child<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Model : <font color="#0000FF">not null access</font> Gtk_Transaction_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Iter&nbsp; : Gtk_Tree_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">return</font> Boolean;<br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Next<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Model : <font color="#0000FF">not null access</font> Gtk_Transaction_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Iter&nbsp; : <font color="#0000FF">in out</font> Gtk_Tree_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);<br>
&nbsp;&nbsp; <font color="#0000FF">function</font> Nth_Child<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Model&nbsp; : <font color="#0000FF">not null access</font> Gtk_Transaction_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Parent : Gtk_Tree_Iter;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
N&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GInt<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">return</font> Gtk_Tree_Iter;<br>
&nbsp;&nbsp; <font color="#0000FF">function</font> N_Children<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Model : <font color="#0000FF">not null access</font> Gtk_Transaction_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Iter&nbsp; : Gtk_Tree_Iter := Null_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">return</font> GInt;<br>
&nbsp;&nbsp; <font color="#0000FF">function</font> Parent<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Model : <font color="#0000FF">not null access</font> Gtk_Transaction_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Child : Gtk_Tree_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">return</font> Gtk_Tree_Iter;<font color="#0000FF"><br>
&nbsp;&nbsp; procedure</font> Previous<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Model : <font color="#0000FF">not null access</font> Gtk_Transaction_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Iter&nbsp; : <font color="#0000FF">in out</font> Gtk_Tree_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);</tt></TD>
  </TR>
</TABLE>

	<p>And finally Transaction_Record is defined. It contains the data fields 
	described above and two pointers to link items of the list.</p>
File <i>gtk.tree_model.custom_store</i><EM>.ads</EM><i> (continued)</i>:<TABLE border="1" cellpadding="15" cellspacing="0" id="table4">
  <TR>
<TD bgcolor="#FFDEBD">
<tt><font color="#008000">--<br>
--&nbsp;Transaction_Record&nbsp;--&nbsp;Describes&nbsp;one&nbsp;row&nbsp;of&nbsp;the&nbsp;store<br>
--</font><br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Transaction_Record
<font color="#0000FF">is record</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Account&nbsp; : Account_No;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
User&nbsp;&nbsp;&nbsp;&nbsp; : Unbounded_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Amount&nbsp;&nbsp; : Currency;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Date&nbsp;&nbsp;&nbsp;&nbsp; : Time;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Previous : Transaction_Record_Ptr;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Next&nbsp;&nbsp;&nbsp;&nbsp; : Transaction_Record_Ptr;<br>
&nbsp;&nbsp; <font color="#0000FF">end record</font>;<br>
<font color="#0000FF">end</font> Gtk.Tree_Model.Custom_Store;</tt></TD>
  </TR>
</TABLE>

<p>The implementation of the package specification:</p>File <i>gtk.tree_model.custom_store</i><EM>.adb</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
<TR>
<TD bgcolor="#C0D8D6"><tt>
  <font color="#0000FF">with</font> Ada.Unchecked_Conversion;<br>
<font color="#0000FF">with</font> Ada.Unchecked_Deallocation;<br>
<font color="#0000FF">with</font> System.Address_To_Access_Conversions;<br>
<br>
<font color="#0000FF">package body </font>Gtk.Tree_Model.Custom_Store
<font color="#0000FF">is</font><br>
<br>
&nbsp;&nbsp; GTK_Type : GType := GType_Invalid;</tt></TD>
  </TR>
</TABLE>

<p>The implementation starts with the definition of the 
	<a href="http://www.gtk.org">GTK+</a> 
	type used for the store object. The type cannot be determined until 
	<a href="http://www.gtk.org">GTK+</a> 
	runs, so it is initialized as invalid and will be resolved later at run-time.</p>File <i>gtk.tree_model.custom_store</i><EM>.adb 
(continued)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>
  &nbsp;&nbsp; <font color="#0000FF">function</font> To_Iter (Node : Transaction_Record_Ptr)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> Gtk_Tree_Iter
<font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">function</font> To_Address
<font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">new</font> Ada.Unchecked_Conversion<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
Transaction_Record_Ptr,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
System.Address<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
&nbsp;&nbsp; <font color="#0000FF">begin<br>
&nbsp;&nbsp;&nbsp;&nbsp; return</font><br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Stamp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =&gt; 
<font color="#800000">1</font>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; User_Data&nbsp; =&gt; To_Address (Node),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; User_Data2 =&gt; System.Null_Address,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; User_Data3 =&gt; System.Null_Address<br>
&nbsp;&nbsp;&nbsp;&nbsp; );<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> To_Iter;<br>
<br>
&nbsp;&nbsp; <font color="#0000FF">function</font> To_Ptr (Node : Gtk_Tree_Iter)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> Transaction_Record_Ptr
<font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; function </font>To_Transaction_Record_Ptr
<font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new</font> Ada.Unchecked_Conversion<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
System.Address,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Transaction_Record_Ptr<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
&nbsp;&nbsp; <font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">if</font> Node = Null_Iter
<font color="#0000FF">then</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">else<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return</font> To_Transaction_Record_Ptr (Node.User_Data);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end if</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> To_Ptr;</tt></TD>
  </TR>
</TABLE>

<p>The first thing we need to consider is an implementation of the iterators. An 
iterator unambiguously identifies a row of the store. In our case rows are 
represented by Transaction_Record accessed via pointers. So it is naturally to 
pack pointers into iterators. In 
	<a href="http://www.gtk.org">GTK+</a> 
	an iterator has four fields. Three of them have address size. We will use 
the first field to store a pointer to Transaction_Record. The function To_Iter 
converts a pointer to the item to an iterator. It simply converts the pointer to 
an address and stores it into the first address field. The backward conversion 
provides the function To_Ptr. Null-iterators are converted to
<font color="#0000FF">null</font>. A more advanced implementation would perform 
some additional sanity checks, but this is out of the scope of this small example.</p>File <i>gtk.tree_model.custom_store</i><EM>.adb 
(continued)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>
  <font color="#0000FF">&nbsp;&nbsp; function</font> Children<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;&nbsp;Model&nbsp;&nbsp;:&nbsp;<font color="#0000FF">not 
null access</font>&nbsp;Gtk_Transaction_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;
Parent : Gtk_Tree_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font> Gtk_Tree_Iter<font color="#0000FF"> is<br>
&nbsp;&nbsp;
begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return </font>Null_Iter;<br>
<font color="#0000FF">&nbsp;&nbsp; end</font> Children;</tt></TD>
  </TR>
</TABLE>

<p>Our store is a pure list, so there is no children and parents, i.e neither 
row can have any child rows.</p>File <i>gtk.tree_model.custom_store</i><EM>.adb 
(continued)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>
  &nbsp;&nbsp; <font color="#0000FF">function</font> Get_Column_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;&nbsp;Model&nbsp;:&nbsp;<font color="#0000FF">not 
null access</font>&nbsp;Gtk_Transaction_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Index : GInt<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">return</font> GType <font color="#0000FF">is<br>
&nbsp;&nbsp;
begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
case </font>Index <font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
when</font> <font color="#800000">0</font> =&gt; <font color="#0000FF">return</font> GType_Int;&nbsp;&nbsp;&nbsp;
<font color="#008000">-- Account_No</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font>
<font color="#800000">1</font> =&gt; <font color="#0000FF">return</font> GType_String; 
<font color="#008000">-- User</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font>
<font color="#800000">2</font> =&gt; <font color="#0000FF">return</font> GType_Double; 
<font color="#008000">-- Amount</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font>
<font color="#800000">3</font> =&gt; <font color="#0000FF">return</font> GType_Int;&nbsp;&nbsp;&nbsp;
<font color="#008000">-- Year</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font>
<font color="#800000">4</font> =&gt; <font color="#0000FF">return</font> GType_Int;&nbsp;&nbsp;&nbsp;
<font color="#008000">-- Month</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font>
<font color="#800000">5</font> =&gt; <font color="#0000FF">return</font> GType_Int;&nbsp;&nbsp;&nbsp;
<font color="#008000">-- Day</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font>
<font color="#800000">6</font> =&gt; <font color="#0000FF">return</font> GType_Int;&nbsp;&nbsp;&nbsp;
<font color="#008000">-- Hour</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font>
<font color="#800000">7</font> =&gt; <font color="#0000FF">return</font> GType_Int;&nbsp;&nbsp;&nbsp;
<font color="#008000">-- Minute</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font>
<font color="#800000">8</font> =&gt; <font color="#0000FF">return</font> GType_Double; 
<font color="#008000">-- Seconds</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when others</font> =&gt; 
<font color="#0000FF">return</font> GType_Invalid;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end case</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Get_Column_Type;</tt></TD>
  </TR>
</TABLE>

<p>The store publishes 8 columns, which 
	<a href="http://www.gtk.org">GTK+</a> 
	types of are reported by Get_Column_Type. The columns 0..2 represent <i>Account 
No.</i>, <i>User</i> name and <i>Amount</i>. The following 5 represent the time 
stamp. In a more advanced application you might want to put more complex types 
into columns, for example by using <a href="#handles_as_values">handles</a>. For 
such types you would probably need to develop a <a href="#custom_cell_renderer">
custom cell renderer</a> as well.</p>
File <i>gtk.tree_model.custom_store</i><EM>.adb 
(continued)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">function</font>&nbsp;Get_Flags&nbsp;(Model&nbsp;:&nbsp;<font color="#0000FF">not 
null access</font>&nbsp;Gtk_Transaction_Store_Record)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> Tree_Model_Flags
<font color="#0000FF">is<br>
&nbsp;&nbsp;
begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return </font>Tree_Model_Iters_Persist + Tree_Model_List_Only;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Get_Flags;</tt></TD>
  </TR>
</TABLE>

<p>The function Get_Flags informs 
	<a href="http://www.gtk.org">GTK+</a> 
	about heuristics it can apply to the store, like that the store is not a 
tree. The value Tree_Model_Iters_Persist indicates that the iterators stay valid 
after changes applied to rows. This is true in out case because iterators are 
just wrapped pointers.</p>
File <i>gtk.tree_model.custom_store</i><EM>.adb 
(continued)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>
&nbsp;&nbsp; <font color="#0000FF">function</font> Get_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Model : <font color="#0000FF">not null access</font> Gtk_Transaction_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Path&nbsp; : Gtk_Tree_Path<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">return</font> Gtk_Tree_Iter<font color="#0000FF"> is<br>
&nbsp;&nbsp;
begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;
if</font> Get_Depth (Path) = <font color="#800000">1</font>
<font color="#0000FF">and</font> Model.First /= <font color="#0000FF">null then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
declare</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Indices : GInt_Array <font color="#0000FF">renames</font> Get_Indices (Path);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
This&nbsp;&nbsp;&nbsp; : Transaction_Record_Ptr := Model.First;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
for </font>Row <font color="#0000FF">in</font> <font color="#800000">0</font>..Indices (Indices'First) - 1 
<font color="#0000FF">loop<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if </font>This.Next = Model.First <font color="#0000FF">then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return</font> Null_Iter;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">end if</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
This := This.Next;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">end loop</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">return</font> To_Iter (This);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end if</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> Null_Iter; <br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Get_Iter;</tt></TD>
  </TR>
</TABLE>

<p>This function converts a tree path to an iterator. In 
	<a href="http://www.gtk.org">GTK+</a> 
	a path is an array of child numbers. All children rows of a row are 
enumerated from 0. So any path is equivalent to some iterator and reverse. In our 
case conversion first checks if the path is exactly one item long. After this 
check the child number is the number of the row. We walk through the list of 
records to that record. Then the pointer to it is converted to an iterator using 
To_Iter function described above. Observe, that this has O(<i>n</i>) complexity. Obviously, for relatively long lists a 
more elaborated implementation would definitely use some indexing schema to 
improve performance.</p>File <i>gtk.tree_model.custom_store</i><EM>.adb 
(continued)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">function</font>&nbsp;Get_N_Columns&nbsp;(Model&nbsp;:&nbsp;<font color="#0000FF">not 
null access</font>&nbsp;Gtk_Transaction_Store_Record)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">return</font> GInt <font color="#0000FF">is<br>
&nbsp;&nbsp;
begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return </font><font color="#800000">9</font>;<br>
&nbsp;&nbsp;
<font color="#0000FF">end</font> Get_N_Columns;<br>
<br>
&nbsp;&nbsp;
<font color="#0000FF">function</font> Get_Path<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Model : <font color="#0000FF">access</font> Gtk_Transaction_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Iter&nbsp; : Gtk_Tree_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">return</font> Gtk_Tree_Path <font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
This : Transaction_Record_Ptr := Model.First;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
That : Transaction_Record_Ptr := To_Ptr (Iter);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
No&nbsp;&nbsp; : GInt := <font color="#800000">0</font>;<br>
&nbsp;&nbsp;
<font color="#0000FF">begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if</font> This =<font color="#0000FF"> null or else </font>That =<font color="#0000FF"> null then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return null</font>;<br>
<font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
end if</font>;<br>
<font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
while </font>This /= That <font color="#0000FF">loop<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if </font>This.Next = Model.First <font color="#0000FF">then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return null</font>;<br>
<font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
end if</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
This := This.Next;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
No&nbsp;&nbsp; := No + <font color="#800000">1</font>;<br>
<font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
end loop</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">declare</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Path : Gtk_Tree_Path := Gtk_New;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Append_Index (Path, No);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">return</font> Path;<br>
<font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
end</font>;<br>
&nbsp;&nbsp;
<font color="#0000FF">end</font> Get_Path;</tt></TD>
  </TR>
</TABLE>

<p>The function Get_N_Columns returns the number of columns. The function 
Get_Path is reverse to Get_Iter described above.</p>File <i>gtk.tree_model.custom_store</i><EM>.adb 
(continued)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>
&nbsp;&nbsp;
<font color="#0000FF">procedure</font> Get_Value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;&nbsp;Model&nbsp;&nbsp;:&nbsp;<font color="#0000FF">not 
null access</font>&nbsp;Gtk_Transaction_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Iter&nbsp;&nbsp; : Gtk_Tree_Iter;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Column : Gint;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Value&nbsp; : <font color="#0000FF">out</font> GValue<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Node&nbsp;&nbsp;&nbsp; : Transaction_Record_Ptr := To_Ptr (Iter);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Year&nbsp;&nbsp;&nbsp; : Year_Number;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Month&nbsp;&nbsp; : Month_Number;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Day&nbsp;&nbsp;&nbsp;&nbsp; : Day_Number;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Seconds : Duration;<br>
&nbsp;&nbsp;
<font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">if</font> Node /= <font color="#0000FF">null</font>
<font color="#0000FF">then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
case </font>Column <font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
when</font> <font color="#800000">0</font> =&gt; <font color="#008000">-- Account_No</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Init (Value, GType_Int);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Set_Int (Value, GInt (Node.Account));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">when</font> <font color="#800000">1</font> =&gt; 
<font color="#008000">-- User</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Init (Value, GType_String);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Set_String (Value, To_String (Node.User));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">when</font> <font color="#800000">2</font> =&gt; 
<font color="#008000">-- Amount</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Init (Value, GType_Double);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Set_Double (Value, GDouble (Node.Amount));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">when</font> <font color="#800000">3</font> =&gt; 
<font color="#008000">-- Time, year</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Split (Node.Date, Year, Month, Day, Seconds);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Init (Value, GType_Int);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Set_Int (Value, GInt (Year));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">when</font> <font color="#800000">4</font> =&gt;<font color="#008000"> -- Time, month</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Split (Node.Date, Year, Month, Day, Seconds);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Init (Value, GType_Int);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Set_Int (Value, GInt (Month));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">when</font> <font color="#800000">5</font> =&gt; 
<font color="#008000">-- Time, day</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Split (Node.Date, Year, Month, Day, Seconds);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Init (Value, GType_Int);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Set_Int (Value, GInt (Day));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">when</font> <font color="#800000">6</font> =&gt; 
<font color="#008000">-- Time, hour</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Split (Node.Date, Year, Month, Day, Seconds);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Init (Value, GType_Int);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Set_Int (Value, GInt (Seconds) / <font color="#800000">3600</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">when</font> <font color="#800000">7</font> =&gt; 
<font color="#008000">-- Time, minute</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Split (Node.Date, Year, Month, Day, Seconds);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Init (Value, GType_Int);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Set_Int (Value, (GInt (Seconds) / <font color="#800000">60</font>) 
<font color="#0000FF">mod</font> <font color="#800000">60</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">when</font> <font color="#800000">8</font> =&gt; 
<font color="#008000">-- Time, seconds</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Split (Node.Date, Year, Month, Day, Seconds);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Init (Value, GType_Double);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Set_Double<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Value,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
GDouble'Remainder (GDouble (Seconds), <font color="#800000">60.0</font>)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">when others</font> =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Init (Value, GType_Invalid);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">end case</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">end if</font>; <br>
&nbsp;&nbsp;
<font color="#0000FF">end</font> Get_Value;</tt></TD>
  </TR>
</TABLE>

<p>For the given row and column Get_Value returns the value of the 
cell. The row is specified by an iterator. The column is by its zero-based 
number. The parameter Value is the result. The pair of 
	<a href="http://www.gtk.org">GTK+</a> 
	procedures Init, Set_<i>type</i> is the way to place a value there. Init 
specifies the 
	<a href="http://www.gtk.org">GTK+</a> 
	type of the value. Set_<i>type</i> stores the value there. The caller is 
responsible to call Unset on Value.</p>File <i>gtk.tree_model.custom_store</i><EM>.adb 
(continued)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Gtk_New (Model : 
<font color="#0000FF">out</font> Gtk_Transaction_Store)<font color="#0000FF"> is<br>
&nbsp;&nbsp;
begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if </font>GTK_Type = GType_Invalid <font color="#0000FF">then</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
GTK_Type := Register (&quot;<font color="#FF0000">GtkTransactionStore</font>&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end if</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Model := <font color="#0000FF">new</font> Gtk_Transaction_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Initialize (Model, GTK_Type);<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Gtk_New;</tt></TD>
  </TR>
</TABLE>

<p>The procedure Gtk_New is the store factory. It creates a new store object. 
First it checks if the 
	<a href="http://www.gtk.org">GTK+</a> 
	type was already registered. If not it registers it under the name <i>
GtkTransactionStore</i>. This name can be later used in the 
	<a href="http://www.gtk.org">GTK+</a> 
	files for instance. Register shall be called once before any use of any 
store object. Initialize shall be called for each store object. Note that it 
takes the 
	<a href="http://www.gtk.org">GTK+</a> 
	type as a paramter.</p>File <i>gtk.tree_model.custom_store</i><EM>.adb 
(continued)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">procedure</font>&nbsp;Finalize&nbsp;(Model&nbsp;:&nbsp;<font color="#0000FF">not 
null access</font>&nbsp;Gtk_Transaction_Store_Record)<font color="#0000FF">&nbsp;is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
procedure </font>Free <font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
new </font>Ada.Unchecked_Deallocation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Transaction_Record,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Transaction_Record_Ptr<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
This : Transaction_Record_Ptr := Model.First;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Next : Transaction_Record_Ptr := This;<br>
&nbsp;<font color="#0000FF">&nbsp;
begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Finalize (Gtk_Abstract_Model_Record'Class (Model.<font color="#0000FF">all</font>)'<font color="#0000FF">Access</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">while</font> This /= 
<font color="#0000FF">null loop</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Next := This.Next;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Free (This);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
This := Next;<br>
&nbsp;&nbsp;&nbsp; <font color="#0000FF">&nbsp;
end loop</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Finalize;</tt></TD>
  </TR>
</TABLE>

<p>Finalize is provided for custom finalization. It is analogous to 
the Ada.Finalization's one. The implementation calls to the parent Finalize and then 
deletes all items of the list.</p>File <i>gtk.tree_model.custom_store</i><EM>.adb 
(continued)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>
&nbsp;&nbsp; <font color="#0000FF">function</font> Has_Child<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp; Model&nbsp;:&nbsp;<font color="#0000FF">not 
null access</font>&nbsp;Gtk_Transaction_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Iter&nbsp; : Gtk_Tree_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">return</font> Boolean <font color="#0000FF">is<br>
&nbsp;&nbsp;
begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return </font>False;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Has_Child;</tt></TD>
  </TR>
</TABLE>

<p>There is no children, it is not a tree.</p>File <i>gtk.tree_model.custom_store</i><EM>.adb 
(continued)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">procedure</font>&nbsp;Insert<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;&nbsp;Model&nbsp;&nbsp;&nbsp;:&nbsp;<font color="#0000FF">not 
null access</font>&nbsp;Gtk_Transaction_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Account : Account_No;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
User&nbsp;&nbsp;&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Amount&nbsp; : Currency;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Date&nbsp;&nbsp;&nbsp; : Time<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Node : Transaction_Record_Ptr :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">new</font> Transaction_Record'<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Account&nbsp; =&gt; Account,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
User&nbsp;&nbsp;&nbsp;&nbsp; =&gt; To_Unbounded_String (User),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Amount&nbsp;&nbsp; =&gt; Amount,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Date&nbsp;&nbsp;&nbsp;&nbsp; =&gt; Date,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Next&nbsp;&nbsp;&nbsp;&nbsp; =&gt; <font color="#0000FF">null</font>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Previous =&gt; <font color="#0000FF">null</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);<br>
&nbsp;<font color="#0000FF">&nbsp;
begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if </font>Model.First = <font color="#0000FF">null then</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Model.First&nbsp;&nbsp; := Node;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Node.Next&nbsp;&nbsp;&nbsp;&nbsp; := Node;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Node.Previous := Node;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">else</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Node.Next&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := Model.First;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Node.Previous&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := Model.First.Previous;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Node.Next.Previous := Node;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Node.Previous.Next := Node;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end if</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Row_Inserted<font color="#008000"> -- Notify about changes made</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Model,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Get_Path (Model, To_Iter (Node)),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
To_Iter (Node)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);<br>
&nbsp;&nbsp; <font color="#0000FF">end </font>Insert;</tt></TD>
  </TR>
</TABLE>

<p>The procedure Insert allocates a new record, initializes its fields according 
to the parameters and appends the record to the list. Then, <i>very importantly</i>, 
it emits a 
	<a href="http://www.gtk.org">GTK+</a> 
	signal that a row was inserted. For this it calls Row_Inserted of 
Gtk.Tree_Model. The parameters are the path and the iterator of the new row. 
Get_Path and To_Iter are used to obtain them.</p>File <i>gtk.tree_model.custom_store</i><EM>.adb 
(continued)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Next<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;&nbsp;Model&nbsp;:&nbsp;<font color="#0000FF">not 
null access</font>&nbsp;Gtk_Transaction_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Iter&nbsp; : <font color="#0000FF">in out</font> Gtk_Tree_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Node : Transaction_Record_Ptr := To_Ptr (Iter);<br>
&nbsp;&nbsp; <font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">if</font> Node = 
<font color="#0000FF">null or else </font>Node.Next = Model.First
<font color="#0000FF">then</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Iter := Null_Iter;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">else</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Iter := To_Iter (Node.Next);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end if</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Next;</tt></TD>
  </TR>
</TABLE>

<p>The procedure Next moves the iterator to the next row.</p>File <i>gtk.tree_model.custom_store</i><EM>.adb 
(continued)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>
&nbsp;&nbsp; <font color="#0000FF">function</font> Nth_Child<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;&nbsp;Model&nbsp;&nbsp;:&nbsp;<font color="#0000FF">not 
null access</font>&nbsp;Gtk_Transaction_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Parent : Gtk_Tree_Iter;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
N&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GInt<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">return</font> Gtk_Tree_Iter <font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
This : Transaction_Record_Ptr := Model.First;<br>
&nbsp; <font color="#0000FF">&nbsp;begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if</font> Parent = Null_Iter <font color="#0000FF">then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
for </font>Index <font color="#0000FF">in</font> <font color="#800000">0</font>..N -
<font color="#800000">1</font> <font color="#0000FF">loop<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if </font>This.Next = Model.First<font color="#0000FF"> then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return </font>Null_Iter;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">end if</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
This := This.Next;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">&nbsp;end loop</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> To_Iter (This);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end if</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> Null_Iter; <br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Nth_Child;</tt></TD>
  </TR>
</TABLE>

<p>The function Nth_Child returns an iterator to the <i>n</i>-th child of a row. 
Note that when Parent is null-iterator the result is the <i>n</i>-th row. This 
is the only case we should take care of. Remember the note of O(<i>n</i>) 
complexity of such operations on doubly-linked lists.</p>File <i>gtk.tree_model.custom_store</i><EM>.adb 
(continued)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>
&nbsp;&nbsp; <font color="#0000FF">function</font> N_Children<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;&nbsp;Model&nbsp;:&nbsp;<font color="#0000FF">not 
null access</font>&nbsp;Gtk_Transaction_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Iter&nbsp; : Gtk_Tree_Iter := Null_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">return</font> GInt <font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
This&nbsp; : Transaction_Record_Ptr := Model.First;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Count : GInt := <font color="#800000">0</font>;<br>
&nbsp; <font color="#0000FF">&nbsp;begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if </font>Iter = Null_Iter <font color="#0000FF">and then</font> This /= 
<font color="#0000FF">null then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
loop</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Count := Count + <font color="#800000">1</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">exit when</font> This.Next = Model.First;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
This := This.Next;<br>
&nbsp;&nbsp;&nbsp; <font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;
end loop</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">&nbsp;end if</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> Count;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> N_Children;</tt></TD>
  </TR>
</TABLE>

<p>This function is analogous to Nth_Child, it counts the children. Again our 
case is when the parameter is null-iterator.</p>File <i>gtk.tree_model.custom_store</i><EM>.adb 
(continued)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>
&nbsp;&nbsp; <font color="#0000FF">function</font> Parent<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Model : <font color="#0000FF">not null access</font> Gtk_Transaction_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Child : Gtk_Tree_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">return</font> Gtk_Tree_Iter<font color="#0000FF"> is<br>
&nbsp;&nbsp;
begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return </font>Null_Iter;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Parent;</tt></TD>
  </TR>
</TABLE>

<p>We have no children and parents, so the implementation of Parent is trivial.</p>

File <i>gtk.tree_model.custom_store</i><EM>.adb 
(continued)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Previous<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;&nbsp;Model&nbsp;:&nbsp;<font color="#0000FF">not 
null access</font>&nbsp;Gtk_Transaction_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Iter&nbsp; : <font color="#0000FF">in out</font> Gtk_Tree_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Node : Transaction_Record_Ptr := To_Ptr (Iter);<br>
&nbsp;&nbsp; <font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">if</font> Node = 
<font color="#0000FF">null or else </font>Node = Model.First
<font color="#0000FF">then</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Iter := Null_Iter;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">else</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Iter := To_Iter (Node.Next);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end if</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Previous;<br>
<br>
<font color="#0000FF">end</font> Gtk.Tree_Model.Custom_Store;</tt>&nbsp;</TD>
  </TR>
</TABLE>

<p>The same subdirectory <i>test_gtkada</i> contains a small test program for this 
store in the file <i>test_custom_store.adb</i>. The program creates a store and 
tree view. Observe, that it adds some records to the store in a quasi-concurrent 
way from 
	<a href="http://www.gtk.org">GTK+</a> 
	timer to illustrate that tree view would properly react on the content 
changes.</p>
<H3>2.2. <a name="2.2"></a>Generic sortable model</H3>
<p>The generic package Gtk.Tree_Model.Generic_Sort provides an interface to
<a href="https://developer.gnome.org/gtk3/stable/GtkTreeSortable.html">GtkTreeSortable</a>. The package is instantiated with a custom tree model 
derived from <a href="#Gtk_Abstract_Model_Record">Gtk_Abstract_Model_Record</a>:
</p>
<blockquote>
<tt><font color="#0000FF">generic<br>
&nbsp;&nbsp; type </font>Tree_Model_Record (&lt;&gt;) <font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new </font>Gtk_Abstract_Model_Record
<font color="#0000FF">with private</font>;<font color="#0000FF"><br>
&nbsp;&nbsp; type </font>Tree_Model<font color="#0000FF"> is access all </font>
Tree_Model_Record'Class;<font color="#0000FF"><br>
package </font>Gtk.Tree_Model.Generic_Sort <font color="#0000FF">is<br>
</font>&nbsp;&nbsp; ...</tt></blockquote>
<p>The generic parameters are a type derived from
<a href="#Gtk_Abstract_Model_Record">Gtk_Abstract_Model_Record</a> and an access 
type used with it. The package defines a new model based on one of
<a href="#Gtk_Abstract_Model_Record">Gtk_Abstract_Model_Record</a>, which has 
the sorted data of the underlying model. The type of the new model is:</p>
		<blockquote>
			<p><tt><font color="#0000FF">type </font>Gtk_Tree_Model_Sort_Record
			<font color="#0000FF">is<br>
&nbsp;&nbsp; new </font>Gtk_Tree_Model_Record<font color="#0000FF"> with private</font>;<br>
			<font color="#0000FF">type</font> Gtk_Tree_Model_Sort<font color="#0000FF"> 
			is<br>
&nbsp;&nbsp; access all </font>Gtk_Tree_Model_Sort_Record'Class;</tt></p>
		</blockquote>
<p>The type Gtk_Tree_Model_Sort_Record is normally used as a base type for a 
derived user type which overrides the function Compare, which is used to when 
the widget sorts its contents:</p>
		<blockquote>
			<p><tt><font color="#0000FF">function </font>Compare<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Store</b> :
			<font color="#0000FF">not null access</font> Gtk_Tree_Model_Sort_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Left</b>&nbsp; 
			: Gtk_Tree_Iter;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Right</b> 
			: Gtk_Tree_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
			return</font> Gtk.Missed.Row_Order;</tt></p>
		</blockquote>
		<p>This function is used for sorting if Set_Sort_Func was called for the 
		current sort column or as a default. <b>Left</b> and <b>Right</b> are 
		the iterators in the unsorted model. The current sort column can be 
		queried using Get_Sort_Column_ID. The unsorted model can be obtained 
		using Get_Model. Note that the sort order as returned by 
		Get_Sort_Column_ID should not influence the result of this function. The 
		caller automatically translates the result into descending order if 
		necessary. The type <a href="#Gtk.Missed.Row_Order">Row_Order</a> is defined in Gtk.Missed as follows:</p>
		<blockquote>
			<p><tt><font color="#0000FF">type</font> Row_Order
			<font color="#0000FF">is</font> (Before, Equal, After);</tt></p>
		</blockquote>
		<p>The procedure Set_Sort_Func is used to activate Compare for desired 
		columns:</p>
		<blockquote>
			<p><tt><font color="#0000FF">procedure</font> Set_Sort_Func<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Store</b>&nbsp; 
			: <font color="#0000FF">not null access</font> 
			Gtk_Tree_Model_Sort_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
			Column</b> : GInt<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
			procedure</font> Set_Sort_Func<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Store</b> :
			<font color="#0000FF">not null access</font> Gtk_Tree_Model_Sort_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
		</blockquote>
		<p>The second variant activates Compare for default sorting. Default 
		sorting in GTK+ refers to an unsorted model.</p>
		<h3>2.3. <a name="2.3"></a>Custom cell renderer</h3>
		<p><a name="custom_cell_renderer"></a>This package Gtk.Cell_Renderer.Abstract_Renderer provides an abstract 
		base type Gtk_Abstract_Renderer_Record_for <a href="http://www.gtk.org">GTK+</a> tree view column renderers. An object of this type functions as
		<a href="https://developer.gnome.org/gtk3/stable/GtkCellRenderer.html">GtkCellRenderer</a>. The type is declared as:</p>
		<blockquote>
			<p><tt><font color="#0000FF">
			<a name="Gtk.Cell_Renderer.Gtk_Abstract_Renderer_Record"></a>type</font> 
			Gtk_Abstract_Renderer_Record <font color="#0000FF">is<br>
&nbsp;&nbsp; abstract new </font>Gtk_Cell_Renderer_Record<font color="#0000FF"> 
			with private</font>;</tt></p>
		</blockquote>
		<p>A derived type shall override the following primitive operations:</p>
		<blockquote>
			<p><tt><font color="#0000FF">function</font> Get_Aligned_Area<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Cell</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
			: <font color="#0000FF">not null access</font> 
			Gtk_Abstract_Renderer_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp; 
			: <font color="#0000FF">not null access</font> 
			Gtk_Widget_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Flags</b>&nbsp;&nbsp;&nbsp;&nbsp; 
			: Gtk_Cell_Renderer_State;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Cell_Area</b> 
			: Gdk_Rectangle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
			return</font> Gdk_Rectangle <font color="#0000FF">is abstract</font>;</tt></p>
		</blockquote>
		<p>This function returns the are inside Cell_Area that would be used to render 
		the content.</p>
		<blockquote>
			<p><tt><font color="#0000FF">function</font> Get_Size<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Cell</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
			: <font color="#0000FF">not null access</font> Gtk_Abstract_Renderer_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp; 
			: <font color="#0000FF">not null access</font> 
			Gtk.Widget.Gtk_Widget_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Cell_Area</b> 
			: Gdk_Rectangle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
			return</font> Gdk_Rectangle <font color="#0000FF">is abstract</font>;<br>
			<font color="#0000FF">
			<a name="Gtk.Cell_Renderer.Abstract_Renderer.Get_Size"></a>function</font> Get_Size<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Cell</b>&nbsp;&nbsp; 
			: <font color="#0000FF">not null access</font> Gtk_Abstract_Renderer_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Widget</b> 
			: <font color="#0000FF">not null access</font> 
			Gtk.Widget.Gtk_Widget_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
			return</font> Gdk_Rectangle <font color="#0000FF">is abstract</font>;</tt></p>
		</blockquote>
		<p>These functions return the desired area of the renderer in the form 
		of a rectangle.</p>
		<blockquote>
			<p><tt><font color="#0000FF">procedure</font> Render<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Cell</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
			: <font color="#0000FF">not null access</font> Gtk_Abstract_Renderer_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
			Context</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 
			Cairo_Context;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
			Widget</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :
			<font color="#0000FF">not null access</font> Gtk_Widget_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
			Background_Area</b> : Gdk_Rectangle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
			Cell_Area</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Rectangle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
			Flags</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
			: Gtk_Cell_Renderer_State<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
			<font color="#0000FF">is abstract</font>;</tt></p>
		</blockquote>
		<p>This procedure is called to perform rendering. <b>Context</b> is the 
		drawing context. <b>Background_Area</b> 
		is the rectangle around the cell which includes the border. <b>Cell_Area</b> 
		is the area where things should be drawn into.</p>
		<p>Other operations include:</p>
		<blockquote>
			<p><tt><font color="#0000FF">overriding<br>
			function</font> Activate<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Cell</b>&nbsp;&nbsp; 
			: <font color="#0000FF">not null access</font> Gtk_Abstract_Renderer_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Event</b>&nbsp; 
			: Gdk_Event;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Widget</b> 
			: <font color="#0000FF">not null access</font> Gtk_Widget_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Path</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
			: UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
			Background_Area</b> : Gdk_Rectangle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Cell_Area</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
			: Gdk_Rectangle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Flags</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
			: Gtk_Cell_Renderer_State<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
			return</font> Boolean;</tt></p>
		</blockquote>
		<p>This function can be overridden to make the renderer <i>activatable</i>. Such a renderer may hold a toggle button in it. 
		The default implementation returns <i><font color="#800000">false</font></i>.
		<b>Path</b> specifies the activation event location, e.g. the tree path 
		to the model.</p>
		<blockquote>
			<p><tt><font color="#0000FF">
			<a name="Gtk.Cell_Renderer.Commit">
			</a>procedure</font> Commit (<b>Cell</b> :
			<font color="#0000FF">not null access</font> Gtk_Abstract_Renderer_Record);</tt></p>
		</blockquote>
		<p>This procedure is used to notify the tree view about the changes 
			made (this is used for <i>editable</i> renderers). From here the 
		render changes the model.</p>
		<blockquote>
			<p><tt><font color="#0000FF">procedure</font> Finalize (<b>Cell</b> 
			: <font color="#0000FF">not null access</font> Gtk_Abstract_Renderer_Record);</tt></p>
		</blockquote>
		<p>This procedure can be overridden to provide an Ada-style 
		finalization. When overridden, it must call the default implementation 
		from the body.</p>
		<blockquote>
			<p><tt><font color="#0000FF"><a name="Gtk.Cell_Renderer.Get_Mode">
			</a>function</font> Get_Mode (<b>Cell</b> :
			<font color="#0000FF">not null access</font> Gtk_Abstract_Renderer_Record)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Gtk_Cell_Renderer_Mode;</tt></p>
		</blockquote>
		<p>This function returns the renderer mode, such as <i>inert</i>,
			<i>editable</i> or <i>activatable</i>.</p>
		<blockquote>
			<p><tt><font color="#0000FF">function</font> Get_Path (<b>Cell</b> :
			<font color="#0000FF">not null access</font> Gtk_Abstract_Renderer_Record)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> UTF8_String;</tt></p>
		</blockquote>
		<p>This function returns returns the path of the cell being edited.</p>
		<blockquote>
			<p><tt><font color="#0000FF">overriding<br>
			procedure </font>Get_Preferred_Height<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Cell</b>&nbsp;&nbsp; 
			: <font color="#0000FF">not null access</font> 
			Gtk_Abstract_Renderer_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
			Widget</b> : <font color="#0000FF">not null access</font> 
			Gtk_Widget_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
			Minimum_Height</b> : <font color="#0000FF">out</font> GInt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
			Natural_Height</b> : <font color="#0000FF">out</font> GInt<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
		</blockquote>
		<p>This procedure retrieves the renderer's height if rendered to <b>
		Widget</b>. The default implementation re-dispatches to
		<a href="#Gtk.Cell_Renderer.Abstract_Renderer.Get_Size">Get_Size</a>.</p>
		<blockquote>
			<p><tt><font color="#0000FF">overriding<br>
			procedure </font>Get_Preferred_Height_For_Width<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Cell</b>&nbsp;&nbsp; 
			: <font color="#0000FF">not null access</font> 
			Gtk_Abstract_Renderer_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
			Widget</b> : <font color="#0000FF">not null access</font> 
			Gtk_Widget_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
			Width</b>&nbsp; : GInt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
			Minimum_Height</b> : <font color="#0000FF">out</font> GInt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
			Natural_Height</b> : <font color="#0000FF">out</font> GInt<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
		</blockquote>
		<p>This procedure retrieves the renderer's width for given <b>Width</b> 
		if rendered to <b>Widget</b>. The default implementation re-dispatches 
		to <a href="#Gtk.Cell_Renderer.Abstract_Renderer.Get_Size">Get_Size</a>.</p>
		<blockquote>
			<p><tt><font color="#0000FF">overriding<br>
			procedure </font>Get_Preferred_Get_Width<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Cell</b>&nbsp;&nbsp; 
			: <font color="#0000FF">not null access</font> 
			Gtk_Abstract_Renderer_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
			Widget</b> : <font color="#0000FF">not null access</font> 
			Gtk_Widget_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
			Minimum_Height</b> : <font color="#0000FF">out</font> GInt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
			Natural_Height</b> : <font color="#0000FF">out</font> GInt<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
		</blockquote>
		<p>This procedure retrieves the renderer's width if rendered to <b>
		Widget</b>. The default implementation re-dispatches to
		<a href="#Gtk.Cell_Renderer.Abstract_Renderer.Get_Size">Get_Size</a>.</p>
		<blockquote>
			<p><tt><font color="#0000FF">overriding<br>
			procedure </font>Get_Preferred_Width_For_Height<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Cell</b>&nbsp;&nbsp; 
			: <font color="#0000FF">not null access</font> 
			Gtk_Abstract_Renderer_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
			Widget</b> : <font color="#0000FF">not null access</font> 
			Gtk_Widget_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
			Height</b> : GInt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
			Minimum_Width</b> : <font color="#0000FF">out</font> GInt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
			Natural_</b>Width : <font color="#0000FF">out</font> GInt<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
		</blockquote>
		<p>This procedure retrieves the renderer's width for given <b>Height</b> 
		if rendered to <b>Widget</b>. The default implementation re-dispatches 
		to <a href="#Gtk.Cell_Renderer.Abstract_Renderer.Get_Size">Get_Size</a>.</p>
		<blockquote>
			<p><tt><font color="#0000FF">procedure</font> Get_Property<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Cell</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
			: <font color="#0000FF">not null access</font> Gtk_Abstract_Renderer_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
			Param_ID</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Property_ID;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
			Value</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :
			<font color="#0000FF">out</font> GValue;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
			Property_Spec</b> : Param_Spec<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
		</blockquote>
		<p>This procedure returns the value of a <a href="http://www.gtk.org">GTK+</a> property the renderer 
			understands. The properties are the values the renderer can show. 
			Each property is specified as a text string which then appears in
			<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.cell_layout.html#L168C14">Add_Attribute</a>. 
		The procedure shall initialize <b>Value</b>. It is the caller's 
		responsibility to unset it.</p>
		<blockquote>
			<p><tt><font color="#0000FF">overriding<br>
			function </font>Get_Request_Mode<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Cell</b> :
			<font color="#0000FF">not null access</font> 
			Gtk_Abstract_Renderer_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
			return</font> Gtk_Size_Request_Mode;</tt></p>
		</blockquote>
		<p>This function returns preferred method of estimation of the area 
		needed to renderer content. The default implementation returns 
		Constant_Size.</p>
		<blockquote>
			<p><tt><font color="#0000FF">function </font>Get_X_Align<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Cell</b> :
			<font color="#0000FF">not null access</font> 
			Gtk_Abstract_Renderer_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
			return</font> GFloat;<font color="#0000FF"><br>
			function </font>Get_X_Pad<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Cell</b> :
			<font color="#0000FF">not null access</font> 
			Gtk_Abstract_Renderer_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
			return</font> GUInt;<font color="#0000FF"><br>
			function</font> Get_Y_Align<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Cell</b> :
			<font color="#0000FF">not null access</font> 
			Gtk_Abstract_Renderer_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
			return</font> GFloat;<font color="#0000FF"><br>
			function</font> Get_Y_Pad<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Cell</b> :
			<font color="#0000FF">not null access</font> 
			Gtk_Abstract_Renderer_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
			return</font> GUInt;</tt></p>
		</blockquote>
		<p>These functions return some widget properties.</p>
		<blockquote>
			<p><tt><font color="#0000FF"><a name="Gtk.Cell_Renderer.Initialize">
			</a>procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ( <b>&nbsp;Cell</b>&nbsp;&nbsp;&nbsp; 
			: <font color="#0000FF">not null access</font> 
			Gtk_Abstract_Renderer_Record'Class;<br>
			<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
			Type_Of</b> : GType<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
		</blockquote>
		<p>This procedure has to be called by any derived type upon object 
		construction. Normally it is the first call of its 
		<a href="#Gtk.Cell_Renderer.Initialize">Initialize</a>, which in 
		turn is called from a Gtk_New. The parameter <b>Type_Of</b> must be a 
		value returned by <a href="#Gtk.Cell_Renderer.Register">Register</a> called with the name assigned to the
		<a href="http://www.gtk.org">GTK+</a> type of the derived type. Note 
		that <a href="#Gtk.Cell_Renderer.Register">Register</a> shall be called only once. So its result must be stored 
		somewhere in the package that derives the type.</p>
		<blockquote>
			<p><tt><font color="#0000FF">type</font> Commit_Callback
			<font color="#0000FF">is access procedure<br>
&nbsp;&nbsp;&nbsp;&nbsp; </font>(<b>&nbsp; Cell</b> : <font color="#0000FF">not 
			null access</font> 
			Gtk_Abstract_Renderer_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp; );<br>
			<br>
			<font color="#0000FF">procedure</font> On_Commit<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Cell</b>&nbsp;&nbsp;&nbsp; 
			: <font color="#0000FF">not null access</font> 
			Gtk_Abstract_Renderer_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
			Handler</b> : <font color="#0000FF">not null </font> 
			Commit_Callback;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
			After</b>&nbsp;&nbsp; : Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
		</blockquote>
		<p>This procedure can be used to attach a handler to the <i>commit</i> 
		signal.</p>
		<blockquote>
			<p><tt><font color="#0000FF">
			<a name="Gtk.Cell_Renderer.Register"></a>function</font> 
			Register<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Name</b> : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Init</b> : 
			<font color="#0000FF">not null </font> 
			C_Class_Init := Base_Class_Init'Access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
			return</font> GType;</tt></p>
		</blockquote>
		<p>This procedure is used to register the 
			<a href="http://www.gtk.org">GTK+</a> type of the renderer. The following code snippets illustrate use of Register: In the package 
		specification:</p>
		<blockquote>
<p><tt><font color="#0000FF">type </font>My_Renderer_Record<font color="#0000FF"> 
is new </font>Gtk_Abstract_Renderer_Record<font color="#0000FF"> with private</font>;<font color="#0000FF"><br>
type </font>My_Renderer<font color="#0000FF"> is access all </font>
My_Renderer_Record'Class;<font color="#0000FF"><br>
<br>
function </font>Get_Type<font color="#0000FF"> return</font> Gtk_Type;<font color="#0000FF"><br>
function</font> Gtk_New (Cell : <font color="#0000FF">out</font> My_Renderer);<br>
<font color="#0000FF">overriding<br>
procedure </font>Initialize (Cell : <font color="#0000FF">
not null
access </font>My_Renderer_Record'Class);<br>
. . .<font color="#008000"> <i>-- Overriding primitive operations</i></font></tt></p>
</blockquote>
		<p>In the package body:</p>
		<blockquote>
<p><tt>My_Renderer_Type : GType := GType_Invalid;<font color="#0000FF"><br>
<br>
function </font>Get_Type<font color="#0000FF"> return </font>Gtk_Type<font color="#0000FF"> 
is<br>
begin<br>
&nbsp; if </font>My_Renderer_Type = GType_Invalid <font color="#0000FF">then<br>
&nbsp;&nbsp;&nbsp;&nbsp; </font>My_Renderer_Type := Register (&quot;<font color="#FF0000">MyRenderer</font>&quot;, 
My_Class_Initialize'<font color="#0000FF">Access</font>);<br>
<font color="#0000FF">&nbsp; end if</font>;<font color="#0000FF"><br>
&nbsp; return</font> My_Renderer_Type;<font color="#008000"> -- Registering the 
GTK+ type</font><br>
<font color="#0000FF">end</font> Get_Type;<font color="#0000FF"><br>
<br>
procedure </font>Initialize (Cell : <font color="#0000FF">not null access </font>
My_Renderer_Record'Class)<font color="#0000FF"> is<br>
begin<br>
</font>&nbsp;&nbsp; Initialize (Cell, Get_Type);<br>
&nbsp;&nbsp; . . .<font color="#008000"> <i>-- Custom initialization</i></font><br>
<font color="#0000FF">end </font>Initialize;</tt></p>
</blockquote>
		<p>Usually <a href="#Gtk.Cell_Renderer.Register">Register</a> specifies a user-provided procedure to be called 
		upon initialization of the <a href="http://www.gtk.org">GTK+</a> class of the renderer. It is necessary 
		to declare <a href="http://www.gtk.org">GTK+</a> properties of the renderer. The procedure has the 
		following profile:</p>
		<blockquote>
<p><tt><font color="#0000FF">type</font> C_Class_Init <font color="#0000FF">is 
access procedure </font>(<b>Class</b> : GObject_Class);<br>
<font color="#0000FF">pragma</font> Convention (C, C_Class_Init);</tt></p>
</blockquote>
		<p>The parameter <b>Class</b> is the class to initialize. When a 
		user-defined procedure is provided, it shall call to Base_Class_Init 
		from its body, before it begins to declare properties of the renderer.</p>
		<blockquote>
			<p><tt><font color="#0000FF">procedure</font> Set_Mode<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Cell</b> :
			<font color="#0000FF">not null access</font> Gtk_Abstract_Renderer_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Mode</b> 
			: Gtk_Cell_Renderer_Mode<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
		</blockquote>
		<p>This procedure sets the renderer's mode property. The renderer can be 
		inert, activatable or editable.</p>
		<blockquote>
			<p><tt><font color="#0000FF">procedure</font> Set_Property<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Cell</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
			: <font color="#0000FF">not null access</font> Gtk_Abstract_Renderer_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
			Param_ID</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Property_ID;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
			Value</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GValue;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
			Property_Spec</b> : Param_Spec<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
		</blockquote>
		<p>This procedure sets the value of a <a href="http://www.gtk.org">GTK+</a> property. 
		The default implementation calls the parent's version.</p>
		<blockquote>
			<p><tt><font color="#0000FF">
			<a name="Gtk.Cell_Renderer.Start_Editing"></a>function</font> 
			Start_Editing<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Cell</b>&nbsp;&nbsp; 
			: <font color="#0000FF">not null access</font> Gtk_Abstract_Renderer_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
			Event</b>&nbsp; : Gdk_Event;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
			Widget</b> : <font color="#0000FF">not null access</font>  
			Gtk_Widget_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Path</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
			: UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
			Background_Area</b> : Gdk_Rectangle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
			Cell_Area</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Rectangle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
			Flags</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
			: Gtk_Cell_Renderer_State<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
			<font color="#0000FF">return</font> Gtk_Widget;</tt></p>
		</blockquote>
		<p>This procedure is called for editable cells upon start editing. The 
		implementation returns a widget responsible for editing or
		<font color="#0000FF">null</font>. The widget returned should implement 
		the Gtk_Cell_Editable interface. Otherwise, the behaviour of the 
		renderer will be as if <a href="#Gtk.Cell_Renderer.Start_Editing">
		Start_Editing</a> would return <font color="#0000FF">null</font>. The 
		caller is responsible to Ref the result it gets and to Unref where 
		appropriate. The default implementation returns <font color="#0000FF">
		null</font>. A typical implementation would create a Gtk_Cell_Editable 
		widget, like Gtk_Entry, initialize it with the current renderer's value, 
		connect to the <i>editing_done</i> and <i>focus_out_event</i> signals of the widget 
		and return the widget as the result.</p>
		<blockquote>
			<p><tt><font color="#0000FF">
			<a name="Gtk.Cell_Renderer.Stop_Editing"></a>overriding<br>
			procedure</font> 
			Stop_Editing<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Cell</b>&nbsp;&nbsp;&nbsp; &nbsp; 
			: <font color="#0000FF">not null access</font> Gtk_Abstract_Renderer_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
			Cancelled</b> : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
		</blockquote>
		<p>This procedure ends editing.</p>
		<p>The widget declares <i>commit</i> signal, which is emitted by a call 
		to the procedure <a href="#Gtk.Cell_Renderer.Commit">Commit</a>. This signal a tree view widget or its model
		would like to connect to, when an editable renderer is used in the 
		widget. The handler of the signal would set the modified value into the tree model.</p>
<h3>2.4. <a name="2.4"></a>Editable renderers</h3>
		<p>The protocol of an editable <a href="http://www.gtk.org">GTK+</a> 
		cell render is as follows. When the renderer's mode is 
		Cell_Renderer_Editable (see <a href="#Gtk.Cell_Renderer.Get_Mode">
		Get_Mode</a>) then:</p>
<ol>
	<li>Upon editing activation the cell renderer receives a
	<a href="https://developer.gnome.org/gtk3/stable/GtkCellRenderer.html#gtk-cell-renderer-start-editing">
	start editing notification</a>. This is translated into a call to 
	the <a href="#Gtk.Cell_Renderer.Start_Editing">Start_Editing</a> primitive operation;</li>
	<li>If <a href="#Gtk.Cell_Renderer.Start_Editing">Start_Editing</a> rejects editing attempt, it returns 
	<font color="#0000FF">null</font>. Otherwise 
	it creates a widget with
	<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/srcs/gtk-cell_editable.ads.html#L92">Gtk_Cell_Editable</a> interface. Usually it is
	<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/srcs/gtk-gentry.ads.html#L122">Gtk_Entry</a>. Normally the returned widget should be initialized with 
	the current cell value. The implementation might also wish to connect to the
	<i>editing_done</i> and <i>focus_out_event</i> signals of the widget;</li>
	<li>Upon <i>focus_out_event</i> the handler of calls 
	<a href="#Gtk.Cell_Renderer.Stop_Editing">Stop_Editing</a> with <b>Canceled</b>
	set to <i><font color="#800000">true</font></i>;</li>
	<li>Upon <i>editing_done</i> the handler of takes the edited value from the 
	widget. If it decides to dismiss the value, it calls to 
	<a href="#Gtk.Cell_Renderer.Stop_Editing">Stop_Editing</a> with <b>Canceled</b> set to 
	<i><font color="#800000">true</font></i>. If it accepts the value, it calls 
	<a href="#Gtk.Cell_Renderer.Stop_Editing">Stop_Editing</a> with <b>Canceled</b> set to 
	<i><font color="#800000">false</font></i> followed by a call to Commit, 
	which notifies about the changes made. Commit emits the signal <i>commit</i>;</li>
	<li>The renderer does not touch the tree model. It is the responsibility the
	<i>commit</i> handler. Within the handler Get_Path can be called to 
	determine the string representation of the row, of which cell has been edited 
	(see
	<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.tree_model.html#L379C13">Get_Iter_From_String</a>). Note that due to limitations of <a href="http://www.gtk.org">GTK+</a>, 
	there is no obvious way to determine the column of the cell. It should become known to the handler in some
	other way. The handler sets the value into the tree model. This ends 
	editing.</li>
</ol>
<h3>2.5. <a name="2.5"></a>Fixed-point renderer</h3>
<p>The package Gtk.Cell_Renderer_Fixed provides a simple, yet, usable example a cell 
renderer. It defines a fixed-point numeric renderer. The numbers are 
represented in the form xxxx.yyyy using facilities of the package 
Ada.Text_IO.Float_IO. The renderer aligns all numbers along the positions of 
their decimal points. The renderer is editable. The package defines the rendrerer's type:</p>
		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Cell_Renderer_Fixed"></a>type </font>
Gtk_Cell_Renderer_Fixed_Record<font color="#0000FF"> is<br>
&nbsp;&nbsp; new </font>Gtk.Cell_Renderer.Abstract_Renderer.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Gtk_Abstract_Renderer_Record
<font color="#0000FF">with private</font>;<font color="#0000FF"><br>
type </font>Gtk_Cell_Renderer_Fixed<font color="#0000FF"> is<br>
&nbsp;&nbsp; access all</font> Gtk_Cell_Renderer_Fixed_Record'Class;</tt></p>
</blockquote>
		<p>and the operations on it:</p>
		<blockquote>
<p><tt><font color="#0000FF">function </font>Get_Type<font color="#0000FF"> 
return</font> Gtk_Type;</tt></p>
</blockquote>
		<p>This function returns the <a href="http://www.gtk.org">GTK+</a> type 
		of the fixed-point renderers.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure </font>Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Cell</b>&nbsp; 
: <font color="#0000FF">out</font> Gtk_Cell_Renderer_Fixed;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
After</b> : Natural := <font color="#800000">0</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
		<p>This procedure creates a new renderer. The parameter <b>After</b> 
		determines the number of decimal places shown after the point.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure </font>Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Cell</b>&nbsp; 
: <font color="#0000FF">access</font> Gtk_Cell_Renderer_Fixed_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
After</b> : Natural<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
		<p>This procedure shall be called from any type derived from
		<a href="#Gtk.Cell_Renderer_Fixed">Cell_Renderer_Fixed</a> upon 
		initialization.</p>
<p>The renderer provides the following properties:</p>
<ul>
	<li><i>value</i> is the rendered value. The type of the property is GDouble.</li>
	<li><i>after</i> is the number of digits shown after the decimal point. The 
	type of the property is GUint.</li>
</ul>
<h4>2.4.1. Annotated source code of the renderer</h4>
<p>The package specification file:</p>File <EM>gtk.cell_renderer_fixed.ads</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#FFDEBD"><tt><font color="#0000FF">with</font> Cairo;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">
use</font> Cairo;<font color="#0000FF"><br>
with</font> Gdk.Event;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">
use</font> Gdk.Event;<font color="#0000FF"><br>
with</font> Gdk.Rectangle;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Gdk.Rectangle;<br>
<font color="#0000FF">with</font> GLib.Properties.Creation;&nbsp;
<font color="#0000FF">use</font> GLib.Properties.Creation;<br>
<font color="#0000FF">with</font> GLib.Values;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> GLib.Values;<br>
<font color="#0000FF">with</font> Gtk.Cell_Renderer;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Gtk.Cell_Renderer;<br>
<font color="#0000FF">with</font> Gtk.GEntry;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Gtk.GEntry;<br>
<font color="#0000FF">with</font> Gtk.Handlers;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Gtk.Handlers;<br>
<font color="#0000FF">with</font> Gtk.Widget; <font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
use</font> Gtk.Widget;<br>
<font color="#0000FF">with</font> Pango.Layout; <font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
use</font> Pango.Layout;<br>
<br>
<font color="#0000FF">with</font> Gtk.Cell_Renderer.Abstract_Renderer;<br>
<font color="#0000FF">with</font> Gdk.Event;<br>
<br>
<font color="#0000FF">package</font> Gtk.Cell_Renderer_Fixed
<font color="#0000FF">is</font><br>
<font color="#0000FF">&nbsp;&nbsp;
pragma</font> Elaborate_Body (Gtk.Cell_Renderer_Fixed);<br>
<font color="#008000">--<br>
-- Gtk_Cell_Renderer_Fixed_Record -- The renderer type<br>
--<br>
-- Customary,&nbsp; we need to declare&nbsp; a representation record&nbsp; type&nbsp; and an<br>
--&nbsp;interface&nbsp;access&nbsp;type&nbsp;for&nbsp;dealing&nbsp;with&nbsp;renderer's&nbsp;objects.&nbsp;The record<br>
-- type is never used directly, though all operations are defined in its<br>
-- terms. <br>
--</font><br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Gtk_Cell_Renderer_Fixed_Record
<font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
new </font>Gtk.Cell_Renderer.Abstract_Renderer.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Gtk_Abstract_Renderer_Record <font color="#0000FF">with private</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Gtk_Cell_Renderer_Fixed
<font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
access all </font>Gtk_Cell_Renderer_Fixed_Record'Class;</tt></TD>
  </TR>
</TABLE>

<p>The type Gtk_Cell_Renderer_Fixed_Record is derived from the abstract cell 
renderer type <a href="#Gtk.Cell_Renderer.Gtk_Abstract_Renderer_Record">
Gtk_Abstract_Cell_Renderer_Record</a>. The
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/">GtkAda</a> convention is that the 
names of implementation types ends with the suffix <i>_Record</i>. The public 
type to use is
		<a href="#Gtk.Cell_Renderer_Fixed">Cell_Renderer_Fixed</a>, which is an 
access type. <a href="http://www.gtk.org">GTK+</a> uses a reference counting to 
collect objects like <a href="#Gtk.Cell_Renderer.Gtk_Abstract_Renderer_Record">
Gtk_Abstract_Cell_Renderer_Record</a>, more or less transparently to the user.</p>File <EM>gtk.cell_renderer_fixed.ads (continued)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#FFDEBD"><tt><font color="#008000">--<br>
-- Finalize -- Overrides Gtk.Cell_Renderer.Abstract_Renderer...<br>
--</font><br>
<font color="#0000FF">&nbsp;&nbsp;&nbsp;overriding<br>
&nbsp;&nbsp; procedure</font>&nbsp;Finalize&nbsp;(Cell&nbsp;:&nbsp;<font color="#0000FF">not 
null access</font>&nbsp;Gtk_Cell_Renderer_Fixed_Record);</tt></TD>
  </TR>
</TABLE>

<p>The procedure Finalize of the parent type is overridden to have an ability to 
clean-up some internal data upon object finalization.</p>File <EM>gtk.cell_renderer_fixed.ads (continued)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#FFDEBD"><tt><font color="#008000">--<br>
-- Get_Aligned_Area -- Overrides Gtk.Cell_Renderer.Abstract_Renderer...<br>
--</font><br>
<font color="#0000FF">&nbsp;&nbsp;&nbsp;overriding<br>
&nbsp;&nbsp; function</font> Get_Aligned_Area<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Cell&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Cell_Renderer_Fixed_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Widget : <font color="#0000FF">not null access</font> Gtk_Widget_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Flags&nbsp; : Gtk_Cell_Renderer_State;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Cell_Area : Gdk_Rectangle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">return</font> Gdk_Rectangle;</tt></TD>
  </TR>
</TABLE>

<p>This function determines the area of the widget which will be used by the 
renderer.</p>File <EM>gtk.cell_renderer_fixed.ads 
(continued)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#FFDEBD"><tt><font color="#008000">--<br>
-- Get_Property -- Overrides Gtk.Cell_Renderer.Abstract_Renderer...<br>
--</font><br>
&nbsp;&nbsp; 
<font color="#0000FF">overriding<br>
&nbsp;&nbsp; procedure</font> Get_Property<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;&nbsp;Cell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;<font color="#0000FF">not 
null access</font>&nbsp;Gtk_Cell_Renderer_Fixed_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Param_ID : Property_ID;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Value&nbsp;&nbsp;&nbsp; : <font color="#0000FF">out</font> GValue;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Property_Spec : Param_Spec<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);</tt></TD>
  </TR>
</TABLE>

<p>Get_Property needs to be overridden to provide interface to the renderer's 
properties. The properties is the way <a href="http://www.gtk.org">GTK+</a> 
communicates with the renderer when it renders a cell. It extracts the cell 
value and sets the corresponding property of the renderer. Then it ask the 
renderer about the size required to show the value or ask it to render the 
value.</p>File <EM>gtk.cell_renderer_fixed.ads (continued)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#FFDEBD"><tt><font color="#008000">--<br>
-- Get_Size -- Overrides Gtk.Cell_Renderer.Abstract_Renderer...<br>
--</font><br>
&nbsp;&nbsp; 
<font color="#0000FF">overriding<br>
&nbsp;&nbsp; function</font> Get_Size<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Cell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">not null access</font> Gtk_Cell_Renderer_Fixed_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Widget&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;<font color="#0000FF">not null access</font>&nbsp;Gtk.Widget.Gtk_Widget_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Cell_Area : Gdk_Rectangle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">return</font> Gdk_Rectangle;<br>
&nbsp;&nbsp; 
<font color="#0000FF">overriding<br>
&nbsp;&nbsp; function</font> Get_Size<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Cell&nbsp;&nbsp; : <font color="#0000FF">not null access</font> Gtk_Cell_Renderer_Fixed_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Widget : <font color="#0000FF">not null access</font> Gtk.Widget.Gtk_Widget_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">return</font> Gdk_Rectangle;<br>
<font color="#008000">--<br>
-- Get_Type -- Get the type of cell renderer<br>
--<br>
-- Returns :<br>
--<br>
-- The type of<br>
--</font><br>
&nbsp;&nbsp; <font color="#0000FF">function</font> Get_Type
<font color="#0000FF">return</font> Gtk_Type;</tt></TD>
  </TR>
</TABLE>

<p>The procedures Get_Size are called to get the screen size required to render 
the currently set property of the renderer. The function Get_Type returns the <a href="http://www.gtk.org">GTK+</a> 
type of the renderer.</p>File <EM>gtk.cell_renderer_fixed.ads (continued)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#FFDEBD"><tt><font color="#008000">--<br>
-- Gtk_New -- Factory<br>
--<br>
--&nbsp;&nbsp;&nbsp; Cell&nbsp; - The result<br>
--&nbsp;&nbsp;&nbsp; After - The number of digits after decimal point<br>
--</font><br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Cell&nbsp; : <font color="#0000FF">out</font> Gtk_Cell_Renderer_Fixed;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
After : Natural := <font color="#800000">0</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);<br>
<font color="#008000">--<br>
-- Initialize -- Construction to be called once by any derived type<br>
--<br>
--&nbsp;&nbsp;&nbsp; Cell - The renderer to initialize<br>
--&nbsp;&nbsp;&nbsp; After - The number of digits after decimal point<br>
--<br>
-- This procedure is never called directly, only from Gtk_New or else<br>
-- from Initialize of a derived type. In the latter case a call to<br>
-- Initialize is obligatory. <br>
--</font><br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;&nbsp;Cell&nbsp;&nbsp;:&nbsp;<font color="#0000FF">not 
null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font>&nbsp;Gtk_Cell_Renderer_Fixed_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
After : Natural<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);</tt></TD>
  </TR>
</TABLE>

<p>The procedure Get_New provides the standard way to create a new renderer 
object. Internally, it calls to Iniialize, which shall be called by any derived 
type upon initialization of the latter.</p>File <EM>gtk.cell_renderer_fixed.ads 
(continued)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#FFDEBD"><tt><font color="#008000">--<br>
-- Render -- Overrides Gtk.Cell_Renderer.Abstract_Renderer...<br>
--</font><br>
&nbsp;&nbsp; 
<font color="#0000FF">overriding<br>
&nbsp;&nbsp; procedure</font> Render<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Cell&nbsp;&nbsp;&nbsp;&nbsp;: <font color="#0000FF">not null access</font> Gtk_Cell_Renderer_Fixed_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Context : Cairo_Context;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Widget&nbsp;&nbsp;: <font color="#0000FF">not null access</font> Gtk_Widget_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Background_Area : Gdk_Rectangle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Cell_Area&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Rectangle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Flags&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Gtk_Cell_Renderer_State<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);<br>
<font color="#008000">--<br>
-- Set_Property -- Overrides Gtk.Cell_Renderer.Abstract_Renderer...<br>
--</font><br>
&nbsp;&nbsp; 
<font color="#0000FF">overriding<br>
&nbsp;&nbsp; procedure</font> Set_Property<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Cell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;:
<font color="#0000FF">not null access</font> Gtk_Cell_Renderer_Fixed_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Param_ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Property_ID;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Value&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; : GValue;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Property_Spec : Param_Spec<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);</tt></TD>
  </TR>
</TABLE>

<p>Render is called to display the renderer's property on the screen. 
Set_Property is a counterpart of Get_Property described above.</p>File <EM>gtk.cell_renderer_fixed.ads 
(continued)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#FFDEBD"><tt><font color="#008000">--<br>
-- Start_Editing -- Overrides Gtk.Cell_Renderer.Abstract_Renderer...<br>
--<br>
&nbsp;&nbsp; </font><font color="#0000FF">overriding<br>
&nbsp;&nbsp; function </font>Start_Editing<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;&nbsp;Cell&nbsp;&nbsp;&nbsp;:&nbsp;<font color="#0000FF">not 
null access</font>&nbsp;Gtk_Cell_Renderer_Fixed_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Event&nbsp;&nbsp;: Gdk_Event;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Widget&nbsp;: <font color="#0000FF">not null access</font> Gtk_Widget_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Path&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Background_Area : Gdk_Rectangle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Cell_Area&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Rectangle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Flags&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 
Gtk_Cell_Renderer_State<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">return</font> Gtk_Widget;</tt></TD>
  </TR>
</TABLE>

<p>Because the renderer is editable Start_Editing is overridden to provide the 
functionality.</p>File <EM>gtk.cell_renderer_fixed.ads 
(continued)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#FFDEBD"><tt><font color="#0000FF">private</font><br>
<font color="#008000">--<br>
-- Gtk_Cell_Renderer_Fixed_Record -- Implementation<br>
--<br>
-- The renderer maintains its state global to the column it renders.<br>
-- That is the text widget it uses to render the number, the number of<br>
-- places after the decimal point and the maximal width of the number<br>
-- places before the point including the sign. This field is evaluated<br>
-- dynamically and adjusted each time the renderer is queried for its<br>
--&nbsp;size&nbsp;or&nbsp;asked&nbsp;to&nbsp;render&nbsp;a&nbsp;cell.&nbsp;This&nbsp;heuristics&nbsp;might&nbsp;not&nbsp;work&nbsp;if&nbsp;new<br>
-- rows are added to the tree model after it was rendered once. <br>
--</font><br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Gtk_Cell_Renderer_Fixed_Record
<font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
new </font>Gtk.Cell_Renderer.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Abstract_Renderer.Gtk_Abstract_Renderer_Record<font color="#0000FF"> with<br>
&nbsp;&nbsp;
record</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Text&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Pango_Layout;<font color="#008000">&nbsp;&nbsp; -- The text to display</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Value&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GDouble := <font color="#800000">0.0</font>;<font color="#008000"> -- Current value</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
After&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Natural := <font color="#800000">0</font>;<font color="#008000">&nbsp;&nbsp; -- Places after the point</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Max_Offset : GInt&nbsp;&nbsp;&nbsp; := <font color="#800000">0</font>;<font color="#008000">&nbsp;&nbsp; -- Pixel offset to the point</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Height&nbsp;&nbsp;&nbsp;&nbsp; : GInt&nbsp;&nbsp;&nbsp; := <font color="#800000">0</font>;<font color="#008000">&nbsp;&nbsp; -- Current pixel height</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Width&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GInt&nbsp;&nbsp;&nbsp; := 
<font color="#800000">0</font>;<font color="#008000">&nbsp;&nbsp; -- Current pixel width</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Left_Width : GInt;<font color="#008000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- Current space before the point<br>
</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Focus_Out&nbsp; : Handler_Id;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#008000">
-- Current focus_out_event handler</font><br>
&nbsp;&nbsp; <font color="#0000FF">end record</font>;</tt></TD>
  </TR>
</TABLE>

<p>The renderer's implementation consists of the following fields:</p>
<ul>
	<li><i>Text</i> is a widget actually responsible for rendering texts;</li>
	<li><i>Value</i> holds the current <i>value</i> property of the renderer;</li>
	<li><i>After</i> keeps the <i>after</i> property;</li>
	<li><i>Max_Offset</i> is the number of pixels to the place where the decimal point 
	is shown. It is evaluated as the maximum length of among all cells of the 
	rendered column. Which allows to align the numbers. This might happen not 
	working if new rows are added without re-rendering all column cells, or when 
	rows are removed.</li>
	<li><i>Height</i> and <i>Width</i> are in pixels. They are the rendered 
	text's height and width for the current value of the property <i>value</i>.</li>
	<li><i>Left_Width</i> is the width of the rendered text before the decimal point. 
	Max_Offset is calculated as a maximum of Left_Width;</li>
	<li><i>Focus_Out</i>.is the ID of the current focus_out_event handler. It is 
	needed to disconnect the handler upon end of editing.</li>
</ul>
File <EM>gtk.cell_renderer_fixed.ads 
(continued)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#FFDEBD"><tt><font color="#008000">--<br>
-- Editing_Done -- The handler of editing_done<br>
--<br>
</font>&nbsp;&nbsp; <font color="#0000FF">procedure</font> Editing_Done<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;&nbsp;Editor&nbsp;:&nbsp;<font color="#0000FF">access</font>&nbsp;Gtk_Entry_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Cell&nbsp;&nbsp; : Gtk_Cell_Renderer_Fixed<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#008000"><br>
--<br>
-- Focus_Out -- The handler of focus_out<br>
--<br>
</font>&nbsp;&nbsp; <font color="#0000FF">function</font> Focus_Out<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
Editor : <font color="#0000FF">access</font> Gtk_Entry_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Event&nbsp; : Gdk.Event.Gdk_Event;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Cell&nbsp;&nbsp; : Gtk_Cell_Renderer_Fixed<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">return</font> Boolean;<font color="#008000"><br>
--<br>
-- Entry_Callbacks -- To handle editing_done<br>
--<br>
</font>&nbsp;&nbsp; <font color="#0000FF">package</font> Entry_Callbacks
<font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new </font>Gtk.Handlers.User_Callback<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Widget_Type =&gt; 
Gtk_Entry_Record,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
User_Type&nbsp;&nbsp; =&gt; Gtk_Cell_Renderer_Fixed<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#008000"><br>
--<br>
-- Entry_Return_Callbacks -- To handle focus_out_event<br>
--<br>
</font>&nbsp;&nbsp; <font color="#0000FF">package</font> Entry_Return_Callbacks<font color="#0000FF"> 
is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new </font>Gtk.Handlers.User_Return_Callback<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Widget_Type =&gt; 
Gtk_Entry_Record,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Return_Type =&gt; Boolean,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
User_Type&nbsp;&nbsp; =&gt; Gtk_Cell_Renderer_Fixed<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<font color="#0000FF">end</font> Gtk.Cell_Renderer_Fixed;</tt></TD>
  </TR>
</TABLE>

<p>Here we declare the handlers for <i>editing_done</i> and <i>focus_out_event</i>. 
The handles will be connected to a
	<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/srcs/gtk-gentry.ads.html#L128">Gtk_Entry</a> widget, which will perform editing. We also instantiate 
User_Callback to connect Editing_Done and User_Return_Callback to connect 
Focus_Out.</p>
<p>The implementation of the package:</p>
File <EM>gtk.cell_renderer_fixed.adb</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt><font color="#0000FF">with </font> Ada.Strings.Fixed;&nbsp;
<font color="#0000FF">use</font> Ada.Strings.Fixed;<font color="#0000FF"><br>
with</font> GLib.Properties;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> GLib.Properties;<br>
<font color="#0000FF">with</font> Gtk.Enums; <font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; 
use</font> Gtk.Enums;<br>
<font color="#0000FF">with</font> Gtk.Missed;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Gtk.Missed;<br>
<font color="#0000FF">with</font> Gtk.Style; <font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; use</font> Gtk.Style;<br>
<font color="#0000FF">with </font> Gtk.Style_Context;&nbsp;
<font color="#0000FF">use</font> Gtk.Style_Context;<font color="#0000FF"><br>
with</font> Gtk.Widget; <font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; use</font> Gtk.Widget;<br>
<font color="#0000FF">with </font> Pango.Cairo;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Pango.Cairo;<font color="#0000FF"><br>
with</font> Pango.Enums; <font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; use</font> 
Pango.Enums;<br>
<font color="#0000FF">with</font> Pango.Font;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Pango.Font;<br>
<br>
<font color="#0000FF">with</font> Ada.Text_IO;<br>
<br>
<font color="#0000FF">package body </font>Gtk.Cell_Renderer_Fixed
<font color="#0000FF">is</font><br>
<br>
<font color="#0000FF">&nbsp;&nbsp;&nbsp;package</font> GDouble_IO&nbsp;<font color="#0000FF">is&nbsp;new&nbsp;</font>Ada.Text_IO.Float_IO&nbsp;(GDouble);<br>
<font color="#0000FF">&nbsp;&nbsp; use</font> GDouble_IO;</tt></TD>
  </TR>
</TABLE>

<p>The package GDouble_IO is an instance of Ada.Text_IO.Float_IO used to render 
GDouble numbers to text.</p>File <EM>gtk.cell_renderer_fixed.adb (continued)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp; Renderer_Type : GType := GType_Invalid;<br>
&nbsp;&nbsp; Value_ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">
constant</font> Property_ID := <font color="#800000">1</font>;<br>
&nbsp;&nbsp; After_ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">
constant</font> Property_ID := <font color="#800000">2</font>;<br>
<br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Class_Init (Class : 
GObject_Class);<br>
&nbsp;&nbsp; <font color="#0000FF">pragma</font> Convention (C, Class_Init);<br>
<br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Class_Init (Class : 
GObject_Class) <font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; use
</font>Gtk.Cell_Renderer.Abstract_Renderer;<br>
&nbsp;&nbsp; <font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Base_Class_Init&nbsp;(Class);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Class_Install_Property<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Class,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Value_ID,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Gnew_Double<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Name&nbsp;&nbsp;&nbsp; 
=&gt; &quot;<font color="#FF0000">value</font>&quot;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Nick&nbsp;&nbsp;&nbsp; 
=&gt; &quot;<font color="#FF0000">value</font>&quot;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Blurb&nbsp;&nbsp; 
=&gt; &quot;<font color="#FF0000">fixed point number</font>&quot;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Minimum =&gt; 
GDouble'First,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Maximum =&gt; 
GDouble'Last,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Default =&gt; 
<font color="#800000">0.0</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) );<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Class_Install_Property<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Class,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; After_ID,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Gnew_UInt<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Name&nbsp;&nbsp;&nbsp; 
=&gt; &quot;<font color="#FF0000">after</font>&quot;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Nick&nbsp;&nbsp;&nbsp; 
=&gt; &quot;<font color="#FF0000">aft</font>&quot;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Blurb&nbsp;&nbsp; 
=&gt; &quot;<font color="#FF0000">digits after decimal point</font>&quot;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Minimum =&gt; 
<font color="#800000">0</font>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Maximum =&gt; 
GDouble'Digits,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Default =&gt; 
<font color="#800000">0</font><br>
&nbsp;&nbsp; )&nbsp; );<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Class_Init;</tt></TD>
  </TR>
</TABLE>

<p><a name="Gtk.Cell_Renderer_Fixed.Class_Init"></a>The variable Renderer_Type holds the <a href="http://www.gtk.org">GTK+</a> 
type of the renderer. It is queried by Get_Type to determine whether the type is 
already registered in <a href="http://www.gtk.org">GTK+</a>. Upon registration 
the procedure Class_Init will be&nbsp; called. The next two constants are the 
identifiers of the renderer's properties. <a href="http://www.gtk.org">GTK+</a> 
translates property name to the identifier when it calls Get_Property or 
Set_Property.</p>
<p>The procedure Class_Init is called by Get_Type once upon type registration. 
The implementation of Class_Init calls to the parent's Class_Init and then registers the properties of the 
renderer. Each renderer object will have these two properties.</p>File <EM>gtk.cell_renderer_fixed.adb (continued)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp; <font color="#0000FF">procedure</font> 
Editing_Done<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
Editor : <font color="#0000FF">access</font> Gtk_Entry_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Cell&nbsp;&nbsp; : Gtk_Cell_Renderer_Fixed<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is<br>
&nbsp;&nbsp; begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if </font>Cell.Focus_Out.Id /= Null_Handler_Id
<font color="#0000FF">then</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Disconnect (Editor, 
Cell.Focus_Out);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Cell.Focus_Out.Id :=
Null_Handler_Id;<br>
&nbsp;<font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp; end if</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Cell.Value :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GDouble'Value&nbsp;(Trim&nbsp;(Get_Text&nbsp;(Editor),&nbsp;Ada.Strings.Both));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Stop_Editing (Cell, False);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Commit (Cell);<br>
&nbsp;<font color="#0000FF">&nbsp; exception<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when others </font>=&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Stop_Editing (Cell, True);<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Editing_Done;</tt></TD>
  </TR>
</TABLE>

<p>The handler of <i>editing_done</i> receives the
	<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/srcs/gtk-gentry.ads.html#L128">Gtk_Entry</a> widget as the parameter. The second parameter is the user data 
identifying the renderer. First the handler disconnects the renderer from <i>
focus_out_event</i>. Then it takes the text from the entry widget and converts 
it to GDouble. Upon any error it cancels editing by calling Stop_Editing with 
Canceled = <i><font color="#800000">true</font></i>. Otherwise it stores the new 
value into the renderer. Then it stops editing using, this time by using 
Stop_Editing with Canceled = <i><font color="#800000">false</font></i>. Then it 
calls Commit to emit the <i>commit</i> signal.</p>
File <EM>gtk.cell_renderer_fixed.adb 
(continued)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp;&nbsp;<font color="#0000FF">procedure</font>&nbsp;Finalize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;(&nbsp; Cell&nbsp;:&nbsp;<font color="#0000FF">not 
null access</font>&nbsp;Gtk_Cell_Renderer_Fixed_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;<font color="#0000FF"> is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Gtk.Cell_Renderer.Abstract_Renderer;<br>
&nbsp;&nbsp;
<font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">if</font> Cell.Text /=<font color="#0000FF"> null then</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Unref (Cell.Text);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">end if</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Finalize (Gtk_Abstract_Renderer_Record (Cell.<font color="#0000FF">all</font>)'<font color="#0000FF">Access</font>);<br>
&nbsp;&nbsp;
<font color="#0000FF">end</font> Finalize;</tt></TD>
  </TR>
</TABLE>

<p>Finalize releases the field Text and then calls the parent type's Finalize.</p>File <EM>gtk.cell_renderer_fixed.adb 
(continued)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp;&nbsp;<font color="#0000FF">function</font> 
Focus_Out<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;&nbsp;Editor&nbsp;:&nbsp;<font color="#0000FF">access</font>&nbsp;Gtk_Entry_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Event&nbsp; : Gdk.Event.Gdk_Event;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Cell&nbsp;&nbsp; : Gtk_Cell_Renderer_Fixed<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">return</font> Boolean <font color="#0000FF">is<br>
&nbsp;&nbsp; begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Editing_Done (Editor, Cell);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> False;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Focus_Out;</tt></TD>
  </TR>
</TABLE>

<p>The handler of <i>focus_out_event</i> simply calls to Editing_Done and 
returns.</p>File <EM>gtk.cell_renderer_fixed.adb 
(continued)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp;&nbsp;<font color="#0000FF">function</font> 
Get_Aligned_Area<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Cell&nbsp;&nbsp; 
: <font color="#0000FF">not null access </font>Gtk_Cell_Renderer_Fixed_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Widget : <font color="#0000FF">not null access </font>Gtk_Widget_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Flags&nbsp; : Gtk_Cell_Renderer_State;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Cell_Area : Gdk_Rectangle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">return</font> Gdk_Rectangle <font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Area&nbsp;&nbsp; : Gdk_Rectangle := Cell.Get_Size 
(Widget, Cell_Area);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result : Gdk_Rectangle;<br>
&nbsp;&nbsp; <font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result.X :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Cell_Area.X<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +&nbsp; GInt (Get_X_Pad (Cell))<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +&nbsp; Area.X<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +&nbsp; (Cell.Max_Offset - 
Cell.Left_Width)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result.Y :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Cell_Area.Y<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +&nbsp; GInt (Get_Y_Pad (Cell))<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +&nbsp; Area.Y<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result.Width :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GInt'Min<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Result.X - Cell_Area.X 
+ Cell_Area.Width,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Area.Width<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Result.Height :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GInt'Min (Result.Y - 
Cell_Area.Y + Cell_Area.Height, Area.Height);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> Result;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Get_Aligned_Area;</tt></TD>
  </TR>
</TABLE>

<p>This function evaluates the area which will be used to render the value, see 
implementation of <a href="#Gtk.Cell_Renderer_Fixed.Render">Render below</a>.</p>File <EM>gtk.cell_renderer_fixed.adb 
(continued)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp;
<font color="#0000FF">procedure</font> Get_Property<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;&nbsp;Cell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;<font color="#0000FF">not 
null access</font>&nbsp;Gtk_Cell_Renderer_Fixed_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Param_ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Property_ID;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Value&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">out</font> GValue;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Property_Spec : Param_Spec<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp;<font color="#0000FF"> is<br>
&nbsp;&nbsp;
begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
case </font>Param_ID<font color="#0000FF"> is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
when</font> Value_ID =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Init (Value, GType_Double);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Set_Double (Value, Cell.Value);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">when</font> After_ID =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Init (Value, GType_UInt);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Set_UInt (Value, GUInt (Cell.After));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000FF">&nbsp;
when others</font> =&gt; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Init (Value, GType_String);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Set_String (Value, &quot;<font color="#FF0000">unknown</font>&quot;);<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">&nbsp;&nbsp;
end case</font>;<br>
&nbsp;&nbsp;
<font color="#0000FF">end</font> Get_Property;</tt></TD>
  </TR>
</TABLE>

<p><a name="Gtk.Cell_Renderer_Fixed.Get_Property"></a>The implementation of Get_Property is straightforward. It receives the 
identifier of the property and has to initialize the parameter Value with the 
value of the type of the property. Then it sets the property value into Value.</p>File <EM>gtk.cell_renderer_fixed.adb 
(continued)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt><font color="#008000">--<br>
-- Update -- The widget associated with the renderer<br>
--<br>
--&nbsp;&nbsp;&nbsp; Cell&nbsp;&nbsp; - The renderer<br>
--&nbsp;&nbsp;&nbsp; Widget - The widget it is used at<br>
--<br>
-- This procedure is used upon each call to either to render or to<br>
--&nbsp;evaluate&nbsp;the&nbsp;geometry&nbsp;of&nbsp;a&nbsp;cell.&nbsp;The&nbsp;renderer&nbsp;has&nbsp;no&nbsp;data&nbsp;associated<br>
-- with any concrete cell of the tree view. It is called at random to<br>
-- indicate all of them. <br>
--</font><br>
&nbsp;&nbsp;
<font color="#0000FF">procedure</font> Update<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Cell&nbsp;&nbsp; : <font color="#0000FF">in out</font> Gtk_Cell_Renderer_Fixed_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Widget : <font color="#0000FF">in out </font> Gtk.Widget.Gtk_Widget_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">is<br>
</font> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Text&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : String (<font color="#800000">1</font>..<font color="#800000">40</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Start_Pos : Integer := Text'Last + <font color="#800000">1</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Point_Pos : Integer := Text'Last + <font color="#800000">1</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Right&nbsp;&nbsp;&nbsp;&nbsp; : GInt&nbsp;&nbsp;&nbsp; := Cell.Width - Cell.Max_Offset;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Line&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GInt;<br>
&nbsp;&nbsp;
<font color="#0000FF">begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if </font>Cell.Text =<font color="#0000FF"> null then</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Cell.Text := Widget.Create_Pango_Layout;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#0000FF">
end if</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Put (Text, Cell.Value, Cell.After, <font color="#800000">0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">for</font> Index <font color="#0000FF">in reverse </font>Text'Range
<font color="#0000FF">loop</font><br>
<font color="#008000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- Find the beginning of the number in the output string<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font><font color="#0000FF">if</font> ' ' = Text (Index) <font color="#0000FF">then</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Start_Pos := Index + <font color="#800000">1</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">exit</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">end if</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">end loop</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">for</font> Index <font color="#0000FF">in</font> Start_Pos..Text'Last
<font color="#0000FF">loop</font><br>
<font color="#008000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- Find the position of the decimal point in the output<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font><font color="#0000FF">if</font> '<font color="#FF0000">.</font>' = Text (Index) 
<font color="#0000FF">then</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Point_Pos := Index;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">exit</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
end if;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">end loop</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Cell.Text.Set_Text (Text (Start_Pos..Text'Last));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Cell.Text.Get_Pixel_Size (Cell.Width, Cell.Height);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">if</font> Point_Pos &lt;= Text'Last <font color="#0000FF">then</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Cell.Text.Index_To_Line_X<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; GInt (Point_Pos 
- Start_Pos),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; False,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Line,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Cell.Left_Width<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Cell.Left_Width := To_Pixels (Cell.Left_Width);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">else</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Cell.Left_Width := Cell.Width;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">end if</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Cell.Max_Offset := GInt'Max (Cell.Left_Width, Cell.Max_Offset);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Cell.Width :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Cell.Max_Offset<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+&nbsp; GInt'Max (Right, Cell.Width - Cell.Left_Width)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);<br>
&nbsp;&nbsp;
<font color="#0000FF">end</font> Update;</tt></TD>
  </TR>
</TABLE>

<p><a name="Gtk.Cell_Renderer_Fixed.Update"></a>The procedure 
<a href="#Gtk.Cell_Renderer_Fixed.Update">Update</a> is used 
internally to evaluate the renderer's state. First it checks if the field Text 
is already initialized. If not, it creates it using Create_Pango_Layout call. 
Note that it cannot be made earlier, upon renderer construction, because 
Create_Pango_Layout requires a widget parameter. The procedure Finalize will 
destroy this field.</p>
<p>Then the value of the property <i>value</i> is rendered to text using the 
procedure Put. It is guaranteed UTF-8, so there is no need to care about any 
conversions from Latin-1 encoding. The next two loops determine where the output 
starts in the output string Text (the variable Start_Pos) and where the decimal 
point is located (the variable Point_Pos).</p>
<p>The rendered text is set into the field Text and its size in pixels is 
calculated. After that, Index_To_Line_X is used to calculate the horizontal 
offset to the point. The result is in units, so it is converted to pixels; 
before placing into Left_Width field. The value of Left_Width influences 
Max_Offset, which is the maximum of all Left_Widths seen.</p>
<p>Then the total width of the cell is calculated as the sum of the space 
required before the decimal point and after it. The former obviously is 
Max_Offset. The latter is the maximum the space required for the current value 
and one has been required before the call (stored Cell.Width - Cell.Max_Offset).</p>File <EM>gtk.cell_renderer_fixed.adb 
(continued)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp; <font color="#0000FF">function</font> Get_Size<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Cell&nbsp;&nbsp; : <font color="#0000FF">not null access</font> Gtk_Cell_Renderer_Fixed_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Widget&nbsp;:&nbsp;<font color="#0000FF">not 
null access</font>&nbsp;Gtk.Widget.Gtk_Widget_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">return</font> Gdk_Rectangle <font color="#0000FF">is<br>
&nbsp;&nbsp;
begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Update (Cell.<font color="#0000FF">all</font>, Widget.<font color="#0000FF">all</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; X&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =&gt; <font color="#800000">0</font>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =&gt; <font color="#800000">0</font>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Width&nbsp; =&gt; Cell.Width,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Height =&gt; Cell.Height<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Get_Size;</tt></TD>
  </TR>
</TABLE>

<p>This variant of Get_Size is interested in only width and height of the 
rendered value. The implementation calls to 
<a href="#Gtk.Cell_Renderer_Fixed.Update">Update</a> and then returns the fields 
Width and Height.</p>File <EM>gtk.cell_renderer_fixed.adb 
(continued)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp; <font color="#0000FF">function</font> Get_Size<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Cell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">not null access</font> Gtk_Cell_Renderer_Fixed_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Widget&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;<font color="#0000FF">not 
null access</font>&nbsp;Gtk.Widget.Gtk_Widget_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Cell_Area : Gdk_Rectangle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">return</font> Gdk_Rectangle <font color="#0000FF">is<br>
&nbsp;&nbsp;
begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Update (Cell.<font color="#0000FF">all</font>, Widget.<font color="#0000FF">all</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; X&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =&gt; GInt<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;
(&nbsp; Get_X_Align (Cell)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;
*&nbsp; GFloat (Cell_Area.Width - Cell.Width)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;
),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Y&nbsp;&nbsp;&nbsp; &nbsp; =&gt; GInt<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Get_Y_Align (Cell)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*&nbsp; GFloat (Cell_Area.Height - Cell.Height)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Width&nbsp; =&gt; Cell.Width,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Height =&gt; Cell.Height<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Get_Size;</tt></TD>
  </TR>
</TABLE>

<p>This variant is a little bit more complex because it specifies the 
surrounding rectangle. Again, <a href="#Gtk.Cell_Renderer_Fixed.Update">Update</a> 
is called and the positions of the left top corner are evaluated using alignment 
properties of the renderer.</p>
File <EM>gtk.cell_renderer_fixed.adb 
(continued)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp; <font color="#0000FF">function</font> Get_Type
<font color="#0000FF">return</font> Gtk_Type<font color="#0000FF"> is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; use </font>Gtk.Cell_Renderer.Abstract_Renderer;<br>
&nbsp;&nbsp; <font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">if</font> Renderer_Type = GType_Invalid
<font color="#0000FF">then</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Renderer_Type :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Register
(&quot;<font color="#FF0000">GtkCellRendererFixed</font>&quot;, Class_Init'<font color="#0000FF">Access</font>); <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end if</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> Renderer_Type;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Get_Type;</tt></TD>
  </TR>
</TABLE>

<p align="left">The function Get_Type checks if the renderer's <a href="http://www.gtk.org">GTK+</a> 
type is not yet registered and if so, then registers it by calling to Register 
of <a href="#Gtk.Cell_Renderer.Gtk_Abstract_Renderer_Record">
Gtk_Abstract_Renderer_Record</a>. Two parameters of the function Register are 
the name of the <a href="http://www.gtk.org">GTK+</a> 
class and the class initialization procedure.
<a href="#Gtk.Cell_Renderer_Fixed.Class_Init">Class_Init</a> described above is 
used for the second.</p>File <EM>gtk.cell_renderer_fixed.adb 
(continued)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp; <font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Cell&nbsp; : <font color="#0000FF">out</font> Gtk_Cell_Renderer_Fixed;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
After : Natural := <font color="#800000">0</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">is<br>
&nbsp;&nbsp;
begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Cell := <font color="#0000FF">new</font> Gtk_Cell_Renderer_Fixed_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Initialize (Cell, After);<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Gtk_New;<br>
<br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Cell&nbsp; : <font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font> &nbsp;Gtk_Cell_Renderer_Fixed_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
After : Natural<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)<font color="#0000FF">&nbsp; is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; use </font>Gtk.Cell_Renderer.Abstract_Renderer;<font color="#0000FF"><br>
&nbsp;&nbsp;
begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Initialize&nbsp;(Cell,&nbsp;Get_Type);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Cell.After := After;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Initialize;</tt></TD>
  </TR>
</TABLE>

<p>The implementation of Gtk_New allocates the object and calls to Initialize. 
The first thing Initialize has to do is to call parent's Initialize of
<a href="#Gtk.Cell_Renderer.Gtk_Abstract_Renderer_Record">
Gtk_Abstract_Renderer_Record</a>. The second parameter of it is the renderer's 
type. So it calls to Get_Type, which in turn registers the <a href="http://www.gtk.org">GTK+</a> 
type as necessary.</p><a name="Gtk.Cell_Renderer_Fixed.Render"></a>File <EM>gtk.cell_renderer_fixed.adb 
(continued)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp; <font color="#0000FF">procedure</font> Render<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;&nbsp;Cell&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;<font color="#0000FF">not 
null access</font>&nbsp;Gtk_Cell_Renderer_Fixed_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Context : Cairo_Context;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Widget&nbsp; : <font color="#0000FF">not null access</font> Gtk_Widget_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Background_Area : Gdk_Rectangle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Cell_Area&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Rectangle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Flags&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Gtk_Cell_Renderer_State<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Area&nbsp; : Gdk_Rectangle&nbsp;&nbsp;&nbsp;&nbsp; := Cell.Get_Size (Widget, Cell_Area);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Style : Gtk_Style_Context := Get_Style_Context 
(Widget);<br>
&nbsp;&nbsp; <font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Save (Context);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Rectangle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Context,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GDouble (Cell_Area.X),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GDouble (Cell_Area.Y),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GDouble (Cell_Area.Width),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; GDouble (Cell_Area.Height)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Clip (Context);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Render_Layout<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Style,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Context,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Get_Text_GC (Get_Style (Widget), Text_State),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Cell_Area.X<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+&nbsp; GInt (Get_X_Pad (Cell))<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+&nbsp; Area.X<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+&nbsp; (Cell.Max_Offset - Cell.Left_Width)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Cell_Area.Y<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+&nbsp; GInt (Get_Y_Pad (Cell))<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+&nbsp; Area.Y<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Cell.Text<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Restore (Context);<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Render;</tt></TD>
  </TR>
</TABLE>

<p>The implementation of Render first calls to Get_Size to update the renderer's 
state and get the rectangle where the value has to be drawn into. The current 
style context of the widget is stored in Style. The drawing context is saved. 
Then the clipping rectangle determined by the parameter Cell_Area is set in the 
context. After that Render_Layout is called to draw the text of the field Text. The position of the left-top corner of the output is determined by the Cell_Area parameter of the procedure Render. Get_X_Pad and Get_Y_Pad are called 
to obtain actual padding. Area.X and Area.Y are returned by Get_Size and 
relative to the corner. The horizontal offset should be additionally adjusted to 
the difference between the maximal width of the output field before the decimal 
point and the width of the rendered text of the current value. Finally the 
context is restored.</p>File <EM>gtk.cell_renderer_fixed.adb 
(continued)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp; <font color="#0000FF">procedure</font> Set_Property<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;&nbsp;Cell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;<font color="#0000FF">not 
null access</font>&nbsp;Gtk_Cell_Renderer_Fixed_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Param_ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Property_ID;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Value&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GValue;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Property_Spec : Param_Spec<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">is<br>
&nbsp;&nbsp;
begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
case </font>Param_ID <font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
when</font> Value_ID =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Cell.Value := Get_Double (Value);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> After_ID =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Cell.After := Integer (Get_UInt (Value));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when others 
</font>=&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
end case;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Set_Property;</tt></TD>
  </TR>
</TABLE>

<p>The procedure Set_Property is reverse to Get_Property described above.</p>File <EM>gtk.cell_renderer_fixed.adb 
(continued)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp; <font color="#0000FF">function </font>
Start_Editing<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;&nbsp;Cell&nbsp;&nbsp;&nbsp;:&nbsp;<font color="#0000FF">not 
null access&nbsp;</font>Gtk_Cell_Renderer_Fixed_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Event&nbsp; : Gdk_Event;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Widget : <font color="#0000FF">
not null
access </font>Gtk_Widget_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Path&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Background_Area : Gdk_Rectangle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Cell_Area&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Rectangle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Flags&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 
Gtk_Cell_Renderer_State<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return </font>
Gtk_Widget<font color="#0000FF"> is<br>
&nbsp;&nbsp; </font>&nbsp;&nbsp; Editor&nbsp;&nbsp;&nbsp; : Gtk_Entry;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Text&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : String (<font color="#800000">1</font>..<font color="#800000">40</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Start_Pos : Integer := Text'Last +
<font color="#800000">1</font>;<font color="#0000FF"><br>
&nbsp;&nbsp; begin<br>
&nbsp;&nbsp; </font>&nbsp;&nbsp; Put (Text, Cell.Value, Cell.After, 0);<font color="#0000FF"><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for </font>Index<font color="#0000FF"> in reverse </font>
Text'Range<font color="#0000FF"> loop<br>
</font> <font color="#008000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
-- Find the beginning of the number in the output string<br>
</font> <font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
if </font>' ' = Text (Index) <font color="#0000FF">then<br>
&nbsp;&nbsp;&nbsp;&nbsp; </font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Start_Pos 
:= Index + <font color="#800000">1</font>;<font color="#0000FF"><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; exit</font>;<font color="#0000FF"><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; end if</font>;<font color="#0000FF"><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; end loop</font>;</tt></TD>
  </TR>
</TABLE>

<p>The procedure Start_Editing is called upon editing request. For example when 
a cell is doubly clicked. First the renderer formats a string with the current 
value of the cell. The parameters of Start_Editing are similar to ones of 
Render. The additional parameter Path identifies the row the cell being edited 
belongs to. You don't need to store this string because the base type does it 
for you. Get_Path can be later used to obtain it. First, Start_Editing stores 
the current value in Text (1..Start_Pos).</p>File <EM>gtk.cell_renderer_fixed.adb 
(continued)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Gtk_New (Editor);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set_Property (Editor, Build (&quot;<font color="#FF0000">xalign</font>&quot;), 
Get_X_Align (Cell));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set_Property (Editor, Build (&quot;<font color="#FF0000">has-frame</font>&quot;), 
False);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Editor.Set_Text (Text (Start_Pos..Text'Last));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Select_Region (Editor, <font color="#800000">0</font>, 
-<font color="#800000">1</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Entry_Callbacks.Connect<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Editor,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">editing_done</font>&quot;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Entry_Callbacks.To_Marshaller (Editing_Done'<font color="#0000FF">Access</font>),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Cell.all'<font color="#0000FF">Access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Cell.Focus_Out :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Entry_Return_Callbacks.Connect<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Editor,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">focus_out_event</font>&quot;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Entry_Return_Callbacks.To_Marshaller (Focus_Out'<font color="#0000FF">Access</font>),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Cell.all'Access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Editor.Show;<font color="#0000FF"><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return</font> Editor.all'<font color="#0000FF">Access</font>;<font color="#0000FF"><br>
&nbsp;&nbsp; end</font> Start_Editing;<br>
<font color="#0000FF">end</font> Gtk.Cell_Renderer_Fixed;</tt></TD>
  </TR>
</TABLE>

<p>Then an entry widget is created and the text is set into the widget. Some 
additional settings are applied to the widget. Its horizontal alignment is set 
from the corresponding renderer's property. Its frame is removed. The content is 
selected (Select_Region). Then Editing_Done and Focus_Out are connected to the 
widget. Finally, it is shown and returned. Note that there is no need to care 
about removing the widget, it is a responsibility of the caller.</p>
<h4>2.4.2. Test program</h4>
The following small program illustrates use of the fixed point renderer.<p>File <EM>test_gtk_fixed.adb</EM>:<br>
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt><font color="#0000FF">with</font> 
Ada.Numerics.Float_Random;&nbsp; <font color="#0000FF">use</font> 
Ada.Numerics.Float_Random; <br>
<font color="#0000FF">with</font> GLib;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> GLib;<br>
<font color="#0000FF">with</font> GLib.Properties;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> GLib.Properties;<br>
<font color="#0000FF">with</font> GLib.Values;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> GLib.Values;<br>
<font color="#0000FF">with</font> Gtk.Enums;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Gtk.Enums;<br>
<font color="#0000FF">with</font> Gdk.Event;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Gdk.Event;<br>
<font color="#0000FF">with</font> Gtk.List_Store;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Gtk.List_Store;<br>
<font color="#0000FF">with</font> Gtk.Widget;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Gtk.Widget;<br>
<font color="#0000FF">with</font> Gtk.Window;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Gtk.Window;<br>
<font color="#0000FF">with</font> Gtk.Cell_Renderer_Fixed;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Gtk.Cell_Renderer_Fixed;<br>
<font color="#0000FF">with</font> Gtk.Cell_Renderer_Text;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Gtk.Cell_Renderer_Text;<br>
<font color="#0000FF">with</font> Gtk.Tree_View_Column;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Gtk.Tree_View_Column;<br>
<font color="#0000FF">with</font> Gtk.Tree_Model;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Gtk.Tree_Model;<br>
<font color="#0000FF">with</font> Gtk.Tree_View;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Gtk.Tree_View;<br>
<font color="#0000FF">with</font> Gtk.Scrolled_Window;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Gtk.Scrolled_Window;<br>
<br>
<font color="#0000FF">with </font> Ada.Unchecked_Conversion;<font color="#0000FF"><br>
with</font> Gtk.Main;<br>
<font color="#0000FF">with</font> Gtk.Missed;<br>
<font color="#0000FF">with</font> Test_Gtk_Fixed_Handlers;<br>
<br>
<font color="#0000FF">procedure</font> Test_Gtk_Fixed <font color="#0000FF">is</font><br>
<br>
&nbsp;&nbsp; Window&nbsp;&nbsp;&nbsp;&nbsp; : Gtk_Window;<br>
&nbsp;&nbsp; Table_View : Gtk_Tree_View;<br>
&nbsp;&nbsp; Scroller&nbsp;&nbsp; : Gtk_Scrolled_Window;<br>
<br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Local_Callback
<font color="#0000FF">is access procedure </font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Cell&nbsp; :
<font color="#0000FF">access</font> Gtk_Cell_Renderer_Fixed_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Store : 
Gtk_List_Store<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
&nbsp;&nbsp; <font color="#0000FF">function</font> &quot;<font color="#FF0000">+</font>&quot;<font color="#0000FF"> 
is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new </font>Ada.Unchecked_Conversion<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Local_Callback,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Test_Gtk_Fixed_Handlers.Simple_Handler<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Commit<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp;&nbsp;Cell&nbsp;&nbsp;:&nbsp;<font color="#0000FF">access</font>&nbsp;Gtk_Cell_Renderer_Fixed_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Store : Gtk_List_Store<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; 
<font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Row : Gtk_Tree_Iter :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Get_Iter_From_String (Store, 
Get_Path (Cell));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Value : GValue;<br>
&nbsp;&nbsp; <font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">if</font> Row /= Null_Iter
<font color="#0000FF">then</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Init (Value, GType_Double);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set_Double (Value, Get_Property 
(Cell, Build (&quot;<font color="#FF0000">value</font>&quot;)));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set_Value (Store, Row,
<font color="#800000">0</font>, Value);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Unset (Value);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end if</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Commit;<br>
<br>
<font color="#0000FF">begin</font><br>
&nbsp;&nbsp; Gtk.Main.Init;<br>
&nbsp;&nbsp; Gtk.Window.Gtk_New (Window);<br>
&nbsp;&nbsp; Window.Set_Title (&quot;<font color="#FF0000">Test Fixed-Point Cell 
Renderer</font>&quot;);<br>
&nbsp;&nbsp; Window.On_Delete_Event (Gtk.Missed.Delete_Event_Handler'<font color="#0000FF">Access</font>);<br>
&nbsp;&nbsp; Window.On_Destroy (Gtk.Missed.Destroy_Handler'<font color="#0000FF">Access</font>);<br>
&nbsp;&nbsp; Gtk_New (Scroller);<br>
&nbsp;&nbsp; Gtk_New (Table_View);</tt></TD>
  </TR>
</TABLE>

<p>The above is mostly standard <a href="http://www.gtk.org">GTK+</a> 
initialization stuff, except the procedure Commit and instantiation of 
User_Callback for it. The variables Table_View is a tree view widget and its 
scroll bar. The procedure Commit is attached to the renderer to store editing 
changes into the list store. It uses Get_Iter_From_String applied to Get_Path to 
obtain the iterator of the edited row. Then it queries the value from the 
renderer and stores it into the first column of the row. The package 
Test_Gtk_Fixed_Handlers is the following instantiation of event handlers:</p><p>File <EM>test_gtk_fixed_handlers.ads</EM>:<br>
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt><font color="#0000FF">with</font> 
Gtk.Cell_Renderer_Fixed;&nbsp; <font color="#0000FF">use</font> 
Gtk.Cell_Renderer_Fixed;<br>
<font color="#0000FF">with</font> Gtk.List_Store;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Gtk.List_Store;<br>
<br>
<font color="#0000FF">with</font> Gtk.Handlers;<br>
<br>
<font color="#0000FF">package</font> Test_Gtk_Fixed_Handlers<font color="#0000FF"> 
is<br>
&nbsp;&nbsp; new </font>Gtk.Handlers.User_Callback<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Gtk_Cell_Renderer_Fixed_Record,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Gtk_List_Store<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></TD>
  </TR>
</TABLE>

<p>File <EM>test_gtk_fixed.adb (continued)</EM>:<br>
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt><font color="#008000">&nbsp;&nbsp; -- Creating a column of numbers (list store)<br>
</font>&nbsp;&nbsp; <font color="#0000FF">declare</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Table&nbsp;: Gtk_List_Store;<br>
&nbsp;&nbsp; &nbsp;&nbsp; <font color="#0000FF">declare</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; Row&nbsp;&nbsp;&nbsp; : Gtk_Tree_Iter := 
Null_Iter;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Value&nbsp; : GValue;<br>
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Source : Generator;<br>
&nbsp;&nbsp; <font color="#0000FF">&nbsp;&nbsp; begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Init (Value, GType_Double);<br>
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Gtk_New (Table, (<font color="#800000">0</font> 
=&gt; GType_Double));<br>
<font color="#008000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; -- Filling the column with 
random numbers<br>
</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">&nbsp;&nbsp; for</font> Item <font color="#0000FF">in</font>
<font color="#800000">1</font>..<font color="#800000">1000</font>
<font color="#0000FF">loop</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Table.Append (Row);<br>
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set_Double<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;(&nbsp; Value,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;GDouble&nbsp;(<font color="#800000">100.0</font>&nbsp;*&nbsp;(Random&nbsp;(Source)&nbsp;-&nbsp;<font color="#800000">0.5</font>))<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set_Value (Table, Row,
<font color="#800000">0</font>, Value);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">&nbsp;&nbsp; end loop</font>;<br>
<font color="#008000">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- Attaching the column 
store to its view<br>
</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; Table_View.Set_Model (To_Interface 
(Table));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Unset (Value);<br>
&nbsp;&nbsp;
&nbsp;&nbsp; <font color="#0000FF">end</font>;</tt></TD>
  </TR>
</TABLE>

<p>This fragment creates a list store (Table) consisting of one column of 
GDouble data. The column is filled with randomly generated numbers from in the 
range -50..50. Finally the store is attached to the widget.</p><p>File <EM>test_gtk_fixed.adb 
(continued)</EM>:<br>
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt><font color="#008000">&nbsp;&nbsp; &nbsp;&nbsp; -- Creating columns in the view<br>
</font>&nbsp;&nbsp; <font color="#0000FF">&nbsp;&nbsp; declare</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Column_No : GInt;<br>
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Column&nbsp;&nbsp;&nbsp; : Gtk_Tree_View_Column;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; Numeric&nbsp;&nbsp; : Gtk_Cell_Renderer_Fixed;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Text&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Gtk_Cell_Renderer_Text;<br>
&nbsp;&nbsp;
&nbsp;&nbsp; <font color="#0000FF">begin</font><br>
<font color="#008000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;--&nbsp;The&nbsp;first&nbsp;column&nbsp;will&nbsp;use&nbsp;the&nbsp;fixed-point&nbsp;renderer<br>
</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Gtk_New (Column);<br>
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Column.Set_Title (&quot;<font color="#FF0000">Value</font>&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; Gtk_New (Numeric, <font color="#800000">3</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Numeric.Set_Mode (Cell_Renderer_Mode_Editable);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Commit_Handlers.Connect<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Numeric,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">commit</font>&quot;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Commit'Access,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Table<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Column.Pack_Start (Numeric, False);<br>
<font color="#008000">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- Map column's renderer to 
the table's column 0<br>
</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; Column.Add_Attribute (Numeric, &quot;<font color="#FF0000">value</font>&quot;,
<font color="#800000">0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Column_No := Table_View.Append_Column (Column);<br>
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Column.Set_Resizable (True);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; Column.Set_Sort_Column_Id (<font color="#800000">0</font>);<br>
<br>
<font color="#008000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- The second column uses 
the standard text renderer<br>
&nbsp;&nbsp;
</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Gtk_New (Column);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; Column.Set_Title (&quot;<font color="#FF0000">Text</font>&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Gtk_New (Text);<br>
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Column.Pack_Start (Text, True);<br>
<font color="#008000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; -- Map column's renderer to 
the table's column 0<br>
</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Column.Add_Attribute (Text, &quot;<font color="#FF0000">text</font>&quot;,
<font color="#800000">0</font>);<br>
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Column_No := Table_View.Append_Column (Column);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; Column.Set_Resizable (True);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Column.Set_Sort_Column_Id (<font color="#800000">0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font>;</tt></TD>
  </TR>
</TABLE>

<p>Here the two columns are added to the tree view widget. The first column uses
<a href="#Gtk.Cell_Renderer_Fixed">Gtk_Cell_Renderer_Fixed</a> to render the 
first column of the list store. Note that Add_Attribute refers to the property
<i>value</i> of the renderer. The renderer is set to <i>editable</i> mode using 
Set_Mode. The procedure Commit is connected to the <i>commit</i> signal of the 
renderer. The second column uses the standard text renderer 
to render the same first column of the store.</p><p>File <EM>test_gtk_fixed.adb 
(continued)</EM>:<br>
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp;&nbsp;Scroller.Set_Policy&nbsp;(Policy_Automatic,&nbsp;Policy_Automatic);<br>
&nbsp;&nbsp; Scroller.Add (Table_View); <br>
&nbsp;&nbsp; Window.Add (Scroller);<br>
<br>
&nbsp;&nbsp; Table_View.Show;<br>
&nbsp;&nbsp; Scroller.Show;<br>
&nbsp;&nbsp; Window.Show;<br>
&nbsp;&nbsp; Gtk.Main.Main;<br>
<font color="#0000FF">end</font> Test_Gtk_Fixed;</tt></TD>
  </TR>
</TABLE>

<p>Finally the scroll bar is added to the widget, all things are shown and 
messages loop is entered. The result might look like:</p>
<p><img border="0" src="gtk_cell_renderer_fixed.gif" width="157" height="259" alt="cell renderer fixed"></p>
<h3>2.6. <a name="2.6"></a>Columned model</h3>
<p>The package Gtk.Tree_Model.Columned_Store provides a derived tree model. The 
model contains columns of the reference model composed in <i>n</i> columns. 
When the reference model itself has <i>m</i> columns then the derived model will 
have total <i>n</i><font face="Times New Roman">&middot;</font><i>m</i> columns. The cells of 
the reference model are arranged top-bottom, left-to-right as shown on the 
figure:</p>
<blockquote>
	<table border="0" cellspacing="0" cellpadding="0">
		<tr>
			<td valign="top" align="center">Reference model,<br>
			<i>m</i>=3</td>
			<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </td>
			<td valign="top">Derived columned model,<br>
			with <i>n</i>=3 major columns</td>
		</tr>
		<tr>
			<td valign="top" align="center">
			<table border="1" cellspacing="0">
				<tr>
					<td><i>a</i><sub>1</sub></td>
					<td><i>b</i><sub>1</sub></td>
					<td><i>c</i><sub>1</sub></td>
				</tr>
				<tr>
					<td><i>a</i><sub>2</sub></td>
					<td><i>b</i><sub>2</sub></td>
					<td><i>c</i><sub>2</sub></td>
				</tr>
				<tr>
					<td><i>a</i><sub>3</sub></td>
					<td><i>b</i><sub>3</sub></td>
					<td><i>c</i><sub>3</sub></td>
				</tr>
				<tr>
					<td><i>a</i><sub>4</sub></td>
					<td><i>b</i><sub>4</sub></td>
					<td><i>c</i><sub>4</sub></td>
				</tr>
				<tr>
					<td><i>a</i><sub>5</sub></td>
					<td><i>b</i><sub>5</sub></td>
					<td><i>c</i><sub>5</sub></td>
				</tr>
				<tr>
					<td><i>a</i><sub>6</sub></td>
					<td><i>b</i><sub>6</sub></td>
					<td><i>c</i><sub>6</sub></td>
				</tr>
				<tr>
					<td><i>a</i><sub>7</sub></td>
					<td><i>b</i><sub>7</sub></td>
					<td><i>c</i><sub>7</sub></td>
				</tr>
				<tr>
					<td><i>a</i><sub>8</sub></td>
					<td><i>b</i><sub>8</sub></td>
					<td><i>c</i><sub>8</sub></td>
				</tr>
			</table>
			</td>
			<td>&nbsp;</td>
			<td valign="top" align="center">
			<table border="1" cellspacing="0">
				<tr>
					<td bgcolor="#FFDEBD"><i>a</i><sub>1</sub></td>
					<td bgcolor="#FFDEBD"><i>b</i><sub>1</sub></td>
					<td bgcolor="#FFDEBD"><i>c</i><sub>1</sub></td>
					<td bgcolor="#C0D8D6"><i>a</i><sub>4</sub></td>
					<td bgcolor="#C0D8D6"><i>b</i><sub>4</sub></td>
					<td bgcolor="#C0D8D6"><i>c</i><sub>4</sub></td>
					<td bgcolor="#CCFFCC"><i>a</i><sub>7</sub></td>
					<td bgcolor="#CCFFCC"><i>b</i><sub>7</sub></td>
					<td bgcolor="#CCFFCC"><i>c</i><sub>7</sub></td>
				</tr>
				<tr>
					<td bgcolor="#FFDEBD"><i>a</i><sub>2</sub></td>
					<td bgcolor="#FFDEBD"><i>b</i><sub>2</sub></td>
					<td bgcolor="#FFDEBD"><i>c</i><sub>2</sub></td>
					<td bgcolor="#C0D8D6"><i>a</i><sub>5</sub></td>
					<td bgcolor="#C0D8D6"><i>b</i><sub>5</sub></td>
					<td bgcolor="#C0D8D6"><i>c</i><sub>5</sub></td>
					<td bgcolor="#CCFFCC"><i>a</i><sub>8</sub></td>
					<td bgcolor="#CCFFCC"><i>b</i><sub>8</sub></td>
					<td bgcolor="#CCFFCC"><i>c</i><sub>8</sub></td>
				</tr>
				<tr>
					<td bgcolor="#FFDEBD"><i>a</i><sub>3</sub></td>
					<td bgcolor="#FFDEBD"><i>b</i><sub>3</sub></td>
					<td bgcolor="#FFDEBD"><i>c</i><sub>3</sub></td>
					<td bgcolor="#C0D8D6"><i>a</i><sub>6</sub></td>
					<td bgcolor="#C0D8D6"><i>b</i><sub>6</sub></td>
					<td bgcolor="#C0D8D6"><i>c</i><sub>6</sub></td>
					<td bgcolor="#CCFFCC">&nbsp;</td>
					<td bgcolor="#CCFFCC">&nbsp;</td>
					<td bgcolor="#CCFFCC">&nbsp;</td>
				</tr>
			</table>
			</td>
		</tr>
	</table>
</blockquote>
<p>The model is flat as a list and contains the immediate descendants of a node 
from the reference model. Note also the model itself does not have means to manipulate 
its content. 
When it is necessary to modify the content, the reference model is dealt with. The columned model will automatically follow the changes made on the 
reference model. This includes translation of the reference model signals into 
ones of the columned model. For example reference model row removal may manifest 
itself as a series of columned model signals like row changing and row deletion. 
Additionally to the standard signals of a tree model the signal <i>root-changed</i> 
is emitted immediately after changing the root of the columned store. This may 
happen, for example, when the root of the columned model is deleted from the 
reference one. That causes it to change to the most nested ancestor node.</p>
<blockquote>
	<p><tt><font color="#0000FF">type </font>Gtk_Columned_Store_Record<font color="#0000FF"> 
	is<br>
&nbsp;&nbsp; new </font>Gtk_Abstract_Model_Record<font color="#0000FF"> with 
	private</font>;<font color="#0000FF"><br>
	type </font>Gtk_Columned_Store<font color="#0000FF"> is<br>
&nbsp;&nbsp; access all </font>Gtk_Columned_Store_Record'Class;</tt></p>
</blockquote>
<p>The following subprograms are defined in the package:</p>
		<blockquote>
<p><tt><font color="#0000FF">function </font>From_Columned<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b>&nbsp; :
<font color="#0000FF">not null access </font>Gtk_Columned_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Iter</b>&nbsp;&nbsp; 
: Gtk_Tree_Iter;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Column</b> 
: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Gtk_Tree_Iter;<font color="#0000FF"><br>
function </font>From_Columned<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b>&nbsp; :
<font color="#0000FF">not null access </font>Gtk_Columned_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Path</b>&nbsp;&nbsp; 
: Gtk_Tree_Path;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Column</b> 
: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Gtk_Tree_Path;</tt></p>
</blockquote>
<p>These functions convert an iterator or path of the columned model to the 
corresponding iterator or path of the reference model. The additional parameter 
is the major column number 1..<i>n</i>, where <i>n</i> is the number of columns 
specified upon model creation in
<a href="#Gtk.Tree_Model.Columned_Store.Gtk_New">Gtk_New</a>. The result is 
Null_Iter or <font color="#0000FF">null</font> path on an error. Note that the 
returned path has to be freed using
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.tree_model.html#L601C14">Path_Free</a>.</p>
<blockquote>
<p><tt><font color="#0000FF">function </font>Get_Column_Height<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b>&nbsp; :
<font color="#0000FF">not null access</font> Gtk_Columned_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Column</b> 
: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Natural;</tt></p>
</blockquote>
<p>This function returns the number of filled rows in the major column <b>Column</b>. 
The result is 0 when <b>Column</b> is greater than the number of major columns.</p>
<blockquote>
<p><tt><font color="#0000FF">function </font>Get_Major_Columns<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b> :
<font color="#0000FF">not null access </font>Gtk_Columned_Store_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Positive;</tt></p>
</blockquote>
<p>This function returns the number of major columns, i.e. the parameter Columns 
as it was specified upon model creation in
<a href="#Gtk.Tree_Model.Columned_Store.Gtk_New">Gtk_New</a> or
<a href="#Gtk.Tree_Model.Columned_Store.Set_Reference">Set_Reference</a>.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Reference<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b> :
<font color="#0000FF">not null access</font> Gtk_Columned_Store_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Gtk_Tree_Model;</tt></p>
</blockquote>
<p>This function returns the reference model.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Reference_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b>&nbsp; :
<font color="#0000FF">not null access</font> Gtk_Columned_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Row</b>&nbsp;&nbsp;&nbsp; 
: Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Column</b> 
: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Gtk_Tree_Iter;</tt></p>
</blockquote>
<p>This function composes an iterator to the reference model row specified by 
its <b>Row</b> and <b>Column</b>. The result is Null_Iter when <b>Row</b> and <b>
Column</b> do not specify a reference model row.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Root<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b> :
<font color="#0000FF">not null access</font> Gtk_Columned_Store_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Gtk_Tree_Iter;</tt></p>
</blockquote>
<p>This function returns an iterator of reference model to the root of the 
derived model. All nodes of the derived model are immediate descendants of.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Root<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b> :
<font color="#0000FF">not null access</font> Gtk_Columned_Store_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Gtk_Tree_Path;</tt></p>
</blockquote>
<p>This function returns the path in reference model to the root of the derived 
model. The result shall be freed using
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.tree_model.html#L601C14">Path_Free</a> if not <font color="#0000FF">null</font>.</p>
		<blockquote>
<p><tt><font color="#0000FF">function </font>Get_Rows<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b>&nbsp; :
<font color="#0000FF">not null access</font> Gtk_Columned_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Filled</b> 
: Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Natural;</tt></p>
</blockquote>
<p>This function returns the number of rows. When the parameter <b>Filled</b> is
<font color="#800000"><i>true</i></font>, only complete rows count. Otherwise 
any does.</p>
<blockquote>
<p><tt><font color="#0000FF">function </font>Get_Row_Width<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b> :
<font color="#0000FF">not null access</font> Gtk_Columned_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Row&nbsp;
</b>&nbsp;: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Natural;</tt></p>
</blockquote>
<p>This function returns the number of filled columns in the row <b>Row</b>. The 
result is 0 when <b>Row</b> is greater than the number of rows.</p>
		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Tree_Model.Columned_Store.Gtk_New">
</a>procedure </font>Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out </font>Gtk_Columned_Store;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Reference</b> : <font color="#0000FF">not null access</font> Gtk_Root_Tree_Model_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Columns</b>&nbsp;&nbsp; : Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Root</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Gtk_Tree_Iter := Null_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>The model is constructed by specifying the reference model, the number of 
columns and the derived model's root (the parameter <b>Root</b>). By default the 
root is one of the reference model. The derived model will contain only 
immediate children on <b>Root</b>.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure </font>Gtk_New (<b>Model</b>&nbsp;: <font color="#0000FF">out </font>Gtk_Columned_Store);</tt></p>
</blockquote>
<p>This variant construct an empty model which can be later bound to a reference 
model using <a href="#Gtk.Tree_Model.Columned_Store.Set_Reference">Set_Reference</a>.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Columned_Store_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Reference</b> : <font color="#0000FF">not null access</font> Gtk_Root_Tree_Model_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Columns</b>&nbsp;&nbsp; : Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Parent</b>&nbsp;&nbsp;&nbsp; : Gtk_Tree_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure</font> Initialize (<b>Model</b> 
: <font color="#0000FF">access</font> Gtk_Columned_Store_Record'Class);</tt></p>
</blockquote>
<p>One of these procedures is to be called by any derived type from its Initialize.</p>
		<blockquote>
<p><tt><font color="#0000FF">function </font>Is_Ancestor<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b> :
<font color="#0000FF">not null access</font> Gtk_Columned_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Iter</b>&nbsp; 
: Gtk_Tree_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;<font color="#0000FF"><br>
function </font>Is_Ancestor<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b> :
<font color="#0000FF">not null access</font> Gtk_Columned_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Path</b>&nbsp; 
: Gtk_Tree_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p>
</blockquote>
<p>These functions return <font color="#800000"><i>true</i></font> if the root 
of the columned model is an ancestor of the iterator or path specified in the 
reference model.</p>
		<blockquote>
<p><tt><font color="#0000FF">function </font>Is_Descendant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b> :
<font color="#0000FF">not null access</font> Gtk_Columned_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Iter</b>&nbsp; 
: Gtk_Tree_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;<font color="#0000FF"><br>
function </font>Is_Descendant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b> :
<font color="#0000FF">not null access</font> Gtk_Columned_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Path</b>&nbsp; 
: Gtk_Tree_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p>
</blockquote>
<p>These functions return <font color="#800000"><i>true</i></font> if the root 
of the columned model is a descendant of the iterator or path in the reference 
model.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> To_Columned<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b> :
<font color="#0000FF">not null access</font> Gtk_Columned_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Iter</b>&nbsp; 
: Gtk_Tree_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Gtk_Tree_Iter;<br>
<font color="#0000FF">function</font> To_Columned<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b> :
<font color="#0000FF">not null access</font> Gtk_Columned_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Path</b>&nbsp; 
: Gtk_Tree_Path<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Gtk_Tree_Path;</tt></p>
</blockquote>
<p>These functions convert an iterator or path of the reference model to the 
corresponding iterator or path of the columned model. The result is Null_Iter or
<font color="#0000FF">null</font> path on an error. Note that the returned path 
has to be freed using
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.tree_model.html#L601C14">Path_Free</a>.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> To_Columned <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b>&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Columned_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Iter</b>&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Gtk_Tree_Iter;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Column</b> : <font color="#0000FF">out</font> Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is a variant of iterator conversion which also yields the 
major column number 1..<i>n</i>, where <i>n</i> is the number of columns 
specified upon model creation in
<a href="#Gtk.Tree_Model.Columned_Store.Gtk_New">Gtk_New</a>.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Null_Reference<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Model</b> :
<font color="#0000FF">not null access</font> Gtk_Columned_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Root_Changed</b> : Boolean := True<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure makes the model empty. An empty model has no reference model 
associated with. The parameter Root_Changed causes <i>root-changed</i> emitted 
when <b>Model</b> there had a reference model. This procedure can be used if the reference model have to undergo massive 
changes you don't want to follow one by one in the columned model. The 
columned model can be detached using this procedure, then changes can be applied 
and, finally the columned model is reattached again using
<a href="#Gtk.Tree_Model.Columned_Store.Set_Reference">Set_Reference</a>.</p>
		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Tree_Model.Columned_Store.Set_Reference">
</a>procedure</font> Set_Reference<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b>&nbsp;&nbsp;&nbsp;&nbsp; :
<font color="#0000FF">not null access</font> Gtk_Columned_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Reference</b> :
<font color="#0000FF">not null access</font> Gtk_Root_Tree_Model_Record'Class;<b><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Columns</b>&nbsp;&nbsp; : Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Root</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Gtk_Tree_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure changes the model, the number of columns and the root. One 
should use this procedure with care, because clients of the columned model might 
be unprepared to the changes in columns number and types. When the root or the 
reference model is indeed changed <i>root-changed</i> is emitted.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Root<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b> :
<font color="#0000FF">not null access</font> Gtk_Columned_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Root</b>&nbsp; 
: Gtk_Tree_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure changes the model root. When the root is indeed changed, <i>
root-changed</i> is emitted.</p>
<h3>2.7. <a name="2.7"></a>Extension model</h3>
<p>The package Gtk.Tree_Model.Extension_Store provides a derived tree model. The 
model extends its reference model by adding new columns to it:</p>
<blockquote>
	<table border="0" cellspacing="0" cellpadding="0">
		<tr>
			<td valign="top" align="center">Reference model,<br>
			columns <i>a</i>, <i>b</i>, <i>c</i><br>
			&nbsp;</td>
			<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </td>
			<td valign="top">Derived model,<br>
			new columns <i>d</i>, <i>e</i></td>
		</tr>
		<tr>
			<td valign="top" align="center">
			<table border="1" cellspacing="0">
				<tr>
					<td><i>a</i><sub>1</sub></td>
					<td><i>b</i><sub>1</sub></td>
					<td><i>c</i><sub>1</sub></td>
				</tr>
				<tr>
					<td><i>a</i><sub>2</sub></td>
					<td><i>b</i><sub>2</sub></td>
					<td><i>c</i><sub>2</sub></td>
				</tr>
				<tr>
					<td><i>a</i><sub>3</sub></td>
					<td><i>b</i><sub>3</sub></td>
					<td><i>c</i><sub>3</sub></td>
				</tr>
				<tr>
					<td><i>a</i><sub>4</sub></td>
					<td><i>b</i><sub>4</sub></td>
					<td><i>c</i><sub>4</sub></td>
				</tr>
				</table>
			</td>
			<td>&nbsp;</td>
			<td valign="top" align="center">
			<table border="1" cellspacing="0">
				<tr>
					<td><i>a</i><sub>1</sub></td>
					<td><i>b</i><sub>1</sub></td>
					<td><i>c</i><sub>1</sub></td>
					<td bgcolor="#CCFFCC"><i>d</i><sub>1</sub></td>
					<td bgcolor="#CCFFCC"><i>e</i><sub>1</sub></td>
				</tr>
				<tr>
					<td><i>a</i><sub>2</sub></td>
					<td><i>b</i><sub>2</sub></td>
					<td><i>c</i><sub>2</sub></td>
					<td bgcolor="#CCFFCC"><i>d</i><sub>2</sub></td>
					<td bgcolor="#CCFFCC"><i>e</i><sub>2</sub></td>
				</tr>
				<tr>
					<td><i>a</i><sub>3</sub></td>
					<td><i>b</i><sub>3</sub></td>
					<td><i>c</i><sub>3</sub></td>
					<td bgcolor="#CCFFCC"><i>d</i><sub>3</sub></td>
					<td bgcolor="#CCFFCC"><i>e</i><sub>3</sub></td>
					</tr>
				<tr>
					<td><i>a</i><sub>4</sub></td>
					<td><i>b</i><sub>4</sub></td>
					<td><i>c</i><sub>4</sub></td>
					<td bgcolor="#CCFFCC"><i>d</i><sub>4</sub></td>
					<td bgcolor="#CCFFCC"><i>e</i><sub>4</sub></td>
				</tr>
			</table>
			</td>
		</tr>
	</table>
</blockquote>
<p>The reference 
model itself is not changed, it is the derived model which keeps new columns 
data. It 
is possible both to derive multiple extension models adding different columns to the same reference model, 
as well as to use an extension model as a reference one with adding 
new columns to it. Internally the derived model is a tree store 
containing new columns. The extended model does not have its own row insertion and 
deletion operations. Instead of this the rows are manipulated in the reference model. The 
effect of these operations mirrors on all extended models of. When the reference 
model rows get inserted, their values in the extended columns can be set using
<a href="#Gtk.Tree_Model.Extension_Store.Set_Extension">Set_Extension</a>. For 
this the reference model iterator should be converted to an iterator of the 
extension model with <a href="#Gtk.Tree_Model.Extension_Store.To_Extension">
To_Extension</a>. When the reference model rows get deleted, the corresponding 
cells of the extension model as removed automatically. This model translates the reference model signals into 
ones of the extension model. Thus handlers of <i>row-changed</i>, <i>
row-inserted</i>, <i>row-deleted</i> etc can be directly used on the extension 
model.</p>
<blockquote>
	<p><tt><font color="#0000FF">type </font>Gtk_Extension_Store_Record<font color="#0000FF"> 
	is<br>
&nbsp;&nbsp; new </font>Gtk_Abstract_Model_Record<font color="#0000FF"> with 
	private</font>;<font color="#0000FF"><br>
	type </font>Gtk_Extension_Store<font color="#0000FF"> is<br>
&nbsp;&nbsp; access all </font>Gtk_Extension_Store_Record'Class;</tt></p>
</blockquote>
<p>The following subprograms are defined in the package:</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure </font>Changed<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b> :
	<font color="#0000FF">not null access </font>Gtk_Extension_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Path</b>&nbsp; 
	: Gtk_Tree_Path;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Iter</b>&nbsp; 
	: Gtk_Tree_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called upon row change in the reference model. An 
implementation can override this procedure to modify extension columns using 
an appropriate call to
<a href="#Gtk.Tree_Model.Extension_Store.Set_Extension">Set_Extension</a>. 
Alternatively it can handle <i>row-changed</i> signal which the provided 
implementation of this procedure emits. The parameters <b>Path</b> and <b>Iter</b> 
identify the row in the extension model.</p>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Gtk.Tree_Model.Extension_Store.Deleted"></a>procedure </font>
	Deleted<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b> :
	<font color="#0000FF">not null access </font>Gtk_Extension_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>&nbsp;Path</b>&nbsp; 
	: Gtk_Tree_Path<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called when a reference model row has been deleted. The 
parameter Path is a (<b>now invalid</b>) path to the deleted row in the 
extension model. It cannot be used anymore. The default implementation emits the signal <i>
row-deleted</i>. When overriding this procedure carefully consider calling this 
one from there.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure </font>Deleting<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b> :
	<font color="#0000FF">not null access </font>Gtk_Extension_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>&nbsp;Path</b>&nbsp; 
	: Gtk_Tree_Path;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Iter</b>&nbsp; 
	: Gtk_Tree_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called upon row deletion. Differently to 
<a href="#Gtk.Tree_Model.Extension_Store.Deleted">Delete</a> it is called just before deleting the extension row. An 
implementation shall not modify either the reference or the extension model 
here. The parameters <b>Path</b> and <b>Iter</b> identify the row being deleted 
in the extension model. Note that they cannot be converted to the reference model or used 
to access it in any other way, because the corresponding row in it is already deleted 
there. Also at this point the extension store and its reference model are 
unsynchronized so it makes usually no sense to access the reference model 
anyway. The primary objective of this procedure is to 
save the data of the extension columns upon deletion. The default implementation 
does nothing.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> From_Extension<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b> :
	<font color="#0000FF">not null access</font> Gtk_Extension_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Iter</b>&nbsp; 
	: Gtk_Tree_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Gtk_Tree_Iter;<br>
	<font color="#0000FF">function</font> From_Extension<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b> :
	<font color="#0000FF">not null access</font> Gtk_Extension_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Path</b>&nbsp; 
	: Gtk_Tree_Path<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Gtk_Tree_Path;</tt></p>
</blockquote>
<p>These functions convert an iterator or path of the extension model to an 
iterator or path in the reference model. Note that the 
returned path has to be freed using
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.tree_model.html#L601C14">Path_Free</a>.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Extension_Types<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b> :
	<font color="#0000FF">not null access</font> Gtk_Extension_Store_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> GType_Array;</tt></p>
</blockquote>
<p>This function returns the types of the extension columns. When the result is 
not empty, its bounds are set so that the array indices correspond to zero-based 
column numbers (as in tree model).</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Reference<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b> :
	<font color="#0000FF">not null access</font> Gtk_Extension_Store_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Gtk_Tree_Model;</tt></p>
</blockquote>
<p>This function returns the reference model.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">out</font> Gtk_Extension_Store;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Reference</b> : <font color="#0000FF">not null access</font> 
	Gtk_Root_Tree_Model_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Types</b>&nbsp;&nbsp;&nbsp;&nbsp; : GType_Array<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure creates a new extension model. The result is returned via the 
parameter <b>Model</b>. The parameter <b>Reference</b> is the reference model. 
The parameter <b>Types</b> is an array of the extension columns types. For each 
element of the array a column of the corresponding type is added.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b>&nbsp;: <font color="#0000FF">out</font> Gtk_Extension_Store;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Types</b>&nbsp;: GType_Array<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This variant creates an empty model. It can get a reference model assigned 
later using <a href="#Gtk.Tree_Model.Extension_Store.Set_Reference">
Set_Reference</a>.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">not null access</font> Gtk_Extension_Store_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Reference</b> : <font color="#0000FF">not null access</font> 
	Gtk_Root_Tree_Model_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Types</b>&nbsp;&nbsp;&nbsp;&nbsp; : GType_Array<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
	procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b>&nbsp;: <font color="#0000FF">
	not null access</font> Gtk_Extension_Store_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Types</b>&nbsp;: GType_Array<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>One of these procedures has to be called by any derived type from its Initialize.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure </font>Inserted<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b> :
	<font color="#0000FF">not null access </font>Gtk_Extension_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Path</b>&nbsp; 
	: Gtk_Tree_Path;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Iter</b>&nbsp; 
	: Gtk_Tree_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called upon row insertion in the reference model. An 
implementation can override this procedure to initialize extension columns using 
an appropriate call to
<a href="#Gtk.Tree_Model.Extension_Store.Set_Extension">Set_Extension</a>. 
Alternatively it can handle <i>row-inserted</i> signal which the provided 
implementation of this procedure emits. The parameters <b>Path</b> and <b>Iter</b> 
identify the row in the extension model. When overriding this procedure 
carefully consider calling this one from there.</p>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Gtk.Tree_Model.Extension_Store.Set_Extension"></a>procedure</font> 
	Set_Extension<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b>&nbsp; 
	: <font color="#0000FF">not null access</font> Gtk_Extension_Store_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Iter</b>&nbsp;&nbsp; 
	: Gtk_Tree_Iter;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Column</b> : Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Value</b>&nbsp; : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
	<font color="#0000FF">procedure</font> Set_Extension<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b>&nbsp; 
	: <font color="#0000FF">not null access</font> Gtk_Extension_Store_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Iter</b>&nbsp;&nbsp; 
	: Gtk_Tree_Iter;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Column</b> : Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Value</b>&nbsp; : GInt<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
	<font color="#0000FF">procedure</font> Set_Extension<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b>&nbsp; 
	: <font color="#0000FF">not null access</font> Gtk_Extension_Store_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Iter</b>&nbsp;&nbsp; 
	: Gtk_Tree_Iter;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Column</b> : Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Value</b>&nbsp; : UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
	<font color="#0000FF">procedure</font> Set_Extension<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b>&nbsp; 
	: <font color="#0000FF">not null access</font> Gtk_Extension_Store_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Iter</b>&nbsp;&nbsp; 
	: Gtk_Tree_Iter;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Column</b> : Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Value</b>&nbsp; : GValue<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures are used to modify the extended model cells. The parameter
<b>Iter</b> is an extension store iterator to the row of the cell. The parameter
<b>Column</b> is the number of the extension column of the cell. The parameter
<b>Value</b> is the value to set. Note that there is no universal way to change 
the reference model cells. That depends on the reference model type. When the 
type is known, the the reference model cell can be modified using the 
corresponding operations of the type with the iterator converted to the 
reference model iterator (see
<a href="#Gtk.Tree_Model.Extension_Store.To_Extension">To_Extension</a>).</p>
<blockquote>
	<p><tt>
	<font color="#0000FF">procedure</font> Set_Null_Reference<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b> :
	<font color="#0000FF">not null access</font> Gtk_Extension_Store_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets the reference model empty. This can be used to before 
undertaking massive changes in the reference model. First the reference model is 
set to null, then changes are applied and finally
<a href="#Gtk.Tree_Model.Extension_Store.Set_Reference">Set_Reference</a> is 
used to assign the reference model back.</p>
<blockquote>
	<p><tt>
	<font color="#0000FF">
	<a name="Gtk.Tree_Model.Extension_Store.Set_Reference"></a>procedure</font> 
	Set_Reference<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">not null access</font> Gtk_Extension_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Reference</b> : <font color="#0000FF">not null access</font> 
	Gtk_Root_Tree_Model_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure changes the reference model. The side effect of this operation 
is that the extension columns become empty. The new reference model should have 
exactly same types of columns as its predecessor, because clients using the 
model might not anticipate column number and types change.</p>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Gtk.Tree_Model.Extension_Store.To_Extension"></a>function</font> 
	To_Extension<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b> :
	<font color="#0000FF">not null access</font> Gtk_Extension_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Iter</b>&nbsp; 
	: Gtk_Tree_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Gtk_Tree_Iter;<br>
	<font color="#0000FF">function</font> To_Extension<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b> :
	<font color="#0000FF">not null access</font> Gtk_Extension_Store_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Path</b>&nbsp; 
	: Gtk_Tree_Path<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Gtk_Tree_Path;</tt></p>
</blockquote>
<p>These functions convert an iterator or path of the reference model to an 
iterator or path to the corresponding row in the extension model. Note that the 
returned path has to be freed using
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.tree_model.html#L601C14">Path_Free</a>.</p>
<h3>2.8. <a name="2.8"></a>Abstract browser model and widgets</h3>
<p>The package Gtk.Abstract_Browser provides an abstract model of a caching 
tree browsing model. The model contains directories of items physically stored 
outside the model. Browsing the items is 
accomplished through primitive operations to interface an external items 
store, such as a file system for instance or a database. The model caches items as necessary, 
transparently to the tree views rendering the model. The policy of caching can vary and is controlled by 
concrete implementations of the model. A typical application example is a model of a file 
system. A tree view widget rendering the model will cause the file system 
directories cached when expanded in the tree view.</p>
<p>The package also provides two specialized tree view widgets for rendering the directories tree 
and the items of a directory.</p>
<h4>2.8.1. <a name="2.8.1"></a>Abstract caching store</h4>
<p>The type of the caching store is:</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Gtk.Abstract_Browser.Gtk_Abstract_Directory"></a>type</font> Gtk_Abstract_Directory_Record
	<font color="#0000FF">is<br>
&nbsp;&nbsp; abstract new </font>Gtk_Tree_Model_Record<font color="#0000FF"> 
	with private</font>;<br>
	<font color="#0000FF">type</font> Gtk_Abstract_Directory
	<font color="#0000FF">is<br>
&nbsp;&nbsp; access all </font>Gtk_Abstract_Directory_Record'Class;</tt></p>
</blockquote>
<p>It is a tree model with the abstract primitive operations implemented in 
order to access the items of. The items are uniquely identified by their full 
names globally or else by their simple names within a directory. The data types 
for the item names are;</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Gtk.Abstract_Browser.Item_Name"></a>type</font> Item_Name <font color="#0000FF">is 
	new </font>UTF8_String;<br>
	<font color="#0000FF"><a name="Gtk.Abstract_Browser.Item_Path"></a>type</font> Item_Path <font color="#0000FF">is new
	</font>UTF8_String;</tt></p>
</blockquote>
<p>The subprograms of the package do not interpret the content of objects of 
these types, they are transparently passed as is. The following requirements are 
imposed on paths and names:</p>
<ul>
	<li>A path uniquely specifies an item (globally);</li>
	<li>A name uniquely specifies an item within its directory;</li>
	<li>The item name can be obtained from its path. Though it is <i>not</i> required that 
	name were a physical cart the path. The way it is obtained from the path is 
	up to implementation.</li>
	<li>A path can be constructed from the item name and its containing 
	directory path.</li>
</ul>
<blockquote>
	<p><tt><font color="#0000FF">type</font> Item_Type<font color="#0000FF"> is 
	new </font>UTF8_String;</tt></p>
</blockquote>
<p>This type characterizes an item. It can be the name of a stock image used to 
indicate the item type, as a directory, executable file etc.</p>
<blockquote>
	<p><tt><font color="#0000FF">type</font> Directory_Item<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Name_Length : Natural;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Kind_Length : Natural<br>
&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;is<br>
	record</font><br>
&nbsp;&nbsp; Policy&nbsp;&nbsp;&nbsp; : Caching_Policy;<br>
&nbsp;&nbsp; Directory : Boolean;<br>
&nbsp;&nbsp; Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Item_Name (1..Name_Length);<br>
&nbsp;&nbsp; Kind&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Item_Type (1..Kind_Length);<br>
	<font color="#0000FF">end record</font>;</tt></p>
</blockquote>
<p>This type is used for querying items. Its fields are as follows:</p>
<ul>
	<li><i>Policy</i> controls the caching policy applied to the item;</li>
	<li><i>Directory</i> is true when item is a directory;</li>
	<li><i>Name</i> is the simple name of the item;</li>
	<li><i>Kind</i> is the item type.</li>
</ul>
<p>The model has three columns:</p>
<ol>
	<li>GType_String is Item_Type converted to UTF8_String;</li>
	<li>GType_String is Item_Name converted to UTF8_String;</li>
	<li>GType_Int is in 0..2 when the item is 
	a directory and 3 otherwise.</li>
</ol>
<p>It contain only directory items. So when viewed using a tree view it will 
show the cached items directory tree. An unfiltered tree model of all cached items can be obtained 
from the model using <a href="#Gtk.Abstract_Browser.Get_Tree_Store">
Get_Tree_Store</a>. That model contains all cached items and the same columns as 
Gtk_Abstract_Directory. Both represent different view of the same cache.</p>
<blockquote>
	<p><tt>Abstract_Directory_Class_Name : <font color="#0000FF">constant</font> 
	String :=<br>
&nbsp;&nbsp; &quot;<font color="#FF0000">GtkAbstractDirectory</font>&quot;;</tt></p>
</blockquote>
<p>This string constant defines the <a href="http://www.gtk.org">GTK+</a> 
	class name of the model.</p>
<blockquote>
	<p><tt><font color="#0000FF">type</font> Icon_Type is (Stock_ID, GIcon, 
	Pixbuf, Themed);<br>
	<font color="#0000FF">type</font> Icon_Data (Kind : Icon_Type; Length : 
	Natural) <font color="#0000FF">is record<br>
&nbsp;&nbsp; case</font> Kind <font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when</font> Stock_ID | Themed =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Name : String (1..Length);<br>
	<font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when</font> GIcon =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Icon : GObject;<br>
	<font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when</font> Pixbuf =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Image : Gdk_Pixbuf;<br>
	<font color="#0000FF">&nbsp;&nbsp;&nbsp; end case</font>;<br>
	<font color="#0000FF">end record</font>;</tt></p>
</blockquote>
<p>This type is used to return icons of items. The discriminant Kind defines the 
icon type:</p>
<ul>
	<li><i>Stock_ID</i> specifies an stock icon by its ID (the field Name);</li>
	<li><i>GIcon</i> is an icon object (<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/glib.object.html#L78C14">Unref</a>
	must be used to free it);</li>
	<li><i>Pixbuf</i> is an image object (<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/glib.object.html#L78C14">Unref</a>
	must be used to free it);</li>
	<li><i>Themed</i> specifies a themed icon by its name.</li>
</ul>
<p><u><b>Abstract primitive operations</b></u>. The following abstract primitive operations have to be implemented by a 
derived type:</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Gtk.Abstract_Browser.Compare"></a>function</font> Compare<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Store</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">not null access</font> Gtk_Abstract_Directory_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Directory</b> 
	: Item_Path;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>A</b>, <b>
	B </b>&nbsp;&nbsp;&nbsp;&nbsp; : Directory_Item;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>By_Name</b>&nbsp;&nbsp; 
	: Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Row_Order <font color="#0000FF">is abstract</font>;</tt></p>
</blockquote>
<p>This function is used to sort items of a directory. The parameter <b>
Directory</b> is the path of the directory containing the items <b>A</b> and <b>
B</b> being compared. The parameter <b>By_Name</b> when true instructs to ignore 
anything but the item names. The result has the type <a href="#Gtk.Missed.Row_Order">
Row_Order</a>.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Directory<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Store</b> :
	<font color="#0000FF">not null access</font> Gtk_Abstract_Directory_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Item</b>&nbsp; 
	: Item_Path<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Item_Path <font color="#0000FF">is abstract</font>;</tt></p>
</blockquote>
<p>This function obtains the containing directory path from <b>Item</b>. 
Name_Error is propagated when <b>Item</b> has no parent.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Name<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Store</b> :
	<font color="#0000FF">not null access</font> Gtk_Abstract_Directory_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Item</b>&nbsp; 
	: Item_Path<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Item_Name<font color="#0000FF"> is abstract</font>;</tt></p>
</blockquote>
<p>This function obtains the item name by its path <b>Item</b>.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Path<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Store</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">not null access</font> Gtk_Abstract_Directory_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Directory</b> 
	: Item_Path;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Item_Name<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Item_Path <font color="#0000FF">is abstract</font>;</tt></p>
</blockquote>
<p>This function composes a path from the directory path and the item name in 
the directory.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Progress<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Store</b>&nbsp;&nbsp;&nbsp;&nbsp; :
	<font color="#0000FF">not null access</font> Gtk_Abstract_Directory_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Directory</b> 
	: Item_Path;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	State</b>&nbsp;&nbsp;&nbsp;&nbsp; : GDoubleRead<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called to indicate the progress of a caching operation. <b>
Directory</b> is the path of the folder being cached. <b>State</b> is the 
overall progress. The 
default operation emits the signal <i>progress</i>. Note that the procedure is 
no called to reflect every change. Too frequent occurrences are filtered out. 
however it is always called when <b>State</b> reaches 1.0.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Gtk.Abstract_Browser.Read"></a>function</font> Read<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Store</b> :
	<font color="#0000FF">not null access</font> Gtk_Abstract_Directory_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Directory_Item <font color="#0000FF">is abstract</font>;</tt></p>
</blockquote>
<p>This function returns the next item of the directory for which 
<a href="#Gtk.Abstract_Browser.Rewind">Rewind</a> was 
called before. The result is the item found. The internal cursor is advanced to 
the item. When an implementation detects an error, it has several options to 
handle this. It can</p>
<ul>
	<li>raise End_Error and ignore the rest of the directory;</li>
	<li>return a special item and raise End_Error by the next call;</li>
	<li>raise Data_Error with the effect of removing the directory content from 
	the cache.</li>
</ul>
<p>Giving any error messages is the responsibility of 
<a href="#Gtk.Abstract_Browser.Read">Read</a> not the caller. The 
procedures from the package never call <a href="#Gtk.Abstract_Browser.Read">Read</a> without calling 
<a href="#Gtk.Abstract_Browser.Rewind">Rewind</a> before it. It 
is also never called so that several directories could be browsed 
simultaneously. So an application need not to keep any history for more than one 
directory search. The field Policy of the result returned by Read controls 
caching of directories:</p>
<ul>
	<li><i>Cache_Ahead</i> immediately caches the directory. If all directories 
	of a path have this policy the tree along this path will be cached in 
	advance. This policy is used when the directory tree becomes available once, 
	or when it would make no sense to postone its caching;</li>
	<li><i>Cache_Expanded</i> caches the directory first when its parent get 
	expanded. This ensures that the view of any item is always consistent. This 
	policy is used for directories which are always browsable;</li>
	<li><i>Cache_Never</i> instructs not to cache a directory until its children 
	get visible. This policy can be used for the directories which caching might 
	be expensive or else not always possible. An attempt to do it will be 
	postponed until the user would try to browse the tree item corresponding to 
	the directory.</li>
</ul>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Gtk.Abstract_Browser.Rewind"></a>function</font> Rewind<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Store</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">not null access</font> Gtk_Abstract_Directory_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Directory</b> 
	: Item_Path<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Directory_Item <font color="#0000FF">is abstract</font>;</tt></p>
</blockquote>
<p>This function is called before <a href="#Gtk.Abstract_Browser.Read">Read</a> to initiate a new directory search. An 
implementation typically prepares iteration of the directory specified by its 
path <b>Directory</b>. It is guaranteed that no nested or multiple iterations 
happen. When the parameter <b>Directory</b> is an empty string, the cursor has 
to be set to the first root item (of the root directory). Otherwise it is set to 
the first item in the directory. The cursor is implementation maintained. The 
function returns the new state of the directory being iterated. (The first item 
of will be returned by the consequent <a href="#Gtk.Abstract_Browser.Read">Read</a>.) Usually the returned state does not 
change and the implementation can return the predefined constant:</p>
<blockquote>
	<p><tt><a name="Gtk.Abstract_Browser.Directory_Entered"></a> 
	Directory_Entered : <font color="#0000FF">constant</font> Directory_Item := 
	...</tt></p>
</blockquote>
<p>But in some cases an implementation might wish to change the directory 
type in order to show a different icon for a mounted volume, for example. In 
such cases the 
result's policy is interpreted as follows:</p>
<ul>
	<li><i>Cache_Ahead</i> indicates that the directory will be cached and its 
	state does not change. This is the most frequently used policy. All other 
	fields are ignored. One can also use the constant value 
	<a href="#Gtk.Abstract_Browser.Directory_Entered">Directory_Entered</a> 
	for this purpose;</li>
	<li><i>Cache_Expanded</i> is like above, but the directory name and type 
	replace the values in the cache. The field <i>Directory</i> is ignored;</li>
	<li><i>Cache_Never</i> prevents of the directory iteration. The directory 
	name and type replace the current ones in the cache. When the discriminant
	<i>Directory</i> is changed to <font color="#800000"><i>false</i></font>, 
	the directory is replaced by an item in the cache.</li>
</ul>
<p>When access to the directory requires credentials or some user action, then 
<a href="#Gtk.Abstract_Browser.Rewind">Rewind</a> is a place to ask the user for. When such request fails, due to 
cancellation, for example, then Cache_Never can be returned. When Data_Error 
exception is propagated out of <a href="#Gtk.Abstract_Browser.Rewind">Rewind</a>, the corresponding item is removed from 
the cache.</p>
<p><u><b>Primitive operations</b></u>:</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Finalize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Store</b> :
	<font color="#0000FF">not null access</font> Gtk_Abstract_Directory_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This subprogram has to be called upon destruction when overridden.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Cached<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Store</b> :
	<font color="#0000FF">not null access</font> Gtk_Abstract_Directory_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Path</b>&nbsp; 
	: Item_Path<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Directory_Item;</tt></p>
</blockquote>
<p>This function returns description of an already cached item by its path. 
Constraint_Error is propagated when <b>Path</b> does not specify a cached item. 
Name_Error is propagated when <b>Path</b> is illegal.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Gtk.Abstract_Browser.Get_Tree_Store">
	</a>function</font> Get_Tree_Store<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Store</b> :
	<font color="#0000FF">not null access</font> Gtk_Abstract_Directory_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Gtk_Tree_Store;</tt></p>
</blockquote>
<p>This function returns a tree store of the cached directory items. It contains 
all items of, both directories and leaf items. The model can be modified in 
order to add and remove items, though a safer way to do it is to use 
<a href="#Gtk.Abstract_Browser.Created">Created</a>, 
<a href="#Gtk.Abstract_Browser.Deleted">Deleted</a> and Refresh calls. This model is referenced by the model <b>Store</b> 
and thus it should not be referenced or unreferenced using Ref or Unref.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Read_Error<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Store</b>&nbsp;: <font color="#0000FF">access</font> Gtk_Abstract_Directory_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Text</b>&nbsp; 
	: UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Path</b>&nbsp; 
	: Item_Path<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure emits <i>read-error</i> signal.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Rewind_Error<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Store</b>&nbsp;: <font color="#0000FF">
	not null access</font> Gtk_Abstract_Directory_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Text</b>&nbsp; 
	: UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Path</b>&nbsp; 
	: Item_Path<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure emits <i>rewind-error</i> signal.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Trace<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Store</b> :
	<font color="#0000FF">not null access</font> Gtk_Abstract_Directory_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Depth</b> : Natural;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Text</b>&nbsp; 
	: String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called to trace certain actions. The parameter <b>Depth</b> 
is the depth of recursion, which can be used to decorate <b>Text</b>. The 
default implementation calls to <a href="#Gtk.Main.Router.Trace">Trace</a>.</p>
<p><u><b>Class-wide operations</b></u>:</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Cache<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Store</b> :
	<font color="#0000FF">not null access</font> Gtk_Abstract_Directory_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Item</b>&nbsp; 
	: Item_Path<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure&nbsp; caches the path to the item specified by its path. The 
directory structure is queried as necessary and cached. The root directory full 
name is empty string.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Gtk.Abstract_Browser.Changed"></a>procedure</font> Changed<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Store</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">not null access</font> Gtk_Abstract_Directory_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Directory</b> : Item_Path<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure synchronizes the cache with the directory. The parameter <b>
Directory</b> is the path of the directory changed. This procedure is used when 
the application gets aware of some, usually massive changes in the directory 
structure made from outside. In that case it uses
<a href="#Gtk.Abstract_Browser.Changed">Changed</a> to resynchronize the store 
with it.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Gtk.Abstract_Browser.Created"></a>procedure</font> Created<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Store</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">not null access</font> Gtk_Abstract_Directory_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Directory</b> : Item_Path;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Item</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Directory_Item<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called to synchronize the store when a new item gets 
inserted from outside. The parameter <b>Item</b> describes the item created. The 
parameter <b>Directory</b> is the path of the directory of. For the root 
directory items the parameter is an empty string. An alternative to 
<a href="#Gtk.Abstract_Browser.Created">Created</a> is 
refreshing the cache at the directory containing the inserted item (see 
<a href="#Gtk.Abstract_Browser.Changed">Changed</a>). 
The latter might be preferable upon massive items insertions.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Gtk.Abstract_Browser.Deleted"></a>procedure</font> Deleted<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Store</b> :
	<font color="#0000FF">not null access</font> Gtk_Abstract_Directory_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Item</b>&nbsp; 
	: Item_Path<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called to synchronize the store when an item gets deleted 
from outside. <b>Item</b> is the path of the deleted item. The following code 
snippet illustrates moving an item from one directory to another with cache 
notification:</p>
<blockquote>
	<tt><font color="#0000FF">declare</font><br>
&nbsp;&nbsp; Old_Path : Item_Path := Get_Path (Store, Old_Directory, Name);<br>
&nbsp;&nbsp; Item&nbsp;&nbsp;&nbsp;&nbsp; : Directory_Item := Get_Cached (Store, 
	Old_Path);<br>
	<font color="#0000FF">begin</font><br>
&nbsp;&nbsp; ... <font color="#008000">-- Renaming the item using some external 
	means</font><br>
&nbsp;&nbsp; Deleted (Store, Old_Path);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	<font color="#008000">-- Removed at old directory</font><br>
&nbsp;&nbsp; Created (Store, New_Directory, Item); <font color="#008000">-- 
	Added at the new directory</font><br>
	<font color="#0000FF">end</font>;</tt></blockquote>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Depth<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Store</b> :
	<font color="#0000FF">not null access</font> Gtk_Abstract_Directory_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Natural;</tt></p>
</blockquote>
<p>This function returns depth of nesting calls while caching is active.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Tracing<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Store</b> :
	<font color="#0000FF">not null access</font> Gtk_Abstract_Directory_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Traced_Actions;</tt></p>
</blockquote>
<p>This function returns the current state of tracing.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Initialize<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
	<b>Store</b> :
	<font color="#0000FF">not null access</font> Gtk_Abstract_Directory_Record'Class<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is to called upon initialization by the derived type upon 
object construction.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Gtk.Abstract_Browser.Renamed_Store"></a>procedure</font> 
	Renamed<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Store</b>&nbsp;&nbsp;&nbsp; :
	<font color="#0000FF">not null access</font> Gtk_Abstract_Directory_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Old_Path</b> : Item_Path;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	New_Name</b> : Item_Name<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called to synchronize the store when an item has been 
renamed outside while it stays in the same directory. The parameter <b>Old_Path</b> 
identifies the item. <b>New_Nam</b> is the new name of.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Set_Tracing<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Store</b>&nbsp;&nbsp; 
	: <font color="#0000FF">not null access</font> Gtk_Abstract_Directory_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Tracing</b> : Traced_Actions<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure changes tracing status. The parameter <b>Tracing</b> defines 
which actions need to be traced.</p>
<p><u><b>Signals</b></u>. There are additional to standard tree model 
signals which Gtk_Abstract_Disrectory can emit:</p>
<ul>
	<li><i>item-inserted</i> is emitted when an item has been added to the model. The 
	first parameter is an unfiltered iterator to the inserted row, the second 
	parameter is the path to the row;</li>
	<li><i>item-renamed</i> is emitted when an item has been renamed. The first 
	parameter is an unfiltered iterator to the row of the item. The second 
	parameter is the old item name;</li>
	<li><i>item-deleted</i> is emitted when an item has been deleted. The first 
	parameter is the full path of deleted item;</li>
	<li><i>item-deleting</i> is emitted before item deletion. The first 
	parameter is an unfiltered iterator to the row of the item, the second 
	parameter is the path to the row;</li>
	<li><i>progress</i> is emitted to indicate progress of a caching operation. 
	The first parameter is the path to the folder being cached. The second parameter is GType_Double is a value in range 0.0..1.0;</li>
	<li><i>read-error</i> is emitted when <a href="#Gtk.Abstract_Browser.Read">
	Read</a> propagates an exception. The behavior of the model is that the 
	corresponding directory item is not cached and the exception is handled. The 
	handler emits this signal with the first string parameter (GType_String) 
	containing the message text and the second string parameter containing the 
	path of the directory being read. The signal handler may for instance show 
	the message in a messages console;</li>
	<li><i>refreshed</i> is emitted when an iterator of the store has been 
	refreshed. The parameter is the path in the store that was refreshed (GType_String);</li>
	<li><i>rewind-error</i> is emitted when 
	<a href="#Gtk.Abstract_Browser.Rewind">Rewind</a> propagates an exception. 
	The exception handler removes the directory from the cache and emits the 
	signal with the exception message and the directory path as the first 
	parameter and second parameters correspondingly.</li>
</ul>
<h4>2.8.2. <a name="2.8.2"></a>Directory tree view</h4>
<p>The package Gtk.Abstract_Browser defines the type of a specialized tree view 
widget for indication of the directory tree of a 
<a href="#Gtk.Abstract_Browser.Gtk_Abstract_Directory">Gtk_Abstract_Directory</a> 
store:</p>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Gtk.Abstract_Browser.Gtk_Directory_Tree_View"></a>type</font> Gtk_Directory_Tree_View_Record<font color="#0000FF"> 
	is<br>
&nbsp;&nbsp; new </font>Gtk_Tree_View_Record <font color="#0000FF">with private</font>;<br>
	<font color="#0000FF">type</font> Gtk_Directory_Tree_View
	<font color="#0000FF">is<br>
&nbsp;&nbsp; access all </font>Gtk_Directory_Tree_View_Record'Class;</tt></p>
</blockquote>
<p>The tree view filters shows only directories. It has single selection mode. 
The following operations are defined:</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Cache<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">not null access</font> Gtk_Directory_Tree_View_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Gtk_Abstract_Directory;</tt></p>
</blockquote>
<p>This function returns the
<a href="#Gtk.Abstract_Browser.Gtk_Abstract_Directory">Gtk_Abstract_Directory</a> 
object used with the directory tree view.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Current_Directory<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">not null access</font> Gtk_Directory_Tree_View_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Item_Path;</tt></p>
</blockquote>
<p>This function returns the path of the directory currently selected in the 
tree view. Name_Error is propagated when there is no directory selected.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Icon<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">not null access</font> Gtk_Directory_Tree_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Kind</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Item_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Expanded</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: Boolean;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Has_Children</b> : Boolean;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Topmost</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Icon_Data;</tt></p>
</blockquote>
<p>This function is called to obtain the icon rendered for a 
directory. The parameter <b>Kind</b> is the type of the directory as it was 
returned by <a href="#Gtk.Abstract_Browser.Read">Read</a>. The parameter <b>
Expanded</b> is <i> <font color="#800000">true</font></i> if the directory is currently 
expanded. The parameter <b>Has_Children</b> is <font color="#800000"><i>true</i></font> 
if it has children items in the cache. When it is not, then normally this 
indicates that the directory is not readable. <b>Topmost</b> is <font color="#800000"><i>true</i></font> 
when the directory is a root. The default implementation returns 
stock ID <i>gtk-stop</i> when <i>Has_Children</i> is <i><font color="#800000">
false</font></i>. Otherwise it returns the 
value of <b>Kind</b>&nbsp;unless <b>Expanded</b> is <i>
<font color="#800000">true</font></i> and <b>
Kind</b> is <i>gtk-directory</i>. In this latter case it returns <i>gtk-open</i>.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Name<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">not null access</font> Gtk_Directory_Tree_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Item_Name;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Kind</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Item_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Expanded</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: Boolean;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Has_Children</b> : Boolean;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Topmost</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Item_Name;</tt></p>
</blockquote>
<p>This function is called to obtain the name rendered for a 
directory. The parameter Name is the directory name. The parameter <b>Kind</b> is the type of the directory as it was 
returned by <a href="#Gtk.Abstract_Browser.Read">Read</a>. The parameter <b>
Expanded</b> is <i> <font color="#800000">true</font></i> if the directory is currently 
expanded. The parameter <b>Has_Children</b> is <font color="#800000"><i>true</i></font> 
if it has children items in the cache. When it is not, then normally this 
indicates that the directory is not readable. The parameter Topmost is true when 
the directory is a root. The default implementation returns 
<b>Name</b>.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp; 
	: <font color="#0000FF">out</font> Gtk_Directory_Tree_View;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Store</b>&nbsp;&nbsp;&nbsp; : <font color="#0000FF">not null access</font> 
	Gtk_Abstract_Directory_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Selected</b> : Item_Path := &quot;&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure creates the widget. The parameter <b>Store</b> is the
<a href="#Gtk.Abstract_Browser.Gtk_Abstract_Directory">Gtk_Abstract_Directory</a> 
object indicated by the widget. The parameter <b>Selected</b> when not empty is 
the path of the directory to select. The directory tree is expanded as much as 
possibly in order to make selection. When <b>Selected</b> does not indicate an 
existing directory, then the most close match is selected.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp; 
	: <font color="#0000FF">not null access</font> Gtk_Directory_Tree_View_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Store</b>&nbsp;&nbsp;&nbsp; : <font color="#0000FF">not null access</font> 
	Gtk_Abstract_Directory_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Selected</b> : Item_Path<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure has to be called by the derived type from its Initialize.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Is_Editable<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">not null access</font> Gtk_Directory_Tree_View_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <font color="#800000"><i>true</i></font> if <b>Widget</b> 
allows editing directory names. See
<a href="#Gtk.Abstract_Browser.Set_Editable_Tree">Set_Editable</a>.</p>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Gtk.Abstract_Browser.Name_Commit_Tree">
	</a>procedure</font> Name_Commit<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp; :
	<font color="#0000FF">not null access</font> Gtk_Directory_Items_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Old_Path</b> : Item_Path;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	New_Name</b> : Item_Name<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called when directory name editing is done. For this the widget 
must have directory names editing enabled by a call to
<a href="#Gtk.Abstract_Browser.Set_Editable">Set_Editable</a>. The parameter <b>
Old_Path</b> identifies the directory. The parameter <b>New_Name</b> specifies a new name 
for it. When the directory name is valid the implementation can change it outside the 
cache and when that succeeds notify the cache using 
<a href="#Gtk.Abstract_Browser.Renamed">Renamed</a> (Get_Cache (<b>Widget</b>), 
<b>Old_Path</b>, <b>New_Name</b>). The default implementation does nothing. That 
means it rejects any renaming request.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Set_Current_Directory<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">not null access</font> Gtk_Directory_Tree_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Directory</b> : Item_Path<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure selects <b>Directory</b> in the widget. The directory tree is 
expanded as necessary. Any selected before directory is deselected. The selected 
one is scrolled into the view. The path to <b>Directory</b> is cached when 
required. When <b>Directory</b> does not exist the procedure stops by its most 
nested existing parent.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Gtk.Abstract_Browser.Set_Editable_Tree">
	</a>procedure</font> Set_Editable<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp; 
	: <font color="#0000FF">not null access</font> Gtk_Directory_Items_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	<b>Editable</b> : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>By default the item names listed by the widget are not editable. When
<a href="#Gtk.Abstract_Browser.Set_Editable_Tree">Set_Editable</a> is called with 
<b>Editable</b> set to <font color="#800000"><i>true</i></font>, then the operator 
will be able to edit directory names directly. The name 
input is confirmed through the primitive operation 
<a href="#Gtk.Abstract_Browser.Name_Commit_Tree">Name_Commit</a>. </p>
<h4>2.8.3. <a name="2.8.3"></a>Directory items view</h4>
<p>The package Gtk.Abstract_Browser defines the type of a specialized tree view 
widget for indication of the items from some directory of a 
<a href="#Gtk.Abstract_Browser.Gtk_Abstract_Directory">Gtk_Abstract_Directory</a> 
store:</p>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Gtk.Abstract_Browser.Gtk_Directory_Items_View_Record"></a>type</font> Gtk_Directory_Items_View_Record<font color="#0000FF"> 
	is<br>
&nbsp;&nbsp; new</font> Gtk_Tree_View_Record <font color="#0000FF">with private</font>;<br>
	<font color="#0000FF">type</font> Gtk_Directory_Items_View
	<font color="#0000FF">is<br>
&nbsp;&nbsp; access all</font> Gtk_Directory_Items_View_Record'Class;</tt></p>
</blockquote>
<p>The tree view shows items of one directory. It supports features usual for 
file managers:</p>
<ul>
	<li>columned items output;</li>
	<li>multiple selection of items;</li>
	<li>editing item names;</li>
	<li>filtering items;</li>
	<li>navigation and selection of items using arrows and page scrolling key;</li>
	<li>navigation and selection of items by the first letter of item name;</li>
	<li>switching to directories by activating them.</li>
</ul>
<p>Note that as usual the same store may have any number of widgets 
independently rendering its content.</p>
<blockquote>
	<p><tt>Directory_Items_Class_Name : <font color="#0000FF">constant</font> 
	String :=<br>
&nbsp;&nbsp; &quot;<font color="#FF0000">GtkDirectoryItemsView</font>&quot;;</tt></p>
</blockquote>
<p>This is the name of the widget's <a href="http://www.gtk.org">GTK+</a> class. 
The widget emits the following signals additionally to the signals of a tree 
view:</p>
<ul>
	<li><i>directory-changed</i> when the directory indicated by the widget has 
	been changed;</li>
	<li><i>selection-changed</i> when the selection of the widget items has been 
	changed.</li>
</ul>
<p>The following operations are defined on the widget type:</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Activated<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> 
	: <font color="#0000FF">not null access</font> Gtk_Directory_Items_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Index</b>&nbsp; : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called upon activation a directory item. That is when the 
user clicks doubly on an item. The parameter <b>Index</b> identifies the item. 
All items from the directory filtered by the widget are enumerated from 1 to <a href="#Gtk.Abstract_Browser.Get_Directory_Size">Get_Directory_Size</a>.
The default implementation when the item is a directory selects 
it in the directory tree view (if any) which in turn causes 
the widget to show the items of this directory. When it is not a directory and the item names are editable (see
<a href="#Gtk.Abstract_Browser.Set_Editable">Set_Editable</a>) it starts editing 
the item name.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Directory_Changed<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">not null access</font> Gtk_Directory_Items_View_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called when the widget is switched to show another 
directory. The default implementation emits the <i>directory-changed</i> signal.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Gtk.Abstract_Directory.Filter"></a>function</font> Filter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">not null access</font> Gtk_Directory_Items_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Directory</b> 
	: Boolean;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Item_Name;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Kind</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Item_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Boolean;</tt></p>
</blockquote>
<p>This function can be overridden to prevent some items from being visible. The 
default implementation lets all items in.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Finalize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">not null access</font> Gtk_Directory_Items_View_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This subprogram is called upon destruction. It has to be called from its 
overriding.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Cache<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">not null access</font> Gtk_Directory_Items_View_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Gtk_Abstract_Directory;</tt></p>
</blockquote>
<p>This function returns the
<a href="#Gtk.Abstract_Browser.Gtk_Abstract_Directory">Gtk_Abstract_Directory</a> 
object used with by the directory items view.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Column<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">not null access</font> Gtk_Directory_Items_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b>&nbsp; 
	: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Positive;</tt></p>
</blockquote>
<p>This function returns the
column of an item by its index. Constraint_Error is 
propagated when <b>Index</b> is not in 1..<a href="#Gtk.Abstract_Browser.Get_Directory_Size">Get_Directory_Size</a>. 
Note that the number of items and their indices are constrained to only the 
items filtered by the function <a href="#Gtk.Abstract_Directory.Filter">Filter</a>.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Columns<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">not null access</font> Gtk_Directory_Items_View_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Positive;</tt></p>
</blockquote>
<p>This function returns the
number of item columns.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Current<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">not null access</font> Gtk_Directory_Items_View_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Natural;</tt></p>
</blockquote>
<p>This function returns the
index of the current item. The result is 0 when there is no one. 
Otherwise it is a number from 1 to
<a href="#Gtk.Abstract_Browser.Get_Directory_Size">Get_Directory_Size</a>. The
items in the directory are ordered according to the function
<a href="#Gtk.Abstract_Browser.Compare">Compare</a>.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Directory<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">not null access</font> Gtk_Directory_Items_View_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Item_Path;</tt></p>
</blockquote>
<p>This function returns the
path of the indicated directory. The path of the root directory is empty.</p>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Gtk.Abstract_Browser.Get_Directory_Size"></a>function</font> 
	Get_Directory_Size<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">not null access</font> Gtk_Directory_Items_View_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Natural;</tt></p>
</blockquote>
<p>This function returns the
number of items in the indicated directory.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Directory_Tree_View<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">not null access</font> Gtk_Directory_Items_View_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Gtk_Directory_Tree_View;</tt></p>
</blockquote>
<p>This function returns the
directory tree view widget used with <b>Widget</b>. The result is
<font color="#0000FF">null</font> if there is no any.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Icon<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">
	not null access</font> Gtk_Directory_Items_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Item_Name;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Kind</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Item_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Directory</b>&nbsp;&nbsp;&nbsp; 
	: Boolean;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Has_Children</b> : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Icon_Data;</tt></p>
</blockquote>
<p>This function is called to obtain the icon used for an item. 
The parameters <b>Name</b>, <b>Kind</b> and <b>Directory</b> are the name, the type 
and the directory of the item as they were 
returned by <a href="#Gtk.Abstract_Browser.Read">Read</a>. The default implementation returns the 
value of <b>Kind</b> converted to String. Note that the widget is a columned 
view, so this function can be called for an empty cell of a partially filled 
row. Such cases can be recognized when <b>Name</b> and <b>Kind</b> are empty in 
order to return (Stock_ID, 0, &quot;&quot;), so that no icon would appear. When
<b>Directory</b> is <font color="#800000"><i>true</i></font> and <b>Has_Children</b> 
is <font color="#800000"><i>false</i></font> this usually indicates that the 
folder is unreadable.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">not null access</font> Gtk_Directory_Items_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp; 
	: Item_Name<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Natural;</tt></p>
</blockquote>
<p>This function returns the
index of a cached item specified by its name. The result is 0 when there is no 
such item. Note that some items can be filtered out by the function
<a href="#Gtk.Abstract_Directory.Filter">Filter</a>.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Index<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">not null access</font> Gtk_Directory_Items_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Row</b>&nbsp;&nbsp;&nbsp; 
	: Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Column</b> 
	: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Natural;</tt></p>
</blockquote>
<p>This function returns the
index of an item specified by its row and column. The result is 0 if <b>Row</b> 
and <b>Column</b> do not identify any item.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Name<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">not null access</font> Gtk_Directory_Items_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b>&nbsp; 
	: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Item_Name;</tt></p>
</blockquote>
<p>This function returns name of an item by its index. Constraint_Error is 
propagated when <b>Index</b> is not in 1..<a href="#Gtk.Abstract_Browser.Get_Directory_Size">Get_Directory_Size</a>.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Path<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">not null access</font> Gtk_Directory_Items_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp; 
	: Item_Name<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Item_Path;</tt></p>
</blockquote>
<p>This function returns the path of an item by its name. It is equivalent to: 
Get_Path (<b>Widget</b>.Cache, Get_Directory (<b>Widget</b>), Name);</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Path<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">not null access</font> Gtk_Directory_Items_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b>&nbsp; 
	: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Item_Path;</tt></p>
</blockquote>
<p>This function returns path of an item by its index. Constraint_Error is 
propagated when <b>Index</b> is not in 1..<a href="#Gtk.Abstract_Browser.Get_Directory_Size">Get_Directory_Size</a>.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Row<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">not null access</font> Gtk_Directory_Items_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b>&nbsp; 
	: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Positive;</tt></p>
</blockquote>
<p>This function returns the
row of an item by its index. Constraint_Error is 
propagated when <b>Index</b> is not in 1..<a href="#Gtk.Abstract_Browser.Get_Directory_Size">Get_Directory_Size</a>.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Selection<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">not null access</font> Gtk_Directory_Items_View_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Selection;</tt></p>
</blockquote>
<p>This function returns the array of indices of the currently selected items. 
The type Selection is declared in the package as:</p>
<blockquote>
	<p><tt><font color="#0000FF">type</font> Selection <font color="#0000FF">is 
	array</font> (Positive <font color="#0000FF">range</font> &lt;&gt;)
	<font color="#0000FF">of</font> Positive;</tt></p>
</blockquote>
<p>The selection type depends on the current selection mode:</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Selection_Mode<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">not null access</font> Gtk_Directory_Items_View_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Gtk_Selection_Mode;</tt></p>
</blockquote>
<p>This function returns the current selection mode. The default selection mode 
is Selection_Multiple.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Selection_Size<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">not null access</font> Gtk_Directory_Items_View_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Natural;</tt></p>
</blockquote>
<p>This function returns the number of currently selected items.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">not null access</font> Gtk_Directory_Items_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b>&nbsp; 
	: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Item_Type;</tt></p>
</blockquote>
<p>This function returns the type of an item by its index. Constraint_Error is 
propagated when <b>Index</b> is not in 1..<a href="#Gtk.Abstract_Browser.Get_Directory_Size">Get_Directory_Size</a>.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Visible_Height<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">not null access</font> Gtk_Directory_Items_View_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Natural;</tt></p>
</blockquote>
<p>This function returns the number of rows visible in the leftmost visible 
column of <b>
Widget</b>. The widget has to be realized.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Visible_Width<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">not null access</font> Gtk_Directory_Items_View_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Natural;</tt></p>
</blockquote>
<p>This function returns the number of columns visible in the topmost visible 
row of <b>
Widget</b>. The widget has to be realized.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; 
	: <font color="#0000FF">out</font> Gtk_Directory_Items_View;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Tree</b>&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">not null access</font> Gtk_Directory_Tree_View_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Columns</b> : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure creates <b>Widget</b> of directory items view. The parameter
<b>Tree</b> is the directory tree view widget associated with. A directory 
selected in the tree is automatically shown by <b>Widget</b>. Similarly, when 
the current directory is changed for example when the operator activates a 
directory item, this item gets selected in <b>Tree</b> and the path to it is 
expanded. The parameter <b>Columns</b> specifies the number item columns in <b>
Widget</b>.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; 
	: <font color="#0000FF">out</font> Gtk_Directory_Items_View;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Store</b>&nbsp;&nbsp; : <font color="#0000FF">not null access</font> 
	Gtk_Abstract_Directory_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Columns</b> : Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Current</b> : Item_Path := &quot;&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This variant is used when no directory tree view has to be associated with 
the widget. In this case the parameter <b>Store</b> is a 
<a href="#Gtk.Abstract_Browser.Gtk_Abstract_Directory">Gtk_Abstract_Directory</a> 
store object which items are indicates: The parameter Current is the path of the 
directory to show. When empty the root directory is shown. When non-existent the 
most nested existing parent is shown.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; 
	: <font color="#0000FF">not null access</font> Gtk_Directory_Items_View_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Tree</b>&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">not null access</font> Gtk_Directory_Tree_View_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Columns</b> : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
	<font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; 
	: <font color="#0000FF">not null access</font> Gtk_Directory_Items_View_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Store</b>&nbsp;&nbsp; : <font color="#0000FF">not null access</font> 
	Gtk_Abstract_Directory_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Columns</b> : Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Current</b> : Item_Path<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>One of these procedures shall be called from the Initialize of the derived 
type.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Input_Event<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">not null access</font> Gtk_Directory_Items_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b>&nbsp; 
	: Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Event</b>&nbsp; 
	: Gdk_Event<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Boolean;</tt></p>
</blockquote>
<p>This function is called upon a key or button press event not handled 
otherwise by the widget. It is a convenience function to ease handling events. 
It has the parameter <b>Index</b> identifying the item on which the event 
happened. The result is <font color="#800000"><i>false</i></font> when the event 
should be passed to other handlers. The default implementation returns <i>
<font color="#800000">false</font></i>.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Is_Directory<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">not null access</font> Gtk_Directory_Items_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b>&nbsp; 
	: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <font color="#800000"><i>true</i></font> if the item 
specified by <b>Index</b> is a directory. Constraint_Error is propagated when <b>
Index</b> is not in 1..<a href="#Gtk.Abstract_Browser.Get_Directory_Size">Get_Directory_Size</a>.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Is_Editable<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">not null access</font> Gtk_Directory_Items_View_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <font color="#800000"><i>true</i></font> if <b>Widget</b> 
allows editing item names listed in it. See
<a href="#Gtk.Abstract_Browser.Set_Editable">Set_Editable</a>.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Is_Selected<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">not null access</font> Gtk_Directory_Items_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Index</b>&nbsp; 
	: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <font color="#800000"><i>true</i></font> if the item 
specified by <b>Index</b> is a selected. Constraint_Error is propagated when <b>
Index</b> is not in 1..<a href="#Gtk.Abstract_Browser.Get_Directory_Size">Get_Directory_Size</a>.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Locate<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">not null access</font> Gtk_Directory_Items_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>X</b>, <b>
	Y</b>&nbsp;&nbsp; : GDouble<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Natural;</tt></p>
</blockquote>
<p>This function returns the index of an item at the coordinates <b>X</b>, <b>Y</b> 
relative to the <b>Widget</b>'s
<a href="https://developer.gnome.org/gtk3/stable/GtkTreeView.html#gtk-tree-view-get-bin-window">
bin_window</a>. The result is 0 when <b>X</b> and <b>Y</b> do not specify any 
item.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Move<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">
	not null access</font> Gtk_Directory_Items_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Changed</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">out</font> 
	Boolean;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Modifier</b>&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Modifier_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>To</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Natural;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>By</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Integer := <font color="#800000">0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Fixed_Row</b>&nbsp;&nbsp;&nbsp; : Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Fixed_Column</b> : Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure moves the current position to the item with the index <b>To</b> +
<b>By</b>. It does nothing when <b>To</b> is less than 1. When the position 
after incrementing 
using <b>By</b> is out of 1..<a href="#Gtk.Abstract_Browser.Get_Directory_Size">Get_Directory_Size</a>, 
it is 
saturated to the nearest existing one. The parameter <b>Modifier</b> controls 
selection change caused by the operation:</p>
<TABLE border="5" cellpadding="3" cellspacing="0">
  <TR>
    <TD valign="top" bgcolor="#008080"><font color="#FFFFFF"><b>Shift_Mask</b></font></TD>
    <TD valign="top" bgcolor="#008080"><font color="#FFFFFF"><b>Control_Mask</b></font></TD>
    <TD valign="top" bgcolor="#008080"><b><font color="#FFFFFF">Description</font></b></TD>
  </TR>
  <TR>
    <TD align="center">-</TD>
    <TD align="center">-</TD>
    <TD valign="top">Single selection of the target item. All other items are 
	deselected </TD>
  </TR>
  <TR>
    <TD align="center">-</TD>
    <TD align="center">+</TD>
    <TD valign="top">Toggling selection of the target item</TD>
  </TR>
  <TR>
    <TD align="center">+</TD>
    <TD align="center">
	-</TD>
    <TD valign="top">Single range selection nearest to the target item. The 
	items outside range are deselected.</TD>
  </TR>
  <TR>
    <TD align="center">+</TD>
    <TD align="center">+</TD>
    <TD valign="top">Range nearest to the target item selection.</TD>
  </TR>
  </TABLE>
<p>The effect depends on the constraints imposed by the selection mode as 
specified by <a href="#Gtk.Abstract_Browser.Set_Selection_Mode">Set_Selection_Mode</a>. The parameters <b>Fixed_Row</b> and <b>Fixed_Column </b> when <i><font color="#800000">true</font></i> 
prevent the row or column of <b>To</b> from being left. This procedure can be 
used for 
item navigation. For instance navigation upwards can be achieved by specifying
<b>To</b> = Get_Current (<b>Widget</b>) and <b>By</b> = -1. The output parameter
<b>Changed</b> is set to <font color="#800000"><i>true</i></font> if the 
position was changed. Otherwise it is set to <i><font color="#800000">false</font></i>.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Gtk.Abstract_Browser.Name_Commit">
	</a>procedure</font> Name_Commit<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">not null access</font> Gtk_Directory_Items_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Index</b>&nbsp; : Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp; 
	: Item_Name<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called when item name editing is done. For this the widget 
must have item names editing enabled by a call to
<a href="#Gtk.Abstract_Browser.Set_Editable">Set_Editable</a>. The parameter <b>
Index</b> identifies the item. The parameter <b>Name</b> specifies a new name 
for it. When the item name is valid the implementation can change it outside the 
cache and when that succeeds notify the cache using 
<a href="#Gtk.Abstract_Browser.Renamed">Renamed</a> (<b>Widget</b>, <b>
Index</b>, <b>Name</b>). The default implementation does nothing.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Refilter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">not null access</font> Gtk_Directory_Items_View_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called when the item filtering logic changes, i.e. the 
behavior of the primitive operation <a href="#Gtk.Abstract_Directory.Filter">
Filter</a> alters. The procedure forces scanning the directory items in order to 
decide whether they should be made visible or not.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Refresh<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">not null access</font> Gtk_Directory_Items_View_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure refreshes the widget contents.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Gtk.Abstract_Browser.Renamed">
	</a>procedure</font> Renamed<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">not null access</font> Gtk_Directory_Items_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Index</b>&nbsp; : <font color="#0000FF">in out </font>Natural;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp; 
	: Item_Name<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is provided for convenience. It calls 
to <a href="#Gtk.Abstract_Browser.Renamed_Store">Renamed</a> upon item renaming. <b>Index</b> identifies the item by its position. <b>Name</b> is 
the new item name. Constraint_Error is propagated when <b>
Index</b> is not in 1..<a href="#Gtk.Abstract_Browser.Get_Directory_Size">Get_Directory_Size</a>. 
Note that the result might become invisible as the result of filtering. In this 
case <b>Index</b> is set to 0. Otherwise it is the renamed item index.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Reset_Selection<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">not null access</font> Gtk_Directory_Items_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure removes selection of any items.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Selection_Changed<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">not null access</font> Gtk_Directory_Items_View_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called when the selection state changes. The default 
implementation emits the <i>selection-changed</i> signal.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Gtk.Abstract_Browser.Set_Editable">
	</a>procedure</font> Set_Editable<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Widget&nbsp;&nbsp; 
	: <font color="#0000FF">not null access</font> Gtk_Directory_Items_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	Editable : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>By default the item names listed by the widget are not editable. When
<a href="#Gtk.Abstract_Browser.Set_Editable">Set_Editable</a> is called with 
<b>Editable</b> set to <i><font color="#800000">true</font></i>, the operator will be able to edit the item names. The name 
input is confirmed through the primitive operation 
<a href="#Gtk.Abstract_Browser.Name_Commit">Name_Commit</a>.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Set_Selection<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> 
	: <font color="#0000FF">not null access</font> Gtk_Directory_Items_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp; 
	: Item_Name;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	State</b>&nbsp; : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
	procedure</font> Set_Selection<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;: <font color="#0000FF">
	not null access</font> Gtk_Directory_Items_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Index</b>&nbsp; 
	: Position;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	State&nbsp; </b>: Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures set selection of an item by its name or else position. The parameter <b>Name</b> 
or else <b>Index</b> 
specify the item to select if <b>State</b> is <i><font color="#800000">true</font></i> 
or deselect if <b>State</b> is <i><font color="#800000">false</font></i>. 
Nothing happens if <b>Name</b> or <b>Index</b> do not specify any item.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Gtk.Abstract_Browser.Set_Selection_Mode">
	</a>procedure</font> Set_Selection_Mode<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">not null access</font> Gtk_Directory_Items_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Mode</b>&nbsp;&nbsp; 
	: Gtk_Selection_Mode<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure changes the selection mode. The default selection mode is 
Selection_Multiple. Other modes are:</p>
<ul>
	<li><i>Selection_None</i> does not allow any item to be selected, when set 
	deselects any selected items;</li>
	<li><i>Selection_Single</i> allows one or none items selected. When this 
	mode is set items from a multiple selections are deselected except one. When 
	the current item is selected it remains in this state;</li>
	<li><i>Selection_Browse</i> allows exactly one item selected. When this mode 
	is set and the selection is empty, then the current item is selected. 
	Otherwise from a multiple selection all items are deselected except the 
	current one if possible;</li>
	<li><i>Multiple_Selection</i> allows any kind of selection.</li>
</ul>
<h3>2.9. <a name="2.9"></a>Files directory cache and a browsing widget</h3>
<p>The package Gtk.Directory_Browser provides an implementations of the abstract 
browsing model and a customized widget to use with it. It caches and renders the file system directory structure 
in a two-pane way customary to modern file managers. The widget is a composite 
widget derived from Gtk_Paned_Record:</p>
<p><img border="0" src="gtk_directory_browser.png" width="735" height="504" alt="directory browser"></p>
<p>The implementation is rather straightforward because all work is actually 
done by <a href="#Gtk.Abstract_Browser.Gtk_Directory_Tree_View">
Gtk_Directory_Tree_View</a> and
<a href="#Gtk.Abstract_Browser.Gtk_Directory_Items_View_Record">
Gtk_Directory_Items_View</a>. The widget just assembles then together and adds 
scroll bars.</p>
<h4>2.9.1. <a name="2.9.1"></a>Files directory cache</h4>
<p>The type Gtk_Directory is an implementation of 
<a href="#Gtk.Abstract_Browser.Gtk_Abstract_Directory">Gtk_Abstract_Directory</a> 
that caches the file system directory structure:</p>
<blockquote>
	<p><tt><font color="#0000FF">type</font> Gtk_Directory_Record is<br>
&nbsp;&nbsp; <font color="#0000FF">new</font> Gtk_Abstract_Directory_Record
	<font color="#0000FF">with private</font>;<br>
	<font color="#0000FF">type</font> Gtk_Directory <font color="#0000FF">is 
	access all</font> Gtk_Directory_Record'Class;</tt></p>
</blockquote>
<p>The full names of Ada.Directories are used as
<a href="#Gtk.Abstract_Browser.Gtk_Abstract_Directory">Gtk_Abstract_Directory</a> 
paths. The simple names of Ada.Directories are used as item names. File_Kind is 
mapped to <a href="#Gtk.Abstract_Browser.Gtk_Abstract_Directory">Gtk_Abstract_Directory</a> 
item type. The type value is chosen from the stock items as follows: The value 
Directory is mapped to <i>gtk-directory</i>, Ordinary_File to <i>gtk-file</i>, 
Special_File to <i>gtk-execute</i>.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Delete<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Store</b> :
	<font color="#0000FF">not null access</font> Gtk_Directory_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>File</b>&nbsp; 
	: UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is used to remove a file or directory. It synchronizes the 
cache Store after completion of physical removal.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Finalize (<b>Store</b> :
	<font color="#0000FF">not null access</font> Gtk_Directory_Record);</tt></p>
</blockquote>
<p>This procedure is called upon finalization. When overridden it has to be 
called from the overriding.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Store</b>&nbsp;&nbsp; : <font color="#0000FF">out</font> Gtk_Directory;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Policy</b>&nbsp; : Caching_Policy := Cache_Expanded;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Tracing</b> : Traced_Actions := Trace_Nothing<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure creates a new caching store. The result is returned through 
the parameter <b>Store</b>. The 
parameter <b>Policy</b> determines the caching policy. For a discussion 
concerning different policies see the description of the abstract primitive 
operation <a href="#Gtk.Abstract_Browser.Read">Read</a>. The parameter <b>
Tracing</b> specifies, which actions are desired for tracing.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Store</b>&nbsp;&nbsp; : <font color="#0000FF">
	not null access</font> Gtk_Directory_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Policy</b>&nbsp; : Caching_Policy;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Tracing</b> : Traced_Actions<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure has to be called from the Initialize of the derived type.</p>
<h4>2.9.2. <a name="2.9.2"></a>Files directory browsing widget</h4>
<p>The directory browsing widget provides functionality close to one of 
Microsoft explorer. It is a composite widget consisting of two panes. One pane 
contains a directory tree widget for navigating folders. Another pane contains a 
directory items widget for browsing files. The widget is derived from the paned 
widget. Its panes contain scrolled windows which in turn contain the tree and 
item view widgets:</p>
<blockquote>
	<p><tt><font color="#0000FF">type</font> Gtk_Directory_Browser_Record
	<font color="#0000FF">is<br>
&nbsp;&nbsp; new </font>Gtk_Paned_Record <font color="#0000FF">with private</font>;<br>
	<font color="#0000FF">type</font> Gtk_Directory_Browser
	<font color="#0000FF">is<br>
&nbsp;&nbsp; access all </font>Gtk_Directory_Browser_Record'Class;</tt></p>
</blockquote>
<p>The following subprograms are defined on the widget:</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Filter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">not null access</font> Gtk_Directory_Browser_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Directory</b> 
	: Boolean;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Item_Name;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Kind</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Item_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Boolean;</tt></p>
</blockquote>
<p>This function can be overridden to prevent some items from being visible in 
the files view pane. The 
default implementation lets all items in.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Cache<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">not null access</font> Gtk_Directory_Browser_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Gtk_Directory;</tt></p>
</blockquote>
<p>The function returns the directory cache associated with the widget.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Files_View<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">not null access</font> Gtk_Directory_Browser_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Gtk_Directory_Items_View;</tt></p>
</blockquote>
<p>The function returns the files browsing widget.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Tracing<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Store</b> :
	<font color="#0000FF">not null access</font> Gtk_Directory_Browser_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Traced_Actions;</tt></p>
</blockquote>
<p>This function returns the current state of tracing.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Tree_View<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">not null access</font> Gtk_Directory_Browser_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Gtk_Directory_Tree_View;</tt></p>
</blockquote>
<p>The function returns the directory tree browsing widget.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp; : <font color="#0000FF">out</font> Gtk_Directory_Browser;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>File</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 
	UTF8_String := Current_Directory;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Columns</b>&nbsp;&nbsp; : Positive&nbsp;&nbsp; &nbsp;:=
	<font color="#800000">4</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Vertical</b>&nbsp; : Boolean&nbsp;&nbsp;&nbsp; &nbsp;:= False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Tree_Size</b> : Gtk_Requisition := (Width =&gt; <font color="#800000">180</font>, 
	Height =&gt; <font color="#800000">500</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	List_Size</b> : Gtk_Requisition := (Width =&gt; <font color="#800000">600</font>, 
	Height =&gt; <font color="#800000">500</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Store</b>&nbsp;&nbsp; &nbsp; : Gtk_Directory&nbsp;&nbsp; := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Tracing</b>&nbsp;&nbsp; : Traced_Actions&nbsp; := Trace_Nothing<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>The procedure creates a new widget. The parameter <b>File</b> is the full 
name of a file to browse. Its most nested existing parent is selected in the 
directory tree view. Correspondingly it is shown in the files view. The 
parameter <b>Columns</b> specifies the number columns in the files view. When 
the parameter <b>Vertical</b> is <i><font color="#800000">false</font></i> the 
tree view is shown left of the files view. Otherwise it is shown above. The 
parameters <b>Tree_Size</b> and <b>List_Size</b> control size of the directory 
tree and files list panes. The widget wiil try to render them so that no scroll 
bars will appear. For this the panes will be expanded but not larger than the 
corresponding parameters specify. The 
parameter <b>Store</b> is the directory cache to use with the widget. When 
specified as <font color="#0000FF">null</font> a new directory cache is created 
transparently. The parameter <b>Tracing</b> specifies the actions desired for 
tracing.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp; : <font color="#0000FF">
	not null access</font> Gtk_Directory_Browser_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>File</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 
	UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Columns</b>&nbsp;&nbsp; : Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Vertical</b>&nbsp; : Boolean;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Tree_Size</b> : Gtk_Requisition;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	List_Size</b> : Gtk_Requisition;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Store</b>&nbsp;&nbsp;&nbsp;&nbsp; : Gtk_Directory;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Tracing</b>&nbsp;&nbsp; : Traced_Actions<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure has to be called from the Initialize of the derived type.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Set_Tracing<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; 
	: <font color="#0000FF">not null access</font> Gtk_Directory_Browser_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Tracing</b> : Traced_Actions<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure changes tracing status. The parameter <b>Tracing</b> defines 
which actions need to be traced.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Root_Directory (<b>File</b> 
	: String) <font color="#0000FF">return</font> String;</tt></p>
</blockquote>
<p>This procedure returns the full name of the root directory indicated by the 
widget.</p>
<h4>2.9.3. <a name="2.9.3"></a>Wildcard browsing widget</h4>
<p>The package Gtk.Wildcard_Directory_Browser provides a specialized directory browsing widget 
with files list pane filtered using wildcard patterns.</p>
<table border="1" cellspacing="0" cellpadding="5">
	<tr>
		<td><i>Note this package requires
		<a href="http://www.dmitry-kazakov.de/ada/strings_edit.htm">Strings_Edit</a> 
		library.</i></td>
	</tr>
</table>
<blockquote>
	<p><tt><font color="#0000FF">type</font> 
	Gtk_Wildcard_Directory_Browser_Record <font color="#0000FF">is<br>
&nbsp;&nbsp; new </font>Gtk_Directory_Browser_Record <font color="#0000FF">with 
	private</font>;<br>
	<font color="#0000FF">type</font> Gtk_Wildcard_Directory_Browser
	<font color="#0000FF">is<br>
&nbsp;&nbsp; access all </font>Gtk_Wildcard_Directory_Browser_Record'Class;</tt></p>
</blockquote>
<p>The following subprograms are defined on the widget:</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Finalize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">not null access</font> Gtk_Wildcard_Directory_Browser_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure has to be called by the derived type when overridden upon its 
finalization.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Pattern<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ( <b>&nbsp;Widget</b> :
	<font color="#0000FF">not null access</font> Gtk_Wildcard_Directory_Browser_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
	String_List.GList;</tt></p>
</blockquote>
<p>This function returns the currently used pattern. The result shall not be 
modified.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp; : <font color="#0000FF">out</font> Gtk_Wildcard_Directory_Browser;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Pattern</b>&nbsp;&nbsp; : String_List.GList := Any;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>File</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 
	UTF8_String := Current_Directory;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Columns</b>&nbsp;&nbsp; : Positive&nbsp;&nbsp;&nbsp; := <font color="#800000">4</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Vertical</b>&nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp; := False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Tree_Size</b> : Gtk_Requisition := (Width =&gt; <font color="#800000">180</font>, 
	Height =&gt; <font color="#800000">500</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	List_Size</b> : Gtk_Requisition := (Width =&gt; <font color="#800000">600</font>, 
	Height =&gt; <font color="#800000">500</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Store</b>&nbsp;&nbsp;&nbsp;&nbsp; : Gtk_Directory&nbsp;&nbsp; := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Tracing</b>&nbsp;&nbsp; : Traced_Actions&nbsp; := Trace_Nothing<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
	<font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp; : <font color="#0000FF">out</font> Gtk_Wildcard_Directory_Browser;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Pattern</b>&nbsp;&nbsp; : Controlled_String_List;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>File</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 
	UTF8_String := Current_Directory;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Columns</b>&nbsp;&nbsp; : Positive&nbsp;&nbsp;&nbsp; := <font color="#800000">4</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Vertical</b>&nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp; := False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Tree_Size</b> : Gtk_Requisition := (Width =&gt; <font color="#800000">180</font>, 
	Height =&gt; <font color="#800000">500</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	List_Size</b> : Gtk_Requisition := (Width =&gt; <font color="#800000">600</font>, 
	Height =&gt; <font color="#800000">500</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Store</b>&nbsp;&nbsp;&nbsp;&nbsp; : Gtk_Directory&nbsp;&nbsp; := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Tracing</b>&nbsp;&nbsp; : Traced_Actions&nbsp; := Trace_Nothing<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures create a new widget. The parameter <b>Pattern</b> is the 
files filter pattern. It can be specified either as a list or as a
<a href="#Gtk.Enums.String_Lists">controlled wrapper</a> around. When omitted 
the pattern is considered as matching anything. The parameter <b>File</b> is the full 
name of a file to browse. Its most nested existing parent is selected in the 
directory tree view. Correspondingly it is shown in the files view. The 
parameter <b>Columns</b> specifies the number columns in the files view. When 
the parameter <b>Vertical</b> is <i><font color="#800000">false</font></i> the 
tree view is shown left of the files view. Otherwise it is shown above. The 
parameters <b>Tree_Size</b> and <b>List_Size</b> control size of the directory 
tree and files list panes. The widget will try to render them so that no scroll 
bars will appear. For this the panes will be expanded but not larger than the 
corresponding parameters specify. The 
parameter <b>Store</b> is the directory cache to use with the widget. When 
specified as <font color="#0000FF">null</font> a new directory cache is created 
transparently. The parameter <b>Tracing</b> specifies the actions desired for 
tracing.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp; : 
	<font color="#0000FF">not null access</font>  
	Gtk_Wildcard_Directory_Browser_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Pattern</b>&nbsp;&nbsp; : String_List.GList;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>File</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 
	UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Columns</b>&nbsp;&nbsp; : Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Vertical</b>&nbsp; : Boolean;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Tree_Size</b> : Gtk_Requisition;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	List_Size</b> : Gtk_Requisition;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Store</b>&nbsp;&nbsp;&nbsp;&nbsp; : Gtk_Directory;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Tracing</b>&nbsp;&nbsp; : Traced_Actions<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure has to be called from the Initialize of the derived type.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Set_Pattern<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; 
	: 
	<font color="#0000FF">not null access</font> Gtk_Wildcard_Directory_Browser_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Pattern</b> : String_List.GList := Any<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
	<font color="#0000FF">procedure</font> Set_Pattern<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; 
	: 
	<font color="#0000FF">not null access</font> Gtk_Wildcard_Directory_Browser_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Pattern</b> : UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
	<font color="#0000FF">procedure</font> Set_Pattern<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; 
	: 
	<font color="#0000FF">not null access</font> Gtk_Wildcard_Directory_Browser_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Pattern</b> : Controlled_String_List<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures set new pattern. The pattern can be specified as a single 
alternative, as a list or as a <a href="#Gtk.Enums.String_Lists">controlled 
wrapper</a> around.</p>
<h3>2.10. <a name="2.10"></a>Persistent storage browsing</h3>
<p><a name="Gtk.Persistent_Storage_Browser"></a>The package 
<a href="#Gtk.Persistent_Storage_Browser">Gtk.Persistent_Storage_Browser</a> provides specialized cache and widgets 
for browsing persistent storages.</p>
<table border="1" cellspacing="0" cellpadding="5">
	<tr>
		<td><i>Note this package requires
		<a href="http://www.dmitry-kazakov.de/ada/components.htm">Simple 
		Components</a> 
		and optionally <a href="http://gnade.sourceforge.net/">GNADE</a> ODBC libraries.</i></td>
	</tr>
</table>
<h4>2.10.1. <a name="2.10.1"></a>Paths, URI, Credentials</h4>
<p><u><b>Paths</b></u>. Persistent objects are identified 
by paths. Path have the type <a href="#Gtk.Abstract_Browser.Item_Path">Item_Path</a>. 
A path consists of UTF-8 encoded names separated by forward slashes (/). Slash 
and any other characters within a name can be escaped using backward slash (\). 
The first name of a path specified a persistent storage. The following 
operations are defined on paths:</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> &quot;<font color="#FF0000">&amp;</font>&quot; 
	(<b>Path</b> : Item_Path; <b>Name</b> : Item_Name) <font color="#0000FF">
	return</font> Item_Path;</tt></p>
</blockquote>
<p>This function composes a path from a path to the directory and the item name 
within the directory. Name_Error is propagated when <b>Name</b> is empty.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Name (<b>Path</b> : 
	Item_Path) <font color="#0000FF">return</font> Item_Name;</tt></p>
</blockquote>
<p>This function returns the name part of <b>Path</b>. Name_Error is propagated 
when <b>Path</b> is illegal.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Directory (<b>Path</b> : 
	Item_Path) <font color="#0000FF">return</font> Item_Path;</tt></p>
</blockquote>
<p>This function returns the directory part of <b>Path</b>. Name_Error is 
propagated when <b>Path</b> is illegal or else there when there is no directory 
part.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Is_Root (<b>Path</b> : 
	Item_Path) <font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if <b>Path</b> 
specifies a root-level item, i.e. a persistent storage.</p>
<p><u><b>URI</b></u>. <b>U</b>niform <b>R</b>esource <b>I</b>dentifiers (URI) of 
persistent objects are used to identify them outside the application. An URI 
describes the persistent storage, user credentials used to access it and the 
path within the storage. URI syntax supports storing encrypted user credentials. 
The type:</p>
<blockquote>
	<p><tt><font color="#0000FF">type</font> Scheme_Type <font color="#0000FF">
	is</font> (DSN_Scheme, SQLite_Scheme);</tt></p>
</blockquote>
<p>defines URI schemes of the supported persistent storages:</p>
<ul>
	<li><i>DSN_Scheme</i> is the scheme for the ODBC data source;</li>
	<li><i>SQLite_Scheme</i> is the scheme for the SQLite data base.</li>
</ul>
<p>The following operations are defined for object's URI:</p>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Gtk.Persistent_Storage_Browser.Get_Credentials"></a>procedure</font> 
	Get_Credentials<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>URI</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>User</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">out</font> Unbounded_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Password</b>&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">out</font> 
	Unbounded_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Has_Password</b> : <font color="#0000FF">out</font> Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure takes user credentials from <b>URI</b>. The output parameters
<b>User</b> and <b>Password</b> are set from the corresponding parts of <b>URI</b>. 
The parameter <b>Has_Password</b> is returned <font color="#800000"><i>true</i></font>, 
when <b>URI</b> contains password. Otherwise <b>Password</b> is returned empty. 
Two URI schemes are supported:</p>
<ul>
	<li>DSN_Scheme describing an ODBC data source, <b>User</b> and <b>Password</b> 
	are the credentials to access the data source. <b>Has_Pasword</b> indicates 
	if the password was specified;</li>
	<li>SQLite_Scheme, <b>User</b> is the SQLite data base file name, <b>
	Password</b> is empty string. <b>Has_Pasword</b> is <font color="#800000">
	<i>false</i></font>.</li>
</ul>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_DSN (<b>URI</b> : 
	UTF8_String) <font color="#0000FF">return</font> Item_Name;</tt></p>
</blockquote>
<p>This function returns the persistent storage name from <b>URI</b>. The result 
is an empty string when <b>URI</b> has syntax errors.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Path (<b>URI</b> : 
	UTF8_String) <font color="#0000FF">return</font> Item_Path;</tt></p>
</blockquote>
<p>This function returns the object path from <b>URI</b>. The result is an empty 
string when <b>URI</b> has syntax errors.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Scheme (<b>URI</b> : 
	UTF8_String) <font color="#0000FF">return</font> Scheme_Type;</tt></p>
</blockquote>
<p>This function returns the <b>URI</b> scheme. Constraint_Error is propagated 
when the scheme is unknown.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> To_DSN_URI<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>DSN </b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>User</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Password</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: UTF8_String := &quot;&quot;;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Stored_Password</b> : Boolean&nbsp;&nbsp;&nbsp;&nbsp; := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> UTF8_String;</tt></p>
</blockquote>
<p>This function composes a DSN <b>URI</b> from the data source name <b>DSN</b> and user credentials. 
When the parameter <b>Stored_Password</b> is <font color="#800000"><i>true</i></font>, 
the result will contain <b>Password</b>. For such URI the procedure
<a href="#Gtk.Persistent_Storage_Browser.Get_Credentials">Get_Credentials</a> 
will return <font color="#800000"><i>true</i></font> in <b>Has_Password</b>.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> To_SQLite_URI<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>DSN </b>&nbsp;: 
	UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>File</b> 
	: UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> UTF8_String;</tt></p>
</blockquote>
<p>This function composes a SQLite <b>URI</b> from the data source name <b>DSN</b> 
and the data base file name <b>File</b>.</p>
<p><u><b>Credentials</b></u>. Accessing persistent storage may 
require querying user credentials. The package provides an abstract interface 
for.</p>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Gtk.Persistent_Storage_Browser.Abstract_Credentials_Query"></a>type</font> 
	Abstract_Credentials_Query <font color="#0000FF">is abstract<br>
&nbsp;&nbsp; new </font>Object.Entity<font color="#0000FF"> with null record</font>;<br>
	<font color="#0000FF">type</font> Abstract_Credentials_Query_Ptr<font color="#0000FF"> 
	is<br>
&nbsp;&nbsp; access </font>Abstract_Credentials_Query'Class;</tt></p>
</blockquote>
<p>The type <a href="#Gtk.Persistent_Storage_Browser.Abstract_Credentials_Query">
Abstract_Credentials_Query</a> is the abstract base type of credentials query. 
Usually it is implemented as a dialog. The following abstract operations have to 
be implemented:</p>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Gtk.Persistent_Storage_Browser.Create"></a>procedure</font> Create<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Query</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">in out </font>Abstract_Credentials_Query;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Scheme</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :
	<font color="#0000FF">out</font> Scheme_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">out</font> Unbounded_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>User</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">out</font> Unbounded_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Password</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :
	<font color="#0000FF">out</font> Unbounded_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Stored_Password</b> : <font color="#0000FF">out</font> Boolean;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Storage</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :
	<font color="#0000FF">out</font> Storage_Handle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
	<font color="#0000FF">is abstract</font>;</tt></p>
</blockquote>
<p>The function asks user to input the persistent storage type, name, user name and 
password. After successful completion the output parameters are set and the the 
parameter <b>Storage</b> is a valid handle to the persistent storage. When user 
cancels input <b>Storage</b> is invalid. An implementation may propagate 
Use_Error to indicate that the persistent storage should not be used, i.e. 
dropped. The output parameter <b>Scheme</b> indicates the type of the 
credentials, which then determines other output parameters:</p>
<ul>
	<li><i>DSN_Scheme</i>, <b>Name</b> is the persistent storage server name or 
	else DSN name. <b>User</b> is the user name, <b>Password</b> is the 
	password. <b>Stored_Password</b> is the pasword storing flag;</li>
	<li><i>SQLite_Scheme</i>, <b>Name</b> is the persistent storage name. <b>
	User</b> contains the SQLite data base file name. <b>Password</b> is an 
	empty string. <b>Stored_Password</b> is <font color="#800000"><i>false</i></font>.</li>
</ul>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Query</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">in out </font>Abstract_Credentials_Query;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Scheme</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 
	Scheme_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>User</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">in out</font> Unbounded_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Password</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :
	<font color="#0000FF">in out</font> Unbounded_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Stored_Password</b> : <font color="#0000FF">in out</font> Boolean;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Storage</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :
	<font color="#0000FF">out</font> Storage_Handle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
	<font color="#0000FF">is abstract</font>;</tt></p>
</blockquote>
<p>This procedure is like <a href="#Gtk.Persistent_Storage_Browser.Create">
Create</a>, but has initial values for <b>Scheme</b>, <b>Name</b>, <b>User</b> and <b>
Stored_Password</b>. Further, <b>Scheme</b> and&nbsp; <b>Name</b> cannot be changed.</p>
<blockquote>
	<p><tt><font color="#0000FF">package</font> Query_Handles
	<font color="#0000FF">is<br>
&nbsp;&nbsp; new </font>Object.Handle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Abstract_Credentials_Query,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	Abstract_Credentials_Query_Ptr<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
	<font color="#0000FF">use</font> Query_Handles;</tt></p>
</blockquote>
<p>This package provides handles to query objects.</p>
<h4>2.10.2. <a name="2.10.2"></a>Cache</h4>
<p>The package <a href="#Gtk.Persistent_Storage_Browser">Gtk.Persistent_Storage_Browser</a> defines a specialized directory cache of persistent objects:</p>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Gtk.Persistent_Storage_Browser.Gtk_Persistent_Directory_Record">
	</a>type</font> Gtk_Persistent_Directory_Record
	<font color="#0000FF">is<br>
&nbsp;&nbsp; new </font>Gtk_Abstract_Directory_Record <font color="#0000FF">with 
	private</font>;<br>
	<font color="#0000FF">type</font> Gtk_Persistent_Directory
	<font color="#0000FF">is<br>
&nbsp;&nbsp; access all</font> Gtk_Persistent_Directory_Record'Class;</tt></p>
</blockquote>
<p>The following additional operations are defined:</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Add_Storage<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Store</b>&nbsp;&nbsp; 
	: <font color="#0000FF">access</font> Gtk_Persistent_Directory_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Storage</b> : <font color="#0000FF">out</font> Storage_Handle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure can be called in order to query the user for a new persistent 
storage. for this it uses the credential dialog associated with the store. When 
the storage was successfully added a handle to it is returned. Otherwise it is 
set invalid. The storage is added at the root level. When the user chooses an 
already connected storage, its handle is returned.</p>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Gtk.Persistent_Storage_Browser.Browse"></a>procedure</font> Browse<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Store</b>&nbsp;&nbsp; 
	: <font color="#0000FF">access</font> Gtk_Persistent_Directory_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Path</b>&nbsp;&nbsp;&nbsp; 
	: Item_Path;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Storage</b> : <font color="#0000FF">out</font> Storage_Handle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Object</b>&nbsp; : <font color="#0000FF">out</font> Deposit_Handle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Partial</b> : Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure browses a path specified by the parameter <b>Path</b>. It 
returns a handle to the object indicated by the path (the parameter <b>Object</b>) 
and a handle to the persistent storage of (the parameter <b>Storage</b>). The 
persistent storage must be connected to be browsed. When the storage is not yet 
connected, or some items of the path do not exist End_Error is propagated. If 
the parameter <b>Partial</b> is <i><font color="#800000">true</font></i>, then 
the path is browsed as far as possible and End_Error is not propagated. 
Use_Error is propagated when an object on the path cannot be restored from the 
persistent storage because its class is unknown.</p>
<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>Data_Error</TD>
    <TD>Inconsistent storage</TD>
  </TR>
  <TR>
    <TD>End_Error</TD>
    <TD>Wrong path (some items do not exist)</TD>
  </TR>
  <TR>
    <TD>Name_Error</TD>
    <TD>Syntactically illegal path</TD>
  </TR>
  <TR>
    <TD>Use_Error</TD>
    <TD>Unknown object's class</TD>
  </TR>
</TABLE>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Delete<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Store</b> :
	<font color="#0000FF">access</font> Gtk_Persistent_Directory_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Path</b>&nbsp; 
	: Item_Path<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>The object specified by <b>Path</b> is unnamed and then the cache is 
synchronized as necessary. When <b>Path</b> specifies a persistent storage, then 
it is only disconnected and removed from the cache. Nothing happens when object 
does not exist.</p>
<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>Data_Error</TD>
    <TD>Inconsistent storage</TD>
  </TR>
  <TR>
    <TD>Name_Error</TD>
    <TD>Syntactically illegal path</TD>
  </TR>
  </TABLE>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Store</b> :
	<font color="#0000FF">access</font> Gtk_Persistent_Directory_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Path</b>&nbsp; 
	: Item_Path<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> String;</tt></p>
</blockquote>
<p>This function is similar to <a href="#Gtk.Persistent_Storage_Browser.Browse">
Browse</a> except that it returns the
<a href="http://www.dmitry-kazakov.de/ada/components.htm#Object.Archived.Get_Class">
object's class</a> rather than the object itself. Though it restores all objects 
along the path in order to get the class.</p>
<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>Data_Error</TD>
    <TD>Inconsistent storage</TD>
  </TR>
  <TR>
    <TD>End_Error</TD>
    <TD>Wrong path (some items do not exist)</TD>
  </TR>
  <TR>
    <TD>Name_Error</TD>
    <TD>Syntactically illegal path</TD>
  </TR>
  <TR>
    <TD>Use_Error</TD>
    <TD>Unknown object's class</TD>
  </TR>
</TABLE>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Creation_Time<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Store</b> :
	<font color="#0000FF">access</font> Gtk_Persistent_Directory_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Path</b>&nbsp; 
	: Item_Path<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Time;</tt></p>
</blockquote>
<p>This function is similar to <a href="#Gtk.Persistent_Storage_Browser.Browse">
Browse</a> except that it returns the
object's creation time. Though it restores all objects 
along the path in order to get the class.</p>
<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>Data_Error</TD>
    <TD>Inconsistent storage</TD>
  </TR>
  <TR>
    <TD>End_Error</TD>
    <TD>Wrong path (some items do not exist)</TD>
  </TR>
  <TR>
    <TD>Name_Error</TD>
    <TD>Syntactically illegal path</TD>
  </TR>
  <TR>
    <TD>Use_Error</TD>
    <TD>Unknown object's class</TD>
  </TR>
</TABLE>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Gtk.Persistent_Storage_Browser.Get_DSN"></a>function</font> Get_DSN<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
	<b>Store</b>&nbsp;&nbsp; 
	: <font color="#0000FF">access</font> Gtk_Persistent_Directory_Record;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	<b>Storage</b> 
	: Storage_Handle<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) 
	<font color="#0000FF">&nbsp;return</font> Item_Name;</tt></p>
</blockquote>
<p>The result is the DSN name of <b>Storage</b> as registered in <b>Store</b>. 
Constraint_Error is propagated when <b>Storage</b> is not cached in <b>Store</b>.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Manager <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Widget :
	<font color="#0000FF">access</font> Gtk_Persistent_Directory_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Gtk_Recent_Manager;</tt></p>
</blockquote>
<p>This function returns the recent resource manager used by the store.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Path<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Store</b>&nbsp;&nbsp; 
	: <font color="#0000FF">access</font> Gtk_Persistent_Directory_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Storage</b> 
	: Storage_Handle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Object</b>&nbsp; 
	: Deposit_Handle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Item_Path;</tt></p>
</blockquote>
<p>This function returns a path to <b>Object</b> in <b>Storage</b>. When <b>
Object</b> is invalid the result is the root directory path, i.e. same as 
returned by <a href="#Gtk.Persistent_Storage_Browser.Get_DSN">Get_DSN</a>, 
converted to Item_Path.</p>
<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>Constraint_Error</TD>
    <TD><b>Object</b> not persistent in <b>Storage</b></TD>
  </TR>
  <TR>
    <TD>Data_Error</TD>
    <TD>Inconsistent storage</TD>
  </TR>
  <TR>
    <TD>Name_Error</TD>
    <TD>The object is anonymous</TD>
  </TR>
  </TABLE>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Query<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Store</b> :
	<font color="#0000FF">access</font> Gtk_Persistent_Directory_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Query_Handles.Handle;</tt></p>
</blockquote>
<p>This function returns a handle to the
<a href="#Gtk.Persistent_Storage_Browser.Abstract_Credentials_Query">credential 
query dialog</a> used with <b>Store</b>.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Storage<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Store</b> :
	<font color="#0000FF">access</font> Gtk_Persistent_Directory_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Path</b>&nbsp; 
	: Item_Path<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Storage_Handle;</tt></p>
</blockquote>
<p>This function returns a handle to the storage where the object specified by
<b>Path</b> belongs. Root-level paths denote the storage itself. The result is 
an invalid handle if the storage is not yet connected.</p>
<TABLE border="5" cellpadding="3" cellspacing="0">
  <CAPTION align="top">
    <I>Exceptions</I>
  </CAPTION>
  <TR>
    <TD>Data_Error</TD>
    <TD>Inconsistent storage</TD>
  </TR>
  <TR>
    <TD>Name_Error</TD>
    <TD>Syntactically illegal path</TD>
  </TR>
  </TABLE>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Store</b>&nbsp;&nbsp; 
	: <font color="#0000FF">out</font> Gtk_Persistent_Directory;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Query</b>&nbsp;&nbsp; : Query_Handles.Handle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Manager</b> : <font color="#0000FF">access</font> 
	Gtk_Recent_Manager_Record'Class :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get_Default;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Tracing</b> : Traced_Actions := Trace_Nothing<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure creates a new cache. The parameter <b>Manager</b> is a
<a href="#Gtk.Recent_Manager.Gtk_Recent_Manager_Record">recent resource manager</a> 
to use. The manager keeps the configured persistent storage data sources as 
items. Each such item appears at the root level of the cache. When <b>Query</b> 
is an invalid handle no querying is used and so any root-level items attempted for 
browsing, which cannot be connected will be simply removed. The parameter <b>
Tracing</b> specifies the actions desired for tracing.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Store</b>&nbsp;&nbsp; 
	: <font color="#0000FF">access</font> Gtk_Persistent_Directory_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Query</b>&nbsp;&nbsp; : Query_Handles.Handle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Manager</b> : <font color="#0000FF">access</font> 
	Gtk_Recent_Manager_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Tracing</b> : Traced_Actions := Trace_Nothing<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure has to be called upon initialization of a derived type object.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Is_Directory<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Store</b> :
	<font color="#0000FF">access</font> Gtk_Persistent_Directory_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp; 
	: String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Class</b> 
	: String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Boolean;</tt></p>
</blockquote>
<p>This function is used to determine if a persistent object should be 
considered a directory. Only the objects for which this function returns <i>
<font color="#800000">true</font></i> are scanned for having children. In fact 
any persistent object may serve as a directory. But usually there is some 
restriction put on. The default implementation returns <i><font color="#800000">
true</font></i> only for the objects that have class <i>Directory</i>.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Set_Query<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Store</b> :
	<font color="#0000FF">access</font> Gtk_Persistent_Directory_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Query</b> : Query_Handles.Handle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure changes the
<a href="#Gtk.Persistent_Storage_Browser.Abstract_Credentials_Query">credential 
query dialog</a> of <b>Store</b> to <b>Query</b>.</p>
<h4>2.10.3. <a name="2.10.3"></a>Persistent storage tree view</h4>
<p>The package <a href="#Gtk.Persistent_Storage_Browser">Gtk.Persistent_Storage_Browser</a> provides a specialized tree view widget for persistent 
directories tree (see <a href="#Gtk.Abstract_Browser.Gtk_Directory_Tree_View">Gtk_Directory_Tree_View</a>):</p>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Gtk.Persistent_Storage_Browser.Gtk_Persistent_Storage_Tree_View_Record">
	</a>type</font> Gtk_Persistent_Storage_Tree_View_Record
	<font color="#0000FF">is<br>
&nbsp;&nbsp; new</font> Gtk_Directory_Tree_View_Record <font color="#0000FF">
	with private</font>;<br>
	<font color="#0000FF">type</font> Gtk_Persistent_Storage_Tree_View
	<font color="#0000FF">is<br>
&nbsp;&nbsp; access all</font> Gtk_Persistent_Storage_Tree_View_Record'Class;</tt></p>
</blockquote>
<p>The following additional operations are provided:</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Current_Object<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">access</font> Gtk_Persistent_Storage_Tree_View<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Deposit_Handle;</tt></p>
</blockquote>
<p>This function returns a handle to the currently selected directory. The result is 
an invalid handle if no directory is selected. Data_Error is propagated on 
storage errors.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Current_Storage<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">access</font> Gtk_Persistent_Storage_Tree_View<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Storage_Handle;</tt></p>
</blockquote>
<p>This function returns a handle to the storage where the currently selected 
directory resides. The result is 
an invalid handle if no directory is selected. Data_Error is propagated on 
storage errors.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Directory_Cache<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">access</font> Gtk_Persistent_Storage_Tree_View<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Gtk_Persistent_Directory;</tt></p>
</blockquote>
<p>The function returns the directory cache associated with the widget.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp; 
	: <font color="#0000FF">out</font> Gtk_Persistent_Storage_Tree_View;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Store</b>&nbsp;&nbsp;&nbsp; : <font color="#0000FF">access</font> 
	Gtk_Persistent_Directory_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Selected</b> : Item_Path := &quot;&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure creates a new widget. The parameter <b>Selected</b> is the 
path of an item to expand the directory tree to. When the item is a directory it 
is selected. Otherwise its parent is selected. When <b>Selected</b> is an empty 
string then nothing is done.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp; 
	: <font color="#0000FF">access</font> 
	Gtk_Persistent_Storage_Tree_View_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Store</b>&nbsp;&nbsp;&nbsp; : <font color="#0000FF">access</font> 
	Gtk_Persistent_Directory_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Selected</b> : Item_Path<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure has to be called upon initialization of a derived type object.</p>
<blockquote>
	<p><tt>Persistent_Storage_Tree_View_Class_Name : <font color="#0000FF">
	constant</font> String :=<br>
&nbsp;&nbsp; &quot;<font color="#FF0000">GtkPersistentStorageTreeView</font>&quot;;</tt></p>
</blockquote>
<p>This string constant contains the <a href="http://www.gtk.org">GTK+</a> 
	class name of the widget. <tt><font color="#0000FF">
	<a name="Gtk.Persistent_Storage_Browser.Gtk_Persistent_Storage_Tree_View_Record-properties">
	</a></font> </tt>The widget has the following additional style properties:</p>
<TABLE border="5" cellpadding="3" cellspacing="0">
  <TR>
    <TD valign="top" bgcolor="#008080"><font color="#FFFFFF"><b>Name</b></font></TD>
    <TD valign="top" bgcolor="#008080" align="center"><font color="#FFFFFF"><b>GTK+ 
	type</b></font></TD>
    <TD valign="top" bgcolor="#008080"><b><font color="#FFFFFF">Description</font></b></TD>
  </TR>
  <TR>
    <TD valign="top">message-title</TD>
    <TD valign="top" align="center"><i>string</i></TD>
    <TD valign="top">The message dialog title</TD>
  </TR>
  <TR>
    <TD valign="top">name-conflict-error</TD>
    <TD valign="top" align="center"><i>string</i></TD>
    <TD valign="top">The message shown when a name of a renamed object is 
	already in use</TD>
  </TR>
  <TR>
    <TD valign="top">null-renaming-error</TD>
    <TD valign="top" align="center">
	<i>string</i></TD>
    <TD valign="top">The message shown when a name specified is empty</TD>
  </TR>
  <TR>
    <TD valign="top">root-renaming-error</TD>
    <TD valign="top" align="center"><i>string</i></TD>
    <TD valign="top">The message shown when a storage (root-level item) is 
	renamed. Storage (data sources) can be renamed only by operating system 
	specific means.</TD>
  </TR>
  <TR>
    <TD valign="top">storage-error</TD>
    <TD valign="top" align="center"><i>string</i></TD>
    <TD valign="top">The message shown on a persistent storage fault</TD>
  </TR>
  </TABLE>
<h4>2.10.4. <a name="2.10.4"></a>Persistent storage objects view</h4>
<p>The package <a href="#Gtk.Persistent_Storage_Browser">Gtk.Persistent_Storage_Browser</a> provides a specialized tree view widget for persistent object 
directories rendered as a columned list:</p>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Gtk.Persistent_Storage_Browser.Gtk_Persistent_Storage_Items_View_Record">
	</a>type</font> 
	Gtk_Persistent_Storage_Items_View_Record<font color="#0000FF"> is<br>
&nbsp;&nbsp; new </font>Gtk_Directory_Items_View_Record <font color="#0000FF">
	with private</font>;<br>
	<font color="#0000FF">type</font> Gtk_Persistent_Storage_Items_View i<font color="#0000FF">s<br>
&nbsp;&nbsp; access all</font> Gtk_Persistent_Storage_Items_View_Record'Class;</tt></p>
</blockquote>
<p>The following additional operations are provided:</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Directory_Cache<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">access</font> Gtk_Persistent_Storage_Items_View<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Gtk_Persistent_Directory;</tt></p>
</blockquote>
<p>The function returns the directory cache associated with the widget.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Directory_Object<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">access</font> Gtk_Persistent_Storage_Items_View<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Deposit_Handle;</tt></p>
</blockquote>
<p>This function returns a handle to the current directory. The result is 
an invalid handle if no directory is selected. Data_Error is propagated on 
storage errors.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Storage<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">access</font> Gtk_Persistent_Storage_Items_View<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Storage_Handle;</tt></p>
</blockquote>
<p>This function returns a handle to the storage where the currentl 
directory resides. The result is 
an invalid handle if no directory is selected. Data_Error is propagated on 
storage errors.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; 
	: <font color="#0000FF">out</font> Gtk_Persistent_Storage_Items_View;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Store</b>&nbsp;&nbsp; : <font color="#0000FF">access</font> 
	Gtk_Persistent_Directory_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Columns</b> : Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Current</b> : Item_Path := &quot;&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure creates a new widget. The parameter <b>Store</b> is a
<a href="#Gtk.Persistent_Storage_Browser.Gtk_Persistent_Directory_Record">cache</a> 
object to use with. The parameter <b>Columns</b> is the number of columns. The 
parameter <b>Current</b> is the directory to render initially.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; 
	: <font color="#0000FF">out</font> Gtk_Persistent_Storage_Items_View;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Tree</b>&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">access</font> 
	Gtk_Persistent_Storage_Tree_View_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Columns</b> : Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This variant of the procedure creates a new widget which works with a
<a href="#Gtk.Persistent_Storage_Browser.Gtk_Persistent_Storage_Tree_View_Record">
directory browsing widget</a> specified by the parameter <b>Tree</b>.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; 
	: <font color="#0000FF">access</font> 
	Gtk_Persistent_Storage_Items_View_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Store</b>&nbsp;&nbsp; : <font color="#0000FF">access</font> 
	Gtk_Persistent_Directory_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Columns</b> : Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Current</b> : Item_Path<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
	<font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; 
	: <font color="#0000FF">access</font> 
	Gtk_Persistent_Storage_Items_View_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Tree</b>&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">access</font> 
	Gtk_Persistent_Storage_Tree_View_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Columns</b> : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>One of these procedures have to be called upon initialization of a derived type object.</p>
<blockquote>
	<p><tt>Persistent_Storage_Items_View_Class_Name : <font color="#0000FF">
	constant</font> String :=<br>
&nbsp;&nbsp; &quot;<font color="#FF0000">GtkPersistentStorageItemsView</font>&quot;;</tt></p>
</blockquote>
<p>This string constant contains the <a href="http://www.gtk.org">GTK+</a> 
	class name of the widget. The widget has the same additional style 
properties as 
<a href="#Gtk.Persistent_Storage_Browser.Gtk_Persistent_Storage_Tree_View_Record-properties">
Persistent_Storage_Tree_View_Class_Name</a>.</p>
<h4>2.10.5. <a name="2.10.5"></a>Persistent storage browsing widget</h4>
<p>The package <a href="#Gtk.Persistent_Storage_Browser">Gtk.Persistent_Storage_Browser</a> provides a composite widget for browsing persistent storage 
directories:</p>
<blockquote>
	<p><tt><font color="#0000FF">type</font> 
	Gtk_Persistent_Storage_Browser_Record<font color="#0000FF"> is<br>
&nbsp;&nbsp; new </font>Gtk_Paned_Record <font color="#0000FF">with private</font>;<br>
	<font color="#0000FF">type</font> Gtk_Persistent_Storage_Browser
	<font color="#0000FF">is<br>
&nbsp;&nbsp; access all</font> Gtk_Persistent_Storage_Browser_Record'Class;</tt></p>
</blockquote>
<p>The widget is a descendant of paned. One of its children is a
<a href="#Gtk.Persistent_Storage_Browser.Gtk_Persistent_Storage_Tree_View_Record">
tree view</a> of the persistent storage directory browsed another is
<a href="#Gtk.Persistent_Storage_Browser.Gtk_Persistent_Storage_Items_View_Record">
a columned list</a> of persistent objects in the currently viewed directory. The following operations are provided:</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Filter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">access</font> Gtk_Persistent_Storage_Browser_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Directory</b> 
	: Boolean;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Item_Name;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Kind</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Item_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Boolean;</tt></p>
</blockquote>
<p>This function can be overridden to prevent some objects from being shown in 
the directory items pane. The default implementation lets all items in.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Cache<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">access</font> Gtk_Persistent_Storage_Browser_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Gtk_Persistent_Directory;</tt></p>
</blockquote>
<p>This function returns the cache used by the widget.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Items_View<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">access</font> Gtk_Persistent_Storage_Browser_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Gtk_Persistent_Storage_Items_View;</tt></p>
</blockquote>
<p>This function returns the widget of
<a href="#Gtk.Persistent_Storage_Browser.Gtk_Persistent_Storage_Items_View_Record">
columned list</a> pane.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Manager <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Widget :
	<font color="#0000FF">access</font> Gtk_Persistent_Storage_Browser_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Gtk_Recent_Manager;</tt></p>
</blockquote>
<p>This function returns the recent resource manager used by the widget.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Tracing<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Store</b> :
	<font color="#0000FF">access</font> Gtk_Persistent_Storage_Browser_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Traced_Actions;</tt></p>
</blockquote>
<p>This function returns the current state of tracing.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Tree_View<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
	<font color="#0000FF">access</font> Gtk_Persistent_Storage_Browser_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Gtk_Persistent_Storage_Tree_View;</tt></p>
</blockquote>
<p>This function returns the widget of
<a href="#Gtk.Persistent_Storage_Browser.Gtk_Persistent_Storage_Tree_View_Record">
tree view</a> pane.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">out</font> Gtk_Persistent_Storage_Browser;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Query</b>&nbsp;&nbsp;&nbsp;&nbsp; : Query_Handles.Handle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Path</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Item_Path&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := &quot;&quot;;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Columns</b>&nbsp;&nbsp; : Positive&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">4</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Vertical</b>&nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Tree_Size</b> : Gtk_Requisition := (Width =&gt; <font color="#800000">180</font>, 
	Height =&gt; <font color="#800000">500</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	List_Size</b> : Gtk_Requisition := (Width =&gt; <font color="#800000">600</font>, 
	Height =&gt; <font color="#800000">500</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Store</b>&nbsp;&nbsp;&nbsp;&nbsp; : Gtk_Persistent_Directory :=
	<font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Manager</b>&nbsp;&nbsp; : <font color="#0000FF">access</font> 
	Gtk_Recent_Manager_Record'Class :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	Get_Default;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Tracing</b>&nbsp;&nbsp; : Traced_Actions&nbsp; := Trace_Nothing<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure creates a new widget. The parameter <b>Query</b> 
is a handle to a
<a href="#Gtk.Persistent_Storage_Browser.Abstract_Credentials_Query">querying</a> 
object. When <b>Query</b> 
is an invalid handle no querying is used and so any root-level items attempted for 
browsing, which cannot be connected will be simply removed. The parameter <b>
Path</b> is the path to select initially. It is expanded as far as possible. The 
parameter <b>Columns</b> specifies the number columns in the objects view. When 
the parameter <b>Vertical</b> is <i><font color="#800000">false</font></i> the 
tree view is shown left of the objects view. Otherwise it is shown above it. The 
parameters <b>Tree_Size</b> and <b>List_Size</b> control size of the directory 
tree and objects list panes. The widget will try to render them so that no scroll 
bars will appear. For this the panes will be expanded but not larger than the 
corresponding parameters specify. The 
parameter <b>Store</b> is the directory cache to use with the widget. When 
specified as <font color="#0000FF">null</font> a new directory cache is created 
transparently. The parameter <b>Manager</b> is a
<a href="#Gtk.Recent_Manager.Gtk_Recent_Manager_Record">recent resource manager</a> 
to use. The manager keeps the configured persistent storage data sources as 
items. Each such item appears at the root level of the cache. The parameter <b>
Tracing</b> specifies the actions desired for tracing.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">access</font> 
	Gtk_Persistent_Storage_Browser_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Query</b>&nbsp;&nbsp;&nbsp;&nbsp; : Query_Handles.Handle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Path</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Item_Path;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Columns</b>&nbsp;&nbsp; : Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Vertical</b>&nbsp; : Boolean;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Tree_Size</b> : Gtk_Requisition;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	List_Size</b> : Gtk_Requisition;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Store</b>&nbsp;&nbsp;&nbsp;&nbsp; : Gtk_Persistent_Directory;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Manager</b>&nbsp;&nbsp; : <font color="#0000FF">access</font> 
	Gtk_Recent_Manager_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Tracing</b>&nbsp;&nbsp; : Traced_Actions<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>One of these procedures have to be called upon initialization of a derived type object.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Set_Tracing<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; 
	: <font color="#0000FF">access</font> 
	Gtk_Persistent_Storage_Browser_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Tracing</b> : Traced_Actions<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure changes tracing status. The parameter <b>Tracing</b> defines 
which actions need to be traced.</p>
<h4>2.10.6. <a name="2.10.6"></a>User credentials input</h4>
<p>The package Gtk.Persistent_Storage_Credentials_Dialog provides an abstract 
implementation of
<a href="#Gtk.Persistent_Storage_Browser.Abstract_Credentials_Query">querying</a> 
object based on a dialogue:</p>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Gtk.Persistent_Storage_Credentials_Dialog.Dialog_Credentials_Query">
	</a>type</font> Dialog_Credentials_Query <font color="#0000FF">is abstract<br>
&nbsp;&nbsp; new</font> Abstract_Credentials_Query <font color="#0000FF">with 
	private</font>;</tt></p>
</blockquote>
<p>It has an abstract primitive operation to implement:</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Connect<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Query</b>&nbsp;&nbsp;&nbsp; 
	: Dialog_Credentials_Query;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>User</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Password</b> 
	: UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Storage_Handle <font color="#0000FF">is abstract</font>;</tt></p>
</blockquote>
<p>The implementation uses the parameters <b>Name</b>, <b>User</b> and <b>
Password</b> in order to connect to a persistent storage. A handle to it is 
returned. Data_Error is propagated on storage errors. Use_Error is propagated 
when the credentials are wrong.</p>
<blockquote>
	<p><tt><font color="#0000FF">type</font> 
	Gtk_Persistent_Storage_Credentials_Dialog_Record i<font color="#0000FF">s<br>
&nbsp;&nbsp; new</font> Gtk_Dialog_Record <font color="#0000FF">with private</font>;<br>
	<font color="#0000FF">type</font> Gtk_Persistent_Storage_Credentials_Dialog
	<font color="#0000FF">is<br>
&nbsp;&nbsp; access all</font> Gtk_Persistent_Storage_Credentials_Dialog_Record'Class;</tt></p>
</blockquote>
<p>is the dialogue used by
<a href="#Gtk.Persistent_Storage_Credentials_Dialog.Dialog_Credentials_Query">
Dialog_Credentials_Query</a>: The widget has the following additional style properties:</p>
<TABLE border="5" cellpadding="3" cellspacing="0">
  <TR>
    <TD valign="top" bgcolor="#008080"><font color="#FFFFFF"><b>Name</b></font></TD>
    <TD valign="top" bgcolor="#008080"><font color="#FFFFFF"><b>GTK+ Type</b></font></TD>
    <TD valign="top" bgcolor="#008080" align="center"><font color="#FFFFFF"><b>
	Default</b></font></TD>
    <TD valign="top" bgcolor="#008080"><b><font color="#FFFFFF">Description</font></b></TD>
  </TR>
  <TR>
    <TD valign="top">cancel-button-label</TD>
    <TD valign="top" align="center"><i>string</i></TD>
    <TD valign="top" align="center"><tt>_Cancel</tt></TD>
    <TD valign="top">The label of the cancel button</TD>
  </TR>
  <TR>
    <TD valign="top">column-spacing</TD>
    <TD valign="top" align="center">GInt</TD>
    <TD valign="top" align="center"><tt>3</tt></TD>
    <TD valign="top">Column spacing of the dialog elements</TD>
  </TR>
  <TR>
    <TD valign="top">confirm-button-label</TD>
    <TD valign="top" align="center">
	<i>string</i></TD>
    <TD valign="top" align="center">
	<tt>_OK</tt></TD>
    <TD valign="top">The label of the confirm button</TD>
  </TR>
  <TR>
    <TD valign="top">credentials-error</TD>
    <TD valign="top" align="center"><i>string</i></TD>
    <TD valign="top" align="center">&nbsp;</TD>
    <TD valign="top">The message on data source access error</TD>
  </TR>
  <TR>
    <TD valign="top">empty-name-error</TD>
    <TD valign="top" align="center"><i>string</i></TD>
    <TD valign="top" align="center">&nbsp;</TD>
    <TD valign="top">The message when data source name is empty</TD>
  </TR>
  <TR>
    <TD valign="top">name-label</TD>
    <TD valign="top" align="center"><i>string</i></TD>
    <TD valign="top" align="center"><tt>Name</tt></TD>
    <TD valign="top">The label of the data source name entry</TD>
  </TR>
  <TR>
    <TD valign="top">open-error</TD>
    <TD valign="top" align="center"><i>string</i></TD>
    <TD valign="top" align="center">&nbsp;</TD>
    <TD valign="top">The message on data source open error</TD>
  </TR>
  <TR>
    <TD valign="top">password-label</TD>
    <TD valign="top" align="center"><i>string</i></TD>
    <TD valign="top" align="center"><tt>Password</tt></TD>
    <TD valign="top">The label of the password entry</TD>
  </TR>
  <TR>
    <TD valign="top">row-spacing</TD>
    <TD valign="top" align="center">GInt</TD>
    <TD valign="top" align="center"><tt>3</tt></TD>
    <TD valign="top">Row spacing of the dialog elements</TD>
  </TR>
  <TR>
    <TD valign="top">stored-password-label</TD>
    <TD valign="top" align="center"><i>string</i></TD>
    <TD valign="top" align="center"><tt>Remember password</tt></TD>
    <TD valign="top">The label of the password storing check box</TD>
  </TR>
  <TR>
    <TD valign="top">user-label</TD>
    <TD valign="top" align="center"><i>string</i></TD>
    <TD valign="top" align="center"><tt>User</tt></TD>
    <TD valign="top">The label of the user name entry</TD>
  </TR>
  <TR>
    <TD valign="top">title</TD>
    <TD valign="top" align="center"><i>string</i></TD>
    <TD valign="top" align="center"><tt>User credentials</tt></TD>
    <TD valign="top">The dialog title</TD>
  </TR>
  </TABLE>
<blockquote>
	<p><tt>Persistent_Storage_Credentials_Dialog_Class_Name : <font color="#0000FF">
	constant</font> String :=<br>
&nbsp;&nbsp; &quot;<font color="#FF0000">GtkPersistentStorageCredentialsDialog</font>&quot;;</tt></p>
</blockquote>
<p>This string constant contains the <a href="http://www.gtk.org">GTK+</a> 
	class name of the widget.</p>
<h4>2.10.7. <a name="2.10.7"></a>User credentials input for GNADE</h4>
<p>The package Gtk.Persistent_Storage_Credentials_Dialog.ODBC provides an 
implementation of
<a href="#Gtk.Persistent_Storage_Credentials_Dialog.Dialog_Credentials_Query">
Dialog_Credentials_Query</a> for <a href="http://gnade.sourceforge.net/">GNADE</a> 
ODBC persistent storages.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Create <font color="#0000FF">
	return</font> Query_Handles.Handle;</tt></p>
</blockquote>
<p>This function create a new
<a href="#Gtk.Persistent_Storage_Browser.Abstract_Credentials_Query">querying</a> 
object and returns a handle to it.</p>
<hr>
<p align="right">
  <a name="3"></a><a href="#2"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><a href="#14"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></a><a href="#4"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H2>3. Embeddable images</H2>
<p><a name="xpm2gtkada"></a>The utility xpm2gtkada is a small utility which reads an XPM file from the 
standard input and creates Ada packages for embedding the image into a GtkAda 
application. Differently to
<a href="https://developer.gnome.org/gdk2/stable/gdk2-Bitmaps-and-Pixmaps.html#gdk-pixmap-create-from-xpm-d">gdk_pixmap_create_from_xpm_d</a> and its equivalent in
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/">GtkAda</a> it stores the image as a
<a href="https://developer.gnome.org/gdk-pixbuf/stable/gdk-pixbuf-The-GdkPixbuf-Structure.html#GdkPixbuf-struct">GdkPixbuf</a> 
object that can be directly rendered.</p>
<p>The generated files are named after the XPM image name stored in 
the XPM file. Each XPM file usually starts as:</p>
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt><font color="#008000">/* XPM */</font><font color="#0000FF"><br>
static char </font>* <blink><font color="#FF0000">&lt;<i>name</i>&gt;</font></blink> 
[] = {</tt></TD>
  </TR>
</TABLE>

<p>Basically an XPM file is a C program snippet. &lt;<i>name</i>&gt; from the file is 
used to name the generated files. Three files are created:</p>
<ul>
	<li>&lt;<i>name</i>&gt;.ads contains the image pixels and the mask;</li>
	<li>&lt;<i>name</i>&gt;-image.ads contains a child function to get a Gtk_Image 
	object;</li>
	<li>&lt;<i>name</i>&gt;-image.adb is the implementation of.</li>
</ul>
<p>The utility creates image as a
<a href="https://developer.gnome.org/gdk-pixbuf/stable/gdk-pixbuf-The-GdkPixbuf-Structure.html#GdkPixbuf-struct">GdkPixbuf</a> object. 
The package &lt;<i>name</i>&gt;.ads will look like:</p>File <EM>
<font color="#FF0000">&lt;name&gt;</font>.ads</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#FFDEBD"><tt><font color="#0000FF">with</font> Gdk.Pixbuf;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Gdk.Pixbuf;<br>
<font color="#0000FF">with</font> GLib;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> GLib;<br>
<font color="#0000FF">with</font> Interfaces.C;&nbsp; <font color="#0000FF">use</font> 
Interfaces.C;<br>
<font color="#0000FF">with</font> System;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> System;<br>
<br>
<font color="#0000FF">package</font> <blink><i><font color="#FF0000">&lt;name&gt;</font></i></blink>
<font color="#0000FF">is</font><br>
&nbsp;&nbsp; X_Size : <font color="#0000FF">constant</font> GInt := ...;<br>
&nbsp;&nbsp; Y_Size : <font color="#0000FF">constant</font> GInt := ...;<br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Pixbuf_Image
<font color="#0000FF">is array </font>(Natural <font color="#0000FF">range</font> 
...) <font color="#0000FF">of</font> GUChar;<br>
&nbsp;&nbsp; <font color="#0000FF">pragma</font> Convention (C, Pixbuf_Image);<br>
&nbsp;&nbsp; Pixels : <font color="#0000FF">constant</font> Pixbuf_Image := ...<br>
&nbsp;&nbsp; <font color="#0000FF">function</font> Get_Pixbuf
<font color="#0000FF">return</font> Gdk_Pixbuf;</tt></TD>
  </TR>
</TABLE>

<p>Here X_Size and Y_Size are the image width and height. Pixels is the array of 
image pixels. The function Get_Pixbuf creates a Gdk_Pixbuf object from the pixel 
data. It will contain the alpha channel when the file has a transparent color. The returned value of Get_Pixbuf should be freed when no more needed. The object 
created by Get_Pixbuf is just a reference to the statically allocated buffer 
Pixels. The file &lt;<i>name</i>&gt;.adb contains the implementation of the package.</p>

<p> The package &lt;<i>name</i>&gt;-image.ads provides an easy way to create an image object on demand:</p>File <EM>
<font color="#FF0000">&lt;name&gt;</font>.ads</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#FFDEBD"><tt><font color="#0000FF">with</font> Gtk.Image; <font color="#0000FF">&nbsp;use</font> 
Gtk.Image;<br>
<br>
<font color="#0000FF">function</font> <blink><i><font color="#FF0000">&lt;name&gt;</font></i></blink>.Image<font color="#0000FF"> return</font> Gtk_Image;</tt></TD>
  </TR>
</TABLE>

<p> The function returns a new Gtk_Image object corresponding to the image.</p>
<h3> <a name="3.1"></a>3.1. Building xpm2gtkada from the source</h3>
<p> To compile the utility from sources one needs 
<a href="http://www.dmitry-kazakov.de/ada/components.htm">simple components</a>. Under 
Windows it can be compiled with GNAT Ada:</p>
<blockquote>
	<tt>&gt;gnatmake -I&lt;<i>components</i>&gt; -I&lt;<i>components</i>&gt;\xpm xpm2gtkada.adb</tt>
</blockquote>
<p> Under Linux it can be compiled as:</p>
<blockquote>
	<tt>&gt;gnatmake -I&lt;<i>components</i>&gt; -I&lt;<i>components</i>&gt;/xpm xpm2gtkada.adb</tt>
</blockquote>
<p> In both cases &lt;<i>components</i>&gt; refers to the directory where 
<a href="http://www.dmitry-kazakov.de/ada/components.htm">simple components</a> are situated.</p>
<h3> <a name="3.2"></a>3.2. Usage of xpm2gtkada </h3>
<p> The utility is called as follows:</p>
<blockquote>
	<tt>&gt;xpm2gtkada &lt; <font color="#FF0000">&lt;<i>file</i>&gt;</font>.xpm</tt></blockquote>
<p>The optional argument determines the type of images to use. By default it is
<i>pixbuf</i>. XPM files can be created and edited using any appropriate imaging tool. For 
example, by <a href="http://www.gimp.org/index.html">GIMP</a></p>
<p>First you create a <i>my_image.xpm</i> file with the image in. Then you call:</p>
<blockquote>
	<tt>&gt;xpm2gtkada &lt; my_image.xpm</tt></blockquote>
<p>This produces <i>my_image_xpm.ads</i>, <i>my_image_xpm-image.ads</i> and <i>
my_image_xpm-image.adb</i>. Then the following code snippet could be used to 
create a button with an image on it: </p>
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt><font color="#0000FF">with</font> My_Image_XPM.Image;<br>
...<br>
<font color="#0000FF">procedure</font> Gtk_New_Button<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Button :
<font color="#0000FF">out</font> Gtk_Button;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Text&nbsp;&nbsp; 
: UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Image&nbsp; 
: <font color="#0000FF">access</font> Gtk_Widget_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is</font><br>
&nbsp;&nbsp; Label : Gtk_Label;<br>
&nbsp;&nbsp; Box&nbsp;&nbsp; : Gtk_Box;<br>
<font color="#0000FF">begin</font><br>
&nbsp;&nbsp; Gtk_New_HBox (Box, False, <font color="#800000">0</font>);<br>
&nbsp;&nbsp; Gtk_New (Label, Text);<br>
&nbsp;&nbsp; Set_Border_Width (Box, <font color="#800000">2</font>);<br>
&nbsp;&nbsp; Pack_Start (Box, Image, False, False, <font color="#800000">3</font>);<br>
&nbsp;&nbsp; Pack_Start (Box, Label, False, False, <font color="#800000">3</font>);<br>
&nbsp;&nbsp; Show (Image);<br>
&nbsp;&nbsp; Show (Label);<br>
&nbsp;&nbsp; Gtk_New (Button);<br>
&nbsp;&nbsp; Add (Button, Box);<br>
<font color="#0000FF">end</font> Gtk_New_Button;<br>
...<br>
Gtk_New_Button (My_Button, &quot;<font color="#FF0000">My button</font>&quot;, 
My_Image_XPM.Image);</tt></TD>
  </TR>
</TABLE>
<p> Another example where embedded images are useful is stock icons. A stock 
icon can be used by
<a href="https://developer.gnome.org/gtk3/stable/GtkCellRendererPixbuf.html">
GtkCellRendererPixbuf</a>'s property &quot;<i>stock-id</i>&quot;. The following code 
snippet shows how to add stock icons from pixbuf images generated by xmp2gtkada:</p>
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt><font color="#0000FF">with</font> My_Image_XPM;<font color="#008000"> 
-- The image data</font><br>
<br>
<font color="#0000FF">with</font> Gdk.Pixbuf;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Gdk.Pixbuf;<br>
<font color="#0000FF">with</font> Gtk.Icon_Factory;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Gtk.Icon_Factory;<br>
<font color="#0000FF">with</font> Gtk.Stock;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Gtk.Stock;<br>
<font color="#0000FF">with</font> Interfaces.C.Strings; <font color="#0000FF">
use</font> Interfaces.C.Strings;<br>
<br>
...<br>
<font color="#0000FF">&nbsp;&nbsp; type</font> Gtk_Stock_Item_Ptr
<font color="#0000FF">is access all </font>Gtk_Stock_Item;<br>
&nbsp;&nbsp; <font color="#0000FF">pragma</font> Convention (C, 
Gtk_Stock_Item_Ptr);<br>
<font color="#008000">&nbsp;&nbsp; -- This is a helper procedure, for standard 
ones aren't<br>
&nbsp;&nbsp; -- much convenient...<br>
</font>&nbsp;&nbsp; <font color="#0000FF">procedure</font> Add_Stock<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
Picture : Gdk_Pixbuf;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Name&nbsp;&nbsp;&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Label&nbsp;&nbsp; : String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; 
is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">procedure</font> Unref (Set 
: Gtk_Icon_Set);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">pragma</font> Import (C, 
Unref, &quot;<font color="#FF0000">gtk_icon_set_unref</font>&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">function</font> 
New_From_Pixbuf (Pxibvuf : Gdk_Pixbuf)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> 
Gtk_Icon_Set;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">pragma</font> Import<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
C,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
New_From_Pixbuf,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
&quot;<font color="#FF0000">gtk_icon_set_new_from_pixbuf</font>&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Item : Gtk_Stock_Item_Ptr :=
<font color="#0000FF">new</font> Gtk_Stock_Item;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set&nbsp; : Gtk_Icon_Set;<br>
&nbsp;&nbsp; <font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set := New_From_Pixbuf (Picture);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Add (Icons, Name, Set);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Unref (Set);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Unref (Picture);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Item.Stock_ID := New_String (Name);<font color="#008000"> 
-- Don't free it!</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Item.Label&nbsp;&nbsp;&nbsp; := New_String 
(Label);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Item.Modifier := <font color="#800000">0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Item.KeyVal&nbsp;&nbsp; := <font color="#800000">
0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Item.Translation_Domain := Null_Ptr;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Add_Static (Item.<font color="#0000FF">all</font>);<font color="#008000"> 
-- This is important to do</font><br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Add_Stock;<br>
&nbsp;&nbsp;
...<br>
&nbsp;&nbsp; Icons : Gtk_Icon_Factory;<br>
&nbsp;&nbsp;
...<br>
&nbsp;&nbsp; Gtk_New (Icons);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#008000">-- Do it once, and don't Unref</font><br>
&nbsp;&nbsp; Add_Default (Icons);&nbsp; <font color="#008000">-- This is 
important</font> <br>
&nbsp;&nbsp; Add_Stock<br>
&nbsp;&nbsp; (&nbsp; My_Image_XPM.Get_Pixbuf,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">my-image</font>&quot;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">The label of</font>&quot;<br>
&nbsp;&nbsp; );</tt></TD>
  </TR>
</TABLE>
<p> Now if
<a href="https://developer.gnome.org/gtk3/stable/GtkCellRendererPixbuf.html">
GtkCellRendererPixbuf</a> meets the string &quot;<i>my-image</i>&quot; it will render it 
as the image from My_Image_XPM.ads. Note that Gtk_Stock_Item, the factory Icons 
and some other stuff are allocated, but never freed. 
	<a href="http://www.gtk.org">GTK+</a> 
	reference counting isn't much consequent...</p>
<h3> <a name="3.3"></a>3.3. Memory-mapped images</h3>
<p> <a name="Gdk.Pixbuf.Image"></a>The package Gdk.Pixbuf.Image provides 
memory-mapped images. The image pixels can be manipulated directly in the 
memory. The image can be rendered on a cairo context without additional 
conversions. The package declares the following types:</p>
<blockquote>
	<p><tt><font color="#0000FF">type</font> X_Axis <font color="#0000FF">is new</font> 
	GInt;<br>
	<font color="#0000FF">type</font> Y_Axis <font color="#0000FF">is new</font> 
	GInt;</tt></p>
</blockquote>
<p>These are the types of the horizontal and vertical coordinates of the image. 
The left top corner of the image has the coordinates (1, 1).</p>
<blockquote>
	<p><tt><font color="#0000FF">type</font> RGB_Pixel <font color="#0000FF">is 
	record</font><br>
&nbsp;&nbsp; Red&nbsp;&nbsp; : GUChar;<br>
&nbsp;&nbsp; Green : GUChar;<br>
&nbsp;&nbsp; Blue&nbsp; : GUChar;<br>
	<font color="#0000FF">end record</font>;<br>
	<font color="#0000FF">for</font> RGB_Pixel'Size <font color="#0000FF">use</font>
	<font color="#800000">3</font> * <font color="#800000">8</font>;<br>
	<font color="#0000FF">pragma</font> Convention (C, RGB_Pixel);</tt></p>
</blockquote>
<p>This is the type of a pixel. The representation allows effective rendering without 
additional conversions. The following operations are provided:</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> From_Pixel (<b>Pixel</b> : 
	RGB_Pixel) <font color="#0000FF">return</font> Gdk_Color;</tt></p>
</blockquote>
<p>This function converts its parameter to color.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> To_Pixel (<b>Color</b> : 
	Gdk_Color) <font color="#0000FF">return</font> RGB_Pixel;</tt></p>
</blockquote>
<p>This function converts its color parameter to pixel.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Gdk.Pixbuf.Image.RGB_Image"></a>type</font> 
	RGB_Image <font color="#0000FF">is tagged private</font>;</tt></p>
</blockquote>
<p>Objects of this type represent memory-mapped imaged. Note that the object not 
limited and thus can be copied. The following operations 
are defined on the type:</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Draw<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Image</b>&nbsp;&nbsp; 
	: RGB_Image;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Context</b> : Cairo_Context;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>X</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: GInt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Y</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: GInt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>X1</b>,
	<b>X2</b>&nbsp; : X_Axis;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Y1</b>,
	<b>Y2</b>&nbsp; : Y_Axis<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure draws <b>Image</b>'s rectangle <b>X1</b>..<b>X2</b>
<font face="Times New Roman">&times;</font> <b>Y1</b>..<b>Y2</b> in <b>Context</b> at
(<b>X</b>, <b>Y</b>). Constraint_Error is propagated when the rectangle is not 
completely in the image.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Erase<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Image</b> :
	<font color="#0000FF">in out</font> RGB_Image;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Pixel</b> : RGB_Pixel<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
	<font color="#0000FF">procedure</font> Erase<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Image</b> :
	<font color="#0000FF">in out</font> RGB_Image;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Color</b> : Gdk_Color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures erase the image using specified color.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Image</b> : 
	RGB_Image;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>X</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: X_Axis;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Y</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: Y_Axis<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> RGB_Pixel;</tt></p>
</blockquote>
<p>This function returns pixel at (<b>X</b>, <b>Y</b>). Constraint_Error is 
propagated on subscript error.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Height (<b>Image</b> : 
	RGB_Image) <font color="#0000FF">return</font> Y_Axis;</tt></p>
</blockquote>
<p>This function returns image height.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Width (<b>Image</b> : 
	RGB_Image) <font color="#0000FF">return</font> X_Axis;</tt></p>
</blockquote>
<p>This function returns image width.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Set<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Image</b> :
	<font color="#0000FF">in out</font> RGB_Image;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; X&nbsp;&nbsp;&nbsp;&nbsp; 
	: X_Axis;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Y</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: Y_Axis;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Pixel</b> : RGB_Pixel<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
	<font color="#0000FF">procedure</font> Set<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Image</b> :
	<font color="#0000FF">in out</font> RGB_Image;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>X</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: X_Axis;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Y</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: Y_Axis;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Color</b> : Gdk_Color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures update image pixel at (<b>X</b>, <b>Y</b>). Constraint_Error 
is propagated on subscript error.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Set_Size<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Image</b>&nbsp; 
	: <font color="#0000FF">in out</font> RGB_Image;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Width</b>&nbsp; : X_Axis;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Height</b> : Y_Axis<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure changes image size. Note that image content is not preserved 
after the change is made.</p>
<hr>
<p align="right">
  <a name="4"></a><a href="#2"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><a href="#14"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></a><a href="#5"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H2>4. Style properties</H2>
<p> <a href="http://www.gtk.org">GTK+</a>. provides a framework for 
customization of widget appearance through resource files. A resource file may 
define widget style properties using a pattern matching mechanism. Styles can be 
matched against widget name or its class. The child 
package Gtk.Widget.Styles provides interface functions for dealing with style 
properties:</p>
<h3><a name="4.1"></a>4.1. Installing style properties</h3>
<p>The properties are installed on a class of widgets. For this the parent class 
of the widget has to be extended. This need to be done once before creation of 
the first widget from the class. The proper place to do it is the Initialize 
procedure. The package body of the widget implementation could contain: </p>
		<p>The following code snippets illustrate use of Register: The package 
		specification:</p>
		<blockquote>
<p><tt>My_Class_Record : Ada_GObject_Class;<font color="#0000FF"><br>
<br>
procedure </font>Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Widget :
<font color="#0000FF">not null access</font> My_Widget_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is<br>
</font>&nbsp;&nbsp; ...<br>
&nbsp;&nbsp; To_Install : <font color="#0000FF">constant</font> Boolean :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Class_Record.C_Class = Null_GObject_Class;<font color="#0000FF"><br>
begin<br>
&nbsp;&nbsp; </font>&lt;<i>parent</i>&gt;.Initialize (Widget);<font color="#008000"> 
<i>-- Parent's 
initialization</i></font><font color="#0000FF"><br>
</font>&nbsp;&nbsp; Initialize_Class_Record<br>
&nbsp;&nbsp; (&nbsp; Widget,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Null_Array,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; My_Class_Record,<br>
&nbsp;&nbsp;&nbsp; &nbsp; &quot;<font color="#FF0000">MyWidgetClass</font>&quot;<br>
&nbsp;&nbsp; );<br>
<font color="#0000FF">&nbsp;&nbsp; if </font>To_Install<font color="#0000FF"> 
then<br>
&nbsp; </font>&nbsp;&nbsp;&nbsp; Install_Style_Property<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; My_Class_Record.C_Class,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Gnew_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Name&nbsp;&nbsp;&nbsp; 
=&gt; &quot;<font color="#FF0000">my-widget-property</font>&quot;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Nick&nbsp;&nbsp;&nbsp; 
=&gt; &quot;<font color="#FF0000">Text</font>&quot;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Blurb&nbsp;&nbsp; 
=&gt; &quot;<font color="#FF0000">The text my widget needs</font>&quot;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; Default =&gt; &quot;<font color="#FF0000">Default 
text</font>&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; );<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<font color="#008000"> <i>-- Other style 
properties</i></font><font color="#0000FF"><br>
&nbsp;&nbsp; end if</font>;<br>
&nbsp;&nbsp; ...<font color="#008000"> <i>-- Continue initialization</i></font><font color="#0000FF"><br>
end</font> Initialize;</tt></p>
</blockquote>
		<p>Note that Initialize_Class_Record has to be called after 
		initialization of the parent. </p>
<p>The procedure Install_Style_Property from Gtk.Widget installs a style 
property into a class of widgets, there is an alternative procedure Class_Install_Style_Property_Parser, which 
does the same but has an additional parameter, the property parser:</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> 
	Class_Install_Style_Property_Parser<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Class</b> : 
	GObject_Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	PSpec</b> : Param_Spec;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Parser</b> : Gtk_RC_Property_Parser<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>A property parser has the following type:</p>
		<blockquote>
<p><tt><font color="#0000FF">type</font> GString <font color="#0000FF">is record</font><br>
&nbsp;&nbsp; Str&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 
Chars_Ptr;<br>
&nbsp;&nbsp; Len&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 
GSize;<br>
&nbsp;&nbsp; Allocated_Len : GSize;<br>
<font color="#0000FF">end record</font>;<br>
<font color="#0000FF">pragma</font> Convention (C, GString);<br>
<font color="#0000FF">type</font> Gtk_RC_Property_Parser <font color="#0000FF">
is access function</font><br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>PSpec</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Param_Spec;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>RC_String</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: GString;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Property_Value</b> :
<font color="#0000FF">access</font> GValue<br>
&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font> GBoolean;<br>
<font color="#0000FF">pragma</font> Convention (C, Gtk_RC_Property_Parser);</tt></p>
</blockquote>
<p>It is a function called each time a style property is requested from the pool 
of hashed properties. Note that it is not used for actual parsing the resource file. The 
property values are all strings after resource file parsing. Only when requested 
a corresponding property parser is called, which is basically responsible for 
conversion of the string to a value. The parameter <b>RC_String</b> is the 
string to parse. Its field Str is a pointer to a nul-terminated string to parse. 
The parameter <b>Property_Value</b> is the result. When parsing is successful, 
it has to be initialized using Init from GLib.Values and then set to the value 
obtained. In this case the function has to return 1. Otherwise it returns 0 and 
does not touch <b>Property_Value</b>.</p>
<h3><a name="4.2"></a>4.2. Querying style properties</h3>
<p>Widget style properties might be undefined while widget initialization. In 
particular it means that querying style properties from the Initialize procedure 
might fail (to a default property value). To avoid this problem you can catch <i>
style-set</i> event and query properties from the handler of. For example:</p>
<blockquote>
<p><tt><font color="#0000FF">package</font> Handlers<font color="#0000FF"> is<br>
&nbsp;&nbsp; new </font>Gtk.Handlers.Callback (My_Widget_Record);<br>
<br>
<font color="#0000FF">procedure</font> Style_Set (Widget : <font color="#0000FF">
access</font> My_Widget_Record'Class) <font color="#0000FF">is</font><br>
&nbsp;&nbsp; Value : ... := Style_Get (Widget, &quot;<font color="#FF0000">my-widget-property</font>&quot;);<br>
<font color="#0000FF">begin</font><br>
&nbsp;&nbsp; ... <i> <font color="#008000">-- Make Value have some effect on Widget</font></i><br>
<font color="#0000FF">end</font> Style_Set;<br>
<br>
<font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Widget :
<font color="#0000FF">access</font> My_Widget_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is<br>
begin</font><br>
&nbsp;&nbsp; ...<i><font color="#008000"> -- Necessary initialization</font></i><br>
&nbsp;&nbsp; Handlers.Connect<br>
&nbsp;&nbsp; (&nbsp; Widget,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">style-set</font>&quot;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Handlers.To_Marshaller (Style_Set'<font color="#0000FF">Access</font>)<br>
&nbsp;&nbsp; );<br>
<font color="#0000FF">end</font> Initialize;</tt></p>
</blockquote>
<p>The general way to query a style property is to use Style_Get_Property from 
Gtk.Widget. Note that custom types are not transformable. This means that they cannot be 
accessed without using a custom parser. For some predefined types there are handy wrappers of this procedure:</p>
		<blockquote>
<p><tt><font color="#0000FF">function </font>Style_Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">access </font>Gtk_Widget_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Property_Name</b> : UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> <i>Type</i>;</tt></p>
</blockquote>
<p>Here <i>Type</i> can be one of:</p>
<ul>
	<li><i>Boolean</i></li>
	<li><i>GChar</i></li>
	<li><i>Gdk_Color</i></li>
	<li><i>GDouble</i></li>
	<li><i>GFloat</i></li>
	<li><i>GLong</i></li>
	<li><i>GInit</i></li>
	<li><i>GUChar</i></li>
	<li><i>GUInt</i></li>
	<li><i>GULong</i></li>
	<li><i>UTF8_String</i></li>
</ul>
<p>When a string is put into a resource file, it is UTF-8 encoded. This feature is 
platform-independent, thus it can be used for internationalization / localization 
issues.</p>
<p>The function working with Gdk_Color has an additional parameter:</p>
		<blockquote>
<p><tt><font color="#0000FF">function </font>Style_Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">access </font>Gtk_Widget_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Property_Name</b> : UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Default</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Gdk_Color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Gdk_Color;</tt></p>
</blockquote>
<p>The following generic function:</p>
		<blockquote>
<p><tt><font color="#0000FF">generic<br>
&nbsp;&nbsp; with function </font>GTK_Type<font color="#0000FF"> return</font> 
GType;<font color="#0000FF"><br>
&nbsp;&nbsp; type </font>Ada_Type (&lt;&gt;)<font color="#0000FF"> is private;<br>
&nbsp;&nbsp; with function </font>Get (Value : GValue)<font color="#0000FF"> 
return </font>Ada_Type;<font color="#0000FF"><br>
function</font> Generic_Style_Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Widget&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">access </font>Gtk_Widget_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Property_Name 
: String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Ada_Type;</tt></p>
</blockquote>
<p>can be used for wrapping Style_Get_Property. However, note that boxed types 
cannot be dealt with this way, because of type conversion issues and missing 
default in the property specification. The generic formal parameter GTK_Type is 
the <a href="http://www.gtk.org">GTK+</a> type of the value (a function to get 
it). Ada_Type is the type of values. Get is a function to extract a value from 
GValue object. Note that the GTK_Type parameter is a function rather than a 
plain GType value. The reason for this is that the value might be unknown until 
run-time. This is the case for many
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/">GtkAda</a> types, which are
constructed at run-time. For such types an attempt to get the actual value for 
GTK_Type will cause creation of a <a href="http://www.gtk.org">GTK+</a> type 
where it cannot be created. That would result in a critical error.</p>
		<blockquote>
<p><tt><font color="#0000FF">function </font>Style_Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">access </font>Gtk_Widget_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Property_Name</b> : UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> GValue;</tt></p>
</blockquote>
<p>This function returns GValue initialized by the style property value of <b>
Widget</b> by its name <b>Property_Name</b>. When the widget does not have the 
style property the result has the type GType_None. The value must be freed using 
Unset when no more used.</p>
<h3><a name="4.3"></a>4.3. Querying enumerations</h3>
<p>The generic child package Gtk.Widget.Styles.Generic_Enumeration provides 
subprograms for dealing with enumeration properties:</p>
		<blockquote>
<p><tt><font color="#0000FF">generic<br>
&nbsp;&nbsp; with package </font>Enumeration_Property<font color="#0000FF"> is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new</font> 
GLib.Generic_Properties.Generic_Enumeration_Property (&lt;&gt;);<br>
<font color="#0000FF">package </font>Gtk.Widget.Styles.Generic_Enumeration<font color="#0000FF"> 
is</font> ...</tt></p>
</blockquote>
<p>The formal parameter is an instance of the package 
GLib.Generic_Properties.Generic_Enumeration_Property. An enumeration property 
can be specified in the CSS file:</p>
		<blockquote>
<p><tt>...<br>
{<br>
&nbsp; -&lt;<i>class_name</i>&gt;-&lt;<i>property_name</i>&gt;: &lt;<i>property_value</i>&gt;;</tt></p>
</blockquote>
<p>or in the resource file:</p>
		<blockquote>
<p><tt>style ...<br>
{<br>
&nbsp; &lt;<i>class_name</i>&gt;::&lt;<i>property_name</i>&gt; = &lt;<i>property_value</i>&gt;</tt></p>
</blockquote>
<p>The property value can be given without quotation marks. Differently to the 
standard parser, one used in this package is case-insensitive, which is more 
natural for enumerations. When an 
enumeration style property is specified for a class using the standard parser, 
that is, when such property is installed using Class_Install_Style_Property, 
then its values have to be capitalized. The package provides two subprograms:</p>
		<blockquote>
<p><tt><font color="#0000FF">function </font>Style_Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">access</font> Gtk_Widget_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Property_Name</b> : String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Enumeration;</tt></p>
</blockquote>
<p>This function queries an enumeration style.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Install_Style<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Class</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: GObject_Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Enum_Spec</b> : Param_Spec<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure installs an enumeration property style. The parameter <b>
Enum_Spec</b> must be the result of a call to Gnew_Enum of the package 
Enumeration_Property.</p>
<h3><a name="4.4"></a>4.4. Other subprograms</h3>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Class_List_Style_Properties (<b>Class</b> 
: GObject_Class)<br>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">return</font> Param_Spec_Array;</tt></p>
</blockquote>
<p>This function enumerates and returns the properties specifications of <b>
Class</b>. The result has the type:</p>
		<blockquote>
<p><tt><font color="#0000FF">type</font> Param_Spec_Array <font color="#0000FF">
is array</font> (Positive <font color="#0000FF">range</font> &lt;&gt;)
<font color="#0000FF">of</font> Param_Spec;</tt></p>
</blockquote>
<p>defined in this package.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Get_Path<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Widget_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Reversed</b> : Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">return</font> UTF8_String;<br>
<font color="#0000FF">procedure</font> Get_Class_Path<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Widget_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Reversed</b> : Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">return</font> UTF8_String;</tt></p>
</blockquote>
<p>These two functions are used to get the name of <b>Widget</b>. The name path 
is reversed when <b>Reversed</b> is <font color="#800000"><i>true</i></font>. 
Get_Class_Path ignores effects of any Set_Name applied.</p>
<h3><a name="4.5"></a>4.5. Capturing style properties of a widget</h3>
<p>It is not always simple to figure out the style properties a widget can have 
when designing a
<a href="https://developer.gnome.org/gtk3/stable/GtkCssProvider.html">CSS style 
sheet</a>. It especially might be the case when dealing with deep hierarchies of widgets.</p>
<h4>4.5.1. CSS</h4>
<p>The package Gtk.Widget.Styles.CSS_Store provides a way of capturing style
properties to ease design of resource files for an application. 
Note that the resource files are depreciated. The package has the following subprograms declared:</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Put_CSS_Styles<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>File</b>&nbsp;&nbsp;&nbsp; 
: File_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Widget</b>&nbsp; : <font color="#0000FF">not null access</font> Gtk_Widget_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Recurse</b> : Boolean := True<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure enumerates the property styles of <b>Widget</b> and writes 
them into <b>File</b> in the format of the 
<a href="https://developer.gnome.org/gtk3/stable/GtkCssProvider.html">CSS style 
sheet</a>. The name of the style rule &lt;<i>class_name</i>&gt;#&lt;<i>widget-name</i>&gt;. 
The style properties values are supplied with the available information about their 
type, range, defaults etc. When the parameter <b>Recurse</b> is set to <i>
<font color="#800000">true</font></i>, the container widgets are traversed for 
their children. For each child a rule is generated and written into 
the file before one of the container. The rules are accompanied with 
a comment indicating the widget place in the widget's hierarchy.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Put_CSS_Styles<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Widget_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Recurse</b> : Boolean := True<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure writes the properties styles onto the standard output.</p>
<h4>4.5.2. Resource file</h4>
<p>The package Gtk.Widget.Styles.Store provides a way of capturing style
properties to ease design of resource files for an application. 
Note that the resource files are depreciated. The package has the following subprograms declared:</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Put_Styles<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>File</b>&nbsp;&nbsp;&nbsp; 
: File_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Widget</b>&nbsp; : <font color="#0000FF">not null access</font> Gtk_Widget_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Recurse</b> : Boolean := True<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure enumerates the property styles of <b>Widget</b> and writes 
them into <b>File</b> in the format of the <i>style-</i>statement of
GTK 2.x resource file. The name of the style statement is &lt;<i>widget-name</i>&gt;_of_&lt;<i>class_name</i>&gt;. 
The style properties values are supplied with the available information about their 
type, range, defaults etc. When the parameter <b>Recurse</b> is set to <i>
<font color="#800000">true</font></i>, the container widgets are traversed for 
their children. For each child a style statement is generated and written into 
the file before one of the container. The style statements are accompanied with 
a comment indicating the widget place in the widget's hierarchy.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Put_Styles<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Widget_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Recurse</b> : Boolean := True<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure writes the properties styles onto the standard output.</p>
<hr>
<p align="right">
  <a name="5"></a><a href="#4"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><a href="#14"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></a><a href="#6"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H2>5. Missing stuff</H2>
<p>The package Gtk.Missed contains some subprograms currently missing in
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/">GtkAda</a> bindings:</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Add_Class_Style<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Style</b>&nbsp;&nbsp; 
: Gtk.RC.Gtk_RC_Style;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pattern</b> : UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<font color="#0000FF">procedure</font> Add_Widget_Class_Style<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Style</b>&nbsp;&nbsp; 
: Gtk.RC.Gtk_RC_Style;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pattern</b> : UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<font color="#0000FF">procedure</font> Add_Widget_Name_Style<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Style</b>&nbsp;&nbsp; 
: Gtk.RC.Gtk_RC_Style;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pattern</b> : UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure add resource styles to look up. They are equivalent to the 
resource file commands</p>
<blockquote>
	<p><tt class="literal"><font color="#FF0000"><b>class</b></font> &lt;pattern&gt;
	<b><font color="#FF0000">style</font></b> &lt;style&gt;<br>
	<font color="#FF0000"><b>widget_class</b></font> &lt;pattern&gt; <b>
	<font color="#FF0000">style</font></b> &lt;style&gt;<font color="#FF0000"><b><br>
	widget</b></font> &lt;pattern&gt; <b><font color="#FF0000">style</font></b> 
	&lt;style&gt;</tt></p>
</blockquote>
<p>correspondingly. Here <tt class="literal">&lt;pattern&gt;</tt> refers to the 
parameter <b>Pattern</b>, <tt class="literal">&lt;style&gt;</tt> does to the parameter
<b>Style</b>.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Build_Filename<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>First_Element</b>&nbsp; 
: UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Second_Element</b> : 
UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Third_Element</b>&nbsp; 
: UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Fourth_Element</b> : 
UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Fifth_Element</b>&nbsp; 
: UTF8_String ]]]]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> UTF8_String;</tt></p>
</blockquote>
<p>This function creates a filename from two to five elements using the correct 
separator for filenames. On Windows, this function takes into account that 
either the backslash (\ or slash (/) can be used as separator in filenames, but 
otherwise behaves as on Unix. When file pathname separators need to be inserted, 
the one that last previously occurred in the parameters (reading from left to 
right) is used. No attempt is made to force the resulting filename to be an 
absolute path. If the first element is a relative path, the result will be a 
relative path.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> 
Check (<b>Context</b> : Cairo_Context);</tt></p>
</blockquote>
<p>This procedure checks <b>Context</b> for pending errors. If its status 
indicates an error Status_Error is propagated.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> 
Class_Install_Property<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Class_Record</b>&nbsp; 
: GObject_Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Prop_Id</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Property_Id;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Property_Spec</b> : Param_Spec<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is a replacement for Install_Property which takes 
Ada_GObject_Class instead of GObject_Class.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Missed.Dir_Close"></a>procedure</font> 
Dir_Close (<b>Dir</b> : <font color="#0000FF">in out</font> GDir);</tt></p>
</blockquote>
<p>This procedure closes directory opened by <a href="#Gtk.Missed.Dir_Open">
Dir_Open</a>. <b>Dir</b> is set to <font color="#0000FF">null</font>. If <b>Dir</b> 
is already null, the procedure is void. The type of directory object is declared 
as:</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> GDir <font color="#0000FF">is new</font> 
Glib.C_Proxy;</tt></p>
</blockquote>
<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Missed.Dir_Open"></a>procedure</font> 
Dir_Open<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Path</b>&nbsp; 
: UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Dir</b>&nbsp;&nbsp; 
: <font color="#0000FF">out</font> GDir;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Error</b> : <font color="#0000FF">out</font> GError<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure opens a directory for read. When operation is successful <b>
Dir</b> is not <font color="#0000FF">null</font> and <b>Error</b> is
<font color="#0000FF">null</font>. Otherwise <b>Dir</b> is null and Error is not 
null. When Dir is not <font color="#0000FF">null</font> it must be closed using
<a href="#Gtk.Missed.Dir_Close">Dir_Close</a>. When Error is not null it must be 
released using
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/glib.error.html#L44C14">Error_Free</a>.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Missed.Dir_Read_Name"></a>function</font> 
Dir_Read_Name (<b>Dir</b> : GDir) <font color="#0000FF">return</font> 
UTF8_String;</tt></p>
</blockquote>
<p>This function reads the name of the next entry from the directory <b>Dir</b> 
opened by <a href="#Gtk.Missed.Dir_Open">Dir_Open</a>. End_Error is propagated 
when there is no more directory items.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Dir_Rewind (<b>Dir</b> : GDir);</tt></p>
</blockquote>
<p>This procedure resets the given directory. The next call to
<a href="#Gtk.Missed.Dir_Read_Name">Dir_Read_Name</a> will return the first 
entry again.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Find_Program_In_Path (<b>Program</b> : 
UTF8_String)<font color="#0000FF"> return</font> 
UTF8_String;</tt></p>
</blockquote>
<p>This function locates the first executable named Program in the user's path. 
It is an equivalent to UNIX shell's <i>which</i>.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> File_Test<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>File_Name</b> : 
UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Flags</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: GFileTest<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <font color="#800000"><i>true</i></font> if any of the
<b>Flags</b> is set:</p>
<blockquote>
	<p><tt><font color="#0000FF">type</font> GFileTest <font color="#0000FF">is 
	new</font> GUInt;<br>
	File_Test_Is_Regular&nbsp;&nbsp;&nbsp; : <font color="#0000FF">constant</font> 
	GFileTest := ...;<br>
	File_Test_Is_Symlink&nbsp;&nbsp;&nbsp; : <font color="#0000FF">constant</font> 
	GFileTest := ...;<br>
	File_Test_Is_Dir&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :
	<font color="#0000FF">constant</font> GFileTest := ...;<br>
	File_Test_Is_Executable : <font color="#0000FF">constant</font> GFileTest := 
	...;<br>
	File_Test_Exists&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :
	<font color="#0000FF">constant</font> GFileTest := ...;</tt></p>
</blockquote>
<blockquote>
<p><tt><font color="#0000FF">function</font> File_Test (<b>File_Name</b> : 
UTF8_String) <font color="#0000FF">return</font> GFileTest;</tt></p>
</blockquote>
<p>This function provided for convenience. It tests for status bits and returns 
them together.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> From_RGBA (<b>Color</b> : 
Gdk_RGBA) <font color="#0000FF">
return</font> Gdk_Color;</tt></p>
</blockquote>
<p>This function converts RGBA argument to color. The alpha channel is ignored 
as the result is always opaque.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Missed.Freeze_Notify"></a>procedure</font> 
Freeze_Notify<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Object</b> :
<font color="#0000FF">not null access</font> GObject_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure increases the freeze count on object. If the freeze count is 
non-zero, the emission of <i>notify</i> signals on object is stopped. The 
signals are queued until the freeze count is decreased to zero. Duplicate 
notifications are squashed so that at most one <i>notify</i> signal is emitted 
for each property modified while the object is frozen. This is necessary for 
accessors that modify multiple properties to prevent premature notification 
while the object is still being modified. </p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Gtk.Missed.Row_Order"></a>type </font> Row_Order<font color="#0000FF"> is</font> 
	(Before, Equal, After);<font color="#0000FF"><br>
	<br>
	function</font> Compare<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b> :
	<font color="#0000FF">access</font> Gtk_Tree_Model_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>A</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: Gtk_Tree_Path / Gtk_Tree_Iter;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>B</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: Gtk_Tree_Path / Gtk_Tree_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Row_Order;</tt></p>
</blockquote>
<p>These four functions compare iterators or paths of a model. The result is <i>
Before</i> when <b>A</b> precedes <b>B</b>. It is <i>After</i> if <b>A</b> 
follows <b>B</b>. Null_Iter and <font color="#0000FF">null</font> path always 
precede anything else. When an iterators is compared it is first converted to a 
path. No attempt is made to verify if the iterator or path refer to the model 
specified. For these reasons all possible values of arguments are comparable.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Delete_Event_Handler<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">access</font> Gtk_Widget_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Event</b>&nbsp; 
: Gdk.Event.Gdk_Event<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p>
</blockquote>
<p>This procedure is used in the window as a handler of <i>delete-event</i> 
signal:</p>
<blockquote>
	<p><tt><font color="#808080">Gtk.Window.Gtk_New (Window);</font><br>
	<font color="#808080">Window.Set_Title (&quot;</font><font color="#FF5050">My 
	application</font><font color="#808080">&quot;);</font><br>
	Window.On_Delete_Event (Delete_Event_Handler'Access);<br>
	<font color="#808080">Window.On_Destroy (Destroy_Handler'Access);<br>
	...<br>
	Window.Show_All;<br>
	Gtk.Main.Main;</font></tt></p>
</blockquote>
<p>The implementation returns <font color="#800000"><i>false</i></font>.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Destroy_Handler (<b>Widget</b> :
<font color="#0000FF">access</font> Gtk_Widget_Record'Class);</tt></p>
</blockquote>
<p>This procedure is used in the window as a handler of <i>destroy</i> signal:</p>
<blockquote>
	<p><tt><font color="#808080">Gtk.Window.Gtk_New (Window);</font><br>
	<font color="#808080">Window.Set_Title (&quot;</font><font color="#FF5050">My 
	application</font><font color="#808080">&quot;);</font><br>
	<font color="#808080">Window.On_Delete_Event (Delete_Event_Handler'Access);</font><br>
	Window.On_Destroy (Destroy_Handler'Access);<font color="#808080"><br>
	...<br>
	Window.Show_All;<br>
	Gtk.Main.Main;</font></tt></p>
</blockquote>
<p>The implementation calls Gtk.Main.Main_Quit.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Erase (<b>Container</b> :
	<font color="#0000FF">not null access</font> Gtk_Container_Record'Class);</tt></p>
</blockquote>
<p>This procedure removes all children from <b>Container</b>.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Is_In<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Container</b> :
<font color="#0000FF">not null access</font> Gtk_Container_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Element</b>&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Widget_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> when <b>
Element</b> is a member of <b>Container</b>.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Missed.Get_Application_Name"></a>function</font> Get_Application_Name<font color="#0000FF">&nbsp;return</font> 
UTF8_String;</tt></p>
</blockquote>
<p>This function returns the application name in a human readable form.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Background_Area<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Tree_View</b> :
<font color="#0000FF">not null access</font> Gtk_Tree_View_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Path</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Gtk_Tree_Path;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Column</b>&nbsp;&nbsp;&nbsp; 
: Gtk_Tree_View_Column := <font color="#0000FF">null</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
Gdk_Rectangle;</tt></p>
</blockquote>
<p>This function is a replacement for an incorrectly implemented procedure 
Get_Background_Area from Gtk.Tree_View.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Basename (<b>File_Name</b> : 
UTF8_String) <font color="#0000FF">return</font> UTF8_String;</tt></p>
</blockquote>
<p>This function gets the last component of the filename. If <b>File_Name</b> 
ends with a directory separator it gets the component before the last slash. If
<b>File_Name</b> consists only of directory separators (and on Windows, possibly 
a drive letter), a single separator is returned. If <b>File_Name</b> is empty, 
it gets &quot;.&quot;. </p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Column (<b>Value</b> : GValue)
<font color="#0000FF">return</font> Gtk_Tree_View_Column;</tt></p>
</blockquote>
<p>This function gets a tree view column from GValue. Some tree view event 
handles receive the column as a parameter in GValues list. The function Nth may 
then be applied with the corresponding parameter number and this function to the 
result in order to obtain the column object.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Column_No<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Tree_View</b> :
<font color="#0000FF">not null access</font> Gtk_Tree_View_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Column</b>&nbsp;&nbsp;&nbsp; 
: 
<font color="#0000FF">not null access</font> Gtk_Tree_View_Column_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> GInt;</tt></p>
</blockquote>
<p>This function returns the number of a tree view column. The result is 
zero-based. On error, the result is negative.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Current_Dir<font color="#0000FF">&nbsp;return</font> 
UTF8_String;</tt></p>
</blockquote>
<p>This function returns the current directory.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Dirname (<b>File_Name</b> : 
UTF8_String) <font color="#0000FF">return</font> UTF8_String;</tt></p>
</blockquote>
<p>This function gets the directory components of a file name. If the file name 
has no directory components &quot;.&quot; is returned.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_PRGName<font color="#0000FF">&nbsp;return</font> 
UTF8_String;</tt></p>
</blockquote>
<p>This function returns the name of the program.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Root (<b>File_Name</b> : 
UTF8_String) <font color="#0000FF">return</font> UTF8_String;</tt></p>
</blockquote>
<p>This function returns the <b>File_Name</b> part before its root component, 
i.e. the &quot;/&quot; in UNIX or &quot;C:\&quot; under Windows. Use_Error is propagated when <b>
File_Name</b> is not absolute.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Row_No<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b> :
Gtk_Tree_Model;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Iter</b>&nbsp; 
: Gtk_Tree_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> GInt;</tt></p>
</blockquote>
<p>This function returns a <b>File_Name</b> part after the root component, i.e. 
after the &quot;/&quot; in UNIX or &quot;C:\&quot; under Windows. Use_Error is propagated when <b>
File_Name</b> is not absolute.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Row_No<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b> :
Gtk_Tree_Model;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Path</b>&nbsp; 
: Gtk_Tree_Path<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> GInt;</tt></p>
</blockquote>
<p>This function is similar but uses a path to the row.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Get_Screen_Position<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font> Gtk_Widget_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>X</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> GInt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Y</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> GInt<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure gets screen coordinates of a widget. Note that the widget may 
share its window with other widgets. In other words the coordinates of a widget 
are not necessarily the coordinates of its window. This procedure takes this 
into account.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_User_Special_Dir (<b>Directory</b> 
: User_Directory) <font color="#0000FF">return</font> UTF8_String;</tt></p>
</blockquote>
<p>This function returns directories associated with the user. The parameter has 
the type:</p>
		<blockquote>
<p><tt><font color="#0000FF">type</font> User_Directory <font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; User_Directory_Desktop,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#008000">-- Desktop directory (home)<br>
</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; User_Directory_Documents,&nbsp;&nbsp;&nbsp;
<font color="#008000">-- Documents directory </font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; User_Directory_Download,&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#008000">-- Downloads directory </font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; User_Directory_Music,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#008000">-- Music directory </font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; User_Directory_Pictures,&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#008000">-- Pictures directory </font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; User_Directory_Public_Share,
<font color="#008000">-- shared directory </font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; User_Directory_Templates,&nbsp;&nbsp;&nbsp;
<font color="#008000">-- Templates directory </font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; User_Directory_Videos&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#008000">-- Movies directory</font><br>
&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Get_Visible_Range<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Tree_View</b>&nbsp; :
<font color="#0000FF">not null access</font> Gtk_Tree_View_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Start_Path</b> : <font color="#0000FF">out</font> Gtk_Tree_Path;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
End_Path </b>&nbsp; : <font color="#0000FF">out</font> Gtk_Tree_Path<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure determines the visible range of rows in a tree view. When 
successful <b>Start_Path</b> is a path of the first visible row, <b>End_Path</b> 
is a path to the last one. Otherwise they are <font color="#0000FF">null</font>. 
When not <font color="#0000FF">null</font> the caller is responsible to call 
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.tree_model.html#L601C14">Path_Free</a> on each corresponding path. Note that <b>Tree_View</b> has to be 
realized when Get_Visible_Range is caled. The implementation checks it using 
Realized_Is_Set to prevent application crash and returns both paths as
<font color="#0000FF">null</font>.</p>
		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Missed.GType_Icon"></a>function</font> 
GType_Icon <font color="#0000FF">return</font> GType;</tt></p>
</blockquote>
<p>The type of <a href="https://developer.gnome.org/gio/stable/GIcon.html#GIcon-struct">GIcon</a> interfaces.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Has_Tooltip (<b>Widget</b> :
<font color="#0000FF">not null access</font> Gtk.Widget.Gtk_Widget_Record'Class)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>Returns the <i>has-tooltip</i> property of Widget.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Is_A (<b>Derived</b>, <b>Ancestor</b> 
: GType) <font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function is used to check whether <b>Derived</b> inherits from <b>
Ancestor</b>.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Is_Absolute (<b>File_Name</b> : 
UTF8_String) <font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This is function returns <i>true</i> if the given <b>File_Name</b> is an 
absolute file name, i.e. it contains a full path from the root directory such as 
&quot;/usr/local&quot; on UNIX or &quot;C:\windows&quot; on Windows systems.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Is_In<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b> :
	Gtk_Tree_Model;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>A</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: Gtk_Tree_Path / Gtk_Tree_Iter;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>B</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: Gtk_Tree_Path / Gtk_Tree_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Boolean;</tt></p>
</blockquote>
<p>These four functions compare iterators or paths of a model for containment 
relation. The result is <i><font color="#800000">true</font></i> if <b>A</b> is 
contained in <b>B</b>. A null iterator or path contain anything. No attempt is made to verify if the iterator or path refer to the model 
specified. For these reasons all possible values of arguments are comparable. To 
get meaningful a result the parameters should belong to <b>Model</b>.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Is_Parent<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b> :
	Gtk_Tree_Model;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>A</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: Gtk_Tree_Path / Gtk_Tree_Iter;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>B</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: Gtk_Tree_Path / Gtk_Tree_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Boolean;</tt></p>
</blockquote>
<p>These four functions compare iterators or paths of a model for child-parent 
relation. The result is <i><font color="#800000">true</font></i> if <b>A</b> is 
the immediate parent of <b>B</b>. A null iterator or path is the parent of the 
first level nodes. The parameters should belong to <b>Model</b>.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Is_Sibling<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Model</b> :
	Gtk_Tree_Model;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>A</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: Gtk_Tree_Path / Gtk_Tree_Iter;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>B</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: Gtk_Tree_Path / Gtk_Tree_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Boolean;</tt></p>
</blockquote>
<p>These four functions compare iterators or paths for being immediate ancestors 
of the same parent. A null iterator or path considered as the parent of the 
first level nodes so the result is <font color="#800000"><i>true</i></font> when 
both parameters are Null_Iter or <font color="#0000FF">null</font>. Otherwise 
the parameters should belong to <b>Model</b>.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Keyval_To_Unicode (<b>Key_Val</b> 
	: Gdk_Key_Type) <font color="#0000FF">return</font> GUnichar;</tt></p>
</blockquote>
<p>This function returns the Unicode position corresponding to the key value. 
When there is no one, 0 is returned.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Keyval_To_Unicode (<b>Key_Val</b> 
	: Gdk_Key_Type) <font color="#0000FF">return</font> UTF8_String;</tt></p>
</blockquote>
<p>This function is like one above but returns the result encoded as UTF-8 
string.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Remove (<b>File_Name</b> : 
UTF8_String);</tt></p>
</blockquote>
<p>This procedure deletes a file or a directory. Name_Error is propagated when
<b>File_Name</b> does not specify an existing file. Use_Error is propagated when 
file cannot be deleted.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Rename (<b>Old_File_Name</b>, <b>
New_File_Name</b> : UTF8_String);</tt></p>
</blockquote>
<p>This procedure renames <b>Old_File_Name</b> to <b>New_File_Name</b>. 
Name_Error is propagated when <b>Old_File_Name</b> does not specify an existing 
file or directory. Use_Error is propagated when file cannot be renamed.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> RGB (<b>Red, Green, Blue</b> : 
GDouble) <font color="#0000FF">return</font> Gdk_Color;</tt></p>
</blockquote>
<p>This function returns the color composed from the red, blue and green stimuli 
in the range 0.0..1.0. Values outside the range are saturated to the nearest 
bound.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Property<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Object</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font> &nbsp;Glib.Object.GObject_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp; 
: <font color="#0000FF">in</font> Glib.Properties.Property_Float;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp; : <font color="#0000FF">in</font> Glib.Gfloat<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This is a replacement for a broken counterpart from GLib.Properties.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Tip<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>
Widget </b>: <font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font> 
&nbsp;Gtk.Widget.Gtk_Widget_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets null tooltip text for <b>Widget</b>.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Skip_Root (<b>File_Name</b> : 
UTF8_String) <font color="#0000FF">return</font> UTF8_String;</tt></p>
</blockquote>
<p>This function returns a <b>File_Name</b> part after the root component, i.e. 
after the &quot;/&quot; in UNIX or &quot;C:\&quot; under Windows. Use_Error is propagated when <b>
File_Name</b> is not absolute.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Missed.Thaw_Notify"></a>procedure</font> 
Thaw_Notify<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Object</b> :
<font color="#0000FF">not null access</font> GObject_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure reverts the effect of a previous call to
<a href="#Gtk.Missed.Freeze_Notify">Freeze_Notify</a>. The freeze count is 
decreased on object and when it reaches zero, queued <i>notify</i> signals are 
emitted. Duplicate notifications for each property are squashed so that at most 
one <i>notify</i> signal is emitted for each property, in the reverse order in 
which they have been queued. It is an error to call this function when the 
freeze count is zero. </p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Themed_Icon_New (<b>Icon_Name</b> : 
UTF8_String) <font color="#0000FF">return</font> GObject;</tt></p>
</blockquote>
<p>This function returns an icon from the current theme corresponding to <b>Icon_Name</b>. 
The result when not <font color="#0000FF">null</font> must be freed using <a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/glib.object.html#L78C14">Unref</a>.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> 
Themed_Icon_New_With_Default_Fallbacks<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Icon_Name</b> : 
UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
GObject;</tt></p>
</blockquote>
<p>This function returns an icon from the current theme corresponding to <b>Icon_Name</b>. 
The function tries names obtained by shortening <b>Icon_Name </b>at '-' 
characters. The result when not <font color="#0000FF">null</font> must be freed 
using <a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/glib.object.html#L78C14">Unref</a>.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> To_RGBA (<b>Color</b> : 
Gdk_Color) <font color="#0000FF">
return</font> Gdk_RGBA;</tt></p>
</blockquote>
<p>This function converts <b>Color</b> to opaque RGBA value.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> To_String (<b>Status</b> : 
Cairo_Status) <font color="#0000FF">return</font> String;</tt></p>
</blockquote>
<p>This function converts status to the corresponding message text.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Unicode_To_Keyval (<b>WC</b> : 
	GUnichar) <font color="#0000FF">return</font> Gdk_Key_Type;</tt></p>
</blockquote>
<p>This function returns a key value corresponding to a Unicode code position <b>
WC</b>. The result is 1000000<sub>16</sub> when there is no one.</p>
<blockquote>
	<p><tt><font color="#0000FF">type</font> Wait_Cursor<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Widget :
	<font color="#0000FF">not null access</font> Gtk_Widget_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp; )
	<font color="#0000FF">&nbsp;is new</font> Ada.Finalization.Limited_Controlled
	<font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p>When an object of this type exists it changes the cursor to clock for the <b>
Widget</b>'s window.</p>
<blockquote>
	<p><tt><font color="#0000FF">generic<br>
&nbsp;&nbsp; type </font>User_Data (&lt;&gt;)<font color="#0000FF"> is private</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">with procedure</font> Destroy (Data :
	<font color="#0000FF">in out</font> User_Data) <font color="#0000FF">is null</font>;<br>
	<font color="#0000FF">package</font> Set_Column_Cell_Data
	<font color="#0000FF">is</font> ...</tt></p>
</blockquote>
<p>The package provides allows to attach a user-defined handler of a column of 
tree view. It has the following declarations:</p>
<blockquote>
	<p><tt><font color="#0000FF">type</font> Cell_Data_Function
	<font color="#0000FF">is access procedure</font><br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Column</b> : <font color="#0000FF">not null 
	access</font> Gtk_Tree_View_Column_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Cell</b>&nbsp;&nbsp; :
	<font color="#0000FF">not null access</font> Gtk_Cell_Renderer_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Model</b>&nbsp; : Gtk_Tree_Model;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Iter</b>&nbsp;&nbsp; : 
	Gtk_Tree_Iter;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Data</b>&nbsp;&nbsp; : User_Data<br>
&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called in order to set attributes of the renderer <b>Cell</b> 
for the column <b>Column</b>. <b>Model</b> is the tree model and <b>Iter</b> is 
an iterator to the row in the model being rendered. <b>Data</b> is the user data 
as passed by the call:</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure </font>Set_Cell_Data_Func<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Column</b> :
	<font color="#0000FF">not null access</font> 
	Gtk_Tree_View_Column_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Cell</b>&nbsp;&nbsp; 
	: <font color="#0000FF">not null access</font> 
	Gtk_Cell_Renderer_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Func</b>&nbsp;&nbsp; 
	: Cell_Data_Function;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Data</b>&nbsp;&nbsp; 
	: User_Data<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets <b>Func</b> to handle <b>Column</b> for <b>Cell</b>. When
<b>Func</b> is null the old function is removed.</p>
<h3><a name="5.1"></a>5.1. Handling values</h3>
<p>The package Glib.Values.Handling contains the following subprograms for 
dealing with
<a href="https://developer.gnome.org/gobject/stable/gobject-Generic-values.html#GValue">values</a> used in 
<a href="http://www.gtk.org">GTK+</a> 
in a generic way:</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Copy (<b>Src_Value</b> : GValue)
<font color="#0000FF">return</font> GValue;</tt></p>
</blockquote>
<p>This function creates a copy of <b>Src_Value</b> and returns the copy as the 
result. The semantics of copying is determined by the type of the value. See
<a href="https://developer.gnome.org/gobject/stable/gobject-Generic-values.html#g-value-copy">g_value_copy</a> for further information.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Copy (<b>Src_Value</b> : GValue;
<b>Dest_Value</b> : <font color="#0000FF">in out</font> GValue);</tt></p>
</blockquote>
<p>This procedure copies <b>Src_Value</b> into <b>Dest_Value</b>. The actual 
type of <b>Dest_Value</b> may differ from the type of <b>Src_Value</b>, in which 
case it is changed. For this <b>Dest_Value</b> is first unset and then 
re-initialized with the type of <b>Src_Value</b>.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Type (<b>Src_Value</b> : GValue)
<font color="#0000FF">return</font> GType;</tt></p>
</blockquote>
<p>This function returns the 
<a href="http://www.gtk.org">GTK+</a> 
type of <b>Src_Value</b>.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Object<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Value</b>&nbsp; 
: <font color="#0000FF">in out</font> GValue;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Object</b> : <font color="#0000FF">access</font> GObject_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure puts an object into value. The value must have been 
initialized with the object's type before the call. Usually there is no need to 
use this procedure especially there is no easy way to extract the object back 
from the value when its type is unknown in advance. However it might be helpful 
in the cases when a signal has to be emitted with unusual parameters. The first 
parameter in the list of GValues is the object of the signal. It can be set 
using this procedure.</p>
<h3><a name="5.2"></a>5.2. Controlled strong&nbsp;and weak GTK+ references</h3>
<p> 
<a href="http://www.gtk.org">GTK+</a> 
provides reference counting garbage collections of its objects. It is sometimes 
tedious to use, so the packages GLib.Object.Strong_References and GLib.Object.Weak_References 
implement controlled 
wrappers to the reference counting procedures of its parent package. Two types 
are provided:</p>
<ul>
	<li><i>Strong_Reference</i> is the type of a 
<a href="http://www.gtk.org">GTK+</a> 
	strong reference. A strong reference object prevents a premature destruction 
	of the referred object. Normally, there is no need in using Strong_Reference 
	if the referred object is put in an object container. But sometimes it is 
	desirable to make one widget to hold another without making the former a 
	descendant of a container type. In this case a Strong_Reference to the 
	object can be placed into the widget record;</li>
	<li><i>Weak_Reference</i> is the type of a 
<a href="http://www.gtk.org">GTK+</a> 
	weak reference. A weak reference does not prevent destruction of the 
	referred object. Instead of this upon destruction of the object the reference object 
	is notified 
	and the reference is invalidated. A typical use could be attaching a callback 
	that uses some object which can be destroyed before the object emitting the 
	connected signal. In this case the callback has to be disconnected from the 
	signal source upon object destruction.</li>
</ul>
<h4>5.2.1. Strong references</h4>
		<blockquote>
<p><tt><font color="#0000FF"><a name="GLib.Object.Strong_References"></a>generic<br>
&nbsp;&nbsp; type </font>Object_Type <font color="#0000FF">is new</font> 
GObject_Record <font color="#0000FF">with private</font>;<br>
<font color="#0000FF">package</font> GLib.Object.Strong_References
<font color="#0000FF">is</font> ...</tt></p>
</blockquote>
<p>The package formal type is the type of the object.</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Strong_Reference <font color="#0000FF">
is<br>
&nbsp;&nbsp; new </font>Ada.Finalization.Controlled <font color="#0000FF">with 
private</font>;</tt></p>
</blockquote>
<p>The following operations are defined:</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Adjust&nbsp;&nbsp; (<b>Reference</b> 
: <font color="#0000FF">in out</font> Strong_Reference);<font color="#0000FF"><br>
procedure</font> Finalize (<b>Reference</b> : <font color="#0000FF">in out</font> 
Strong_Reference);</tt></p>
</blockquote>
<p>When overridden, these procedures have to be called from the corresponding 
bodies.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get (<b>Reference</b> : 
Strong_Reference)<br>
&nbsp;&nbsp; <font color="#0000FF">return access</font> Object_Type'Class;</tt></p>
</blockquote>
<p>This function returns a pointer to the object referred or
<font color="#0000FF">null</font> when the reference is invalid.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Invalidate (<b>Reference</b> :
<font color="#0000FF">in out</font> Strong_Reference);</tt></p>
</blockquote>
<p>This procedure makes <b>Reference</b> invalid. An invalid reference refer to 
no object. The effect of this procedure might be object destruction if the 
reference count of the object was 1.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Is_Valid (<b>Reference</b> : 
Strong_Reference) <font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> is <b>
Reference</b> is valid.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Ref (<b>Object</b> :
<font color="#0000FF">not null access</font> Object_Type'Class)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Strong_Reference;</tt></p>
</blockquote>
<p>This function creates a strong reference to <b>Object</b>. The reference 
count of <b>Object</b> is increased. Upon reference finalization the reference 
count is decreased.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Reference</b> 
: <font color="#0000FF">in out</font> Strong_Reference;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Object</b>&nbsp;&nbsp;&nbsp; : <font color="#0000FF">access</font> 
Object_Type'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure assigns another object to the reference. Nothing happens 
if <b>Object</b> is already referenced by <b>Reference</b>. When Object is
<font color="#0000FF">null</font> the reference becomes invalid.</p>
<h4>5.2.2. Weak references</h4>
		<blockquote>
<p><tt><font color="#0000FF">generic<br>
&nbsp;&nbsp; type </font>Object_Type <font color="#0000FF">is new</font> 
GObject_Record <font color="#0000FF">with private</font>;<br>
<font color="#0000FF">package</font> GLib.Object.Weak_References
<font color="#0000FF">is</font> ...</tt></p>
</blockquote>
<p>The package formal type is the type of the object.</p>
		<blockquote>
<p><tt><font color="#0000FF">type</font> Weak_Reference <font color="#0000FF">is<br>
&nbsp;&nbsp; new </font>Ada.Finalization.Controlled <font color="#0000FF">with 
private</font>;</tt></p>
</blockquote>
<p>The following operations are defined:</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Adjust&nbsp;&nbsp; (<b>Reference</b> 
: <font color="#0000FF">in out</font> Weak_Reference);<font color="#0000FF"><br>
procedure</font> Finalize (<b>Reference</b> : <font color="#0000FF">in out</font> 
Weak_Reference);</tt></p>
</blockquote>
<p>When overridden, these procedure has to be called from the corresponding 
bodies.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get (<b>Reference</b> : 
Weak_Reference)<br>
&nbsp;&nbsp; <font color="#0000FF">return access</font> Object_Type'Class;</tt></p>
</blockquote>
<p>This function returns a pointer to the object referred or
<font color="#0000FF">null</font> when the reference is invalid.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Invalidate (<b>Reference</b> :
<font color="#0000FF">in out</font> Weak_Reference);</tt></p>
</blockquote>
<p>This procedure makes <b>Reference</b> invalid. An invalid reference refer to 
no object.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Is_Valid (<b>Reference</b> : 
Weak_Reference) <font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> is <b>
Reference</b> is valid.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Notify (<b>Reference</b> :
<font color="#0000FF">in out</font> Weak_Reference);</tt></p>
</blockquote>
<p>This procedure is called upon object destruction. At the call time the object 
does not exist and the reference is already invalid. The default implementation 
does nothing. It can be overridden to provide desired functionality.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Ref (<b>Object</b> :
<font color="#0000FF">not null access</font> Object_Type'Class)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Weak_Reference;</tt></p>
</blockquote>
<p>This function creates a weak reference to <b>Object</b>.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Reference</b> 
: <font color="#0000FF">in out</font> Weak_Reference;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Object</b>&nbsp;&nbsp;&nbsp; : <font color="#0000FF">not null access</font> 
Object_Type'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure&nbsp; assigns another object to the reference. Nothing happens 
if <b>Object</b> is already referenced by <b>Reference</b>.</p>
<h3><a name="5.3"></a>5.3. Controlled references to signal handlers (closures)</h3>
<p> 
Signal handlers in 
<a href="http://www.gtk.org">GTK+</a> 
are automatically disconnected upon object finalization. However it is sometimes 
necessary to disconnect a handler prematurely due to finalization of the data 
the handler's callback deals with. The packages declared in Gtk.Handlers 
provide a mechanism for this represented by Object_Connect functions. The 
parameter Slot_Object of Object_Connect specifies a widget which finalization 
should disconnect the handler. Using of Object_Connect&nbsp;is sometimes 
inconvenient and also limited to only 
<a href="http://www.gtk.org">GTK+</a> 
widgets. The package Gtk.Handlers.References provides a simpler method which 
can be applied to any Ada type. The package declares the type:</p>
		<blockquote>
<p><tt><font color="#0000FF">type</font> Handler_Reference <font color="#0000FF">is<br>
&nbsp; &nbsp;new </font>Ada.Finalization.Controlled<font color="#0000FF"> with private</font>;</tt></p>
</blockquote>
<p>An object of this type can be put into the type on which the handler's 
callback depends. There can be many instances of Handle_Reference bound to the 
same handler. When any of these objects gets finalized the handler is 
disconnected. Same happens when the object emitting the signal is finalized.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get (<b>Reference</b> : 
Handler_Reference) <font color="#0000FF">return</font> Handler_ID;</tt></p>
</blockquote>
<p>This function returns identification of the handler referenced by <b>
Reference</b>. It is same type as the result of Connect function. An unset 
reference returns Null_Handler_ID in the field ID.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure </font>Set<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Reference</b> 
: <font color="#0000FF">in out</font> Handler_Reference;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Handler</b>&nbsp;&nbsp; : Handler_ID<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure </font>Set (<b>Reference</b> 
: <font color="#0000FF">in out</font> Handler_Reference);</tt></p>
</blockquote>
<p>This procedure binds <b>Reference</b> to <b>Handler</b>. Typically <b>Handler</b> is 
the result of a call to Connect function. When the procedure is called without <b>
Handler</b> parameter the reference is unset.</p>
<table border="1" width="100%" cellspacing="0" cellpadding="5">
	<tr>
		<td><i>Note</i> that Handler_Reference is a non-limited type. Otherwise 
		it were impossible to put a Handler_Reference into a non-limited record. And all 
widgets of
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/">GtkAda</a> are non-limited. The
		drawback of this choice is that Handler_Reference 
can be copied. One should be careful 
with temporal objects of this type, because most certainly creation of such 
		an object and initializing it by an object bound to a handler, will disconnect that 
handler upon leaving the scope of the temporal object.</td>
	</tr>
</table>
<p>The following code snippet illustrates use of references in a typical case 
when an object connects to a button which life span may extend one of the 
object:</p>
<tt>&nbsp;&nbsp; <font color="#0000FF">type</font> My_Widget_Record
<font color="#0000FF">is new</font> ... <font color="#0000FF">record</font><font color="#008000"> 
-- A custom widget</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Clicked_Handler : Handler_Reference;<br>
&nbsp;&nbsp; <font color="#0000FF">end record</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">type</font> My_Widget <font color="#0000FF">
is access all</font> My_Widget_Record'Class;<br>
&nbsp;&nbsp; <font color="#0000FF">package</font> Button_Handlers
<font color="#0000FF">is</font><font color="#008000">&nbsp;&nbsp; -- Handlers of 
button events</font><font color="#0000FF"><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new</font> Gtk.Handlers.User_Callback 
(Gtk_Button_Record, My_Widget);<br>
&nbsp;&nbsp; ...<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#008000">&nbsp;-- 
A button event handler, the second parameter is the widget<br>
</font>&nbsp;&nbsp; <font color="#0000FF">procedure</font> Clicked (Button : 
Gtk_Button_Record'Class; My : My_Widget);<br>
&nbsp;&nbsp; ...<br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Initialize (Widget :
<font color="#0000FF">access</font> My_Widget_Record'Class)<font color="#0000FF"> 
is<br>
&nbsp;&nbsp; begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set&nbsp; <font color="#008000">-- Connection of 
the handler to an external button<br>
</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Widget.Clicked_Handler,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Button_Handlers.Connect<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; External_Button,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">clicked</font>&quot;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Button_Handlers.To_Marshaller (Clicked'Access),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Widget.<font color="#0000FF">all</font>'Unchecked_Access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; );<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...</tt><p>Here the procedure Clicked handles 
button clicks of the button External_Button. The button itself does not belong 
to My_Widget, so when an instance of the widget vanishes a click to the button 
will cause program crash, because Clicked will be called with a dangling pointer 
in the second parameter. Therefore upon initialization the identifier of the 
callback is passed to a Handler_Reference object, which automatically 
disconnects from the button when My_Widget is destroyed.</p>
<h3><a name="5.4"></a>5.4. Managing recently used files (GtkRecentManager)</h3>
<p> 
The package Gtk.Recent_Manager_Alt provides a complete set of bindings to the
<a href="http://www.gtk.org">GTK+</a> 
facility for managing recently used files (<a href="https://developer.gnome.org/gtk3/stable/GtkRecentManager.html">GtkRecentManager</a>).</p>
<table border="1" cellspacing="0" cellpadding="5">
	<tr>
		<td><i>Note, that </i>
		<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/">GtkAda</a><i> distribution 
		beginning with 2.18.0 provide bindings to</i>
		<a href="https://developer.gnome.org/gtk3/stable/GtkRecentManager.html">GtkRecentManager</a><i>. 
		The implementation given in Gtk.Recent_Manager_Alt is less thin. In 
		particular it uses native Ada types for information objects and hides 
		memory management issues. </i></td>
	</tr>
</table>
<p> 
This feature of
<a href="http://www.gtk.org">GTK+</a> 
provides a simple&nbsp; database to store application data between calls. 
Usually it is the lists of recently used files. This allows to store 
user-specific application data in a system-independent way. The package provides 
two basic types:</p>
<ul>
	<li>Gtk_Recent_Info is an information item, such as a file choice. Items can 
	be searched for using URI as a key.</li>
	<li>Gtk_Recent_Manager is a manger of information items.</li>
</ul>
<p><u><b>Information items</b></u>:</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Recent_Manager.Get_Recent_Info">
</a>type</font> Gtk_Recent_Info <font color="#0000FF">
is new</font> GLib.C_Proxy;<br>
<font color="#0000FF">type</font> Gtk_Recent_Info_Array <font color="#0000FF">is<br>
&nbsp;&nbsp; array </font>(Positive <font color="#0000FF">range</font> &lt;&gt;)
<font color="#0000FF">of</font> Gtk_Recent_Info;</tt></p>
</blockquote>
<p>The objects of Gtk_Recent_Info type are reference counted. The procedures Ref 
and Unref are used to change the reference count. The following operations are 
defined for Gtk_Recent_Info:</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Exists (<b>Info</b> : 
Gtk_Recent_Info) <font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function checks whether the resource pointed by info still exists. At 
the moment this check is done only on resources pointing to local files.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Added (<b>Info</b> : 
Gtk_Recent_Info) <font color="#0000FF">return</font> Time;</tt></p>
</blockquote>
<p>This function returns the time when the resource was added to the list. 
Time_Error is propagated when time is not available.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Age (<b>Info</b> : 
Gtk_Recent_Info) <font color="#0000FF">return</font> Duration;</tt></p>
</blockquote>
<p>This function returns&nbsp; the duration elapsed since the last update of the 
resource pointed.</p>
		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Recent_Manager.Get_Application_Info">
</a>function</font> Get_Application_Info<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Info</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Gtk_Recent_Info;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>App_Name</b> 
: UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Application_Info;</tt></p>
</blockquote>
<p>This function returns the data regarding the application that has registered 
the resource pointed by <b>Info</b>. The result has the following type:</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Application_Info<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Registered&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 
Boolean;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; App_Exec_Length : Natural<br>
&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;is<br>
record</font><br>
&nbsp;&nbsp; <font color="#0000FF">case</font> Registered<font color="#0000FF"> 
is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when </font>True =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Count&nbsp;&nbsp;&nbsp;&nbsp; : 
GUInt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Last_Time : Time;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; App_Exec&nbsp; : UTF8_String 
(<font color="#800000">1</font>..App_Exec_Length);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> False =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">null</font>;<br>
<font color="#0000FF">&nbsp;&nbsp; end case</font>;<br>
<font color="#0000FF">end record</font>;</tt></p>
</blockquote>
<p>When the application <b>App_Name</b> has registered <b>Info</b>, the 
discriminant Registered of the result is <font color="#800000"><i>true</i></font> 
and the fields Count, Registration_Time and App_Exec are the number of times 
this item was registered, last registration time and the command line 
correspondingly.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Applications (<b>Info</b> : 
Gtk_Recent_Info)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Chars_Ptr_Array;</tt></p>
</blockquote>
<p>This function returns the list of application names which have registered the 
resource pointed by <b>Info</b>. It has to be freed using GtkAda.Types.Free.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Description (<b>Info</b> : 
Gtk_Recent_Info)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> UTF8_String;</tt></p>
</blockquote>
<p>This function returns the resource description.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Display_Name (<b>Info</b> : 
Gtk_Recent_Info)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> UTF8_String;</tt></p>
</blockquote>
<p>This function returns the display name of the resource.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_MIME_Type(<b>Info</b> : 
Gtk_Recent_Info)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> UTF8_String;</tt></p>
</blockquote>
<p>This function returns the MIME type of the resource.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Groups (<b>Info</b> : 
Gtk_Recent_Info)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Chars_Ptr_Array;</tt></p>
</blockquote>
<p>This function returns the list of groups for which the resource pointed by <b>
Info</b> was registered. It has to be freed using GtkAda.Types.Free.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Icon<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Info</b> : 
Gtk_Recent_Info;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Size</b> : 
GInt<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Gdk_Pixbuf;</tt></p>
</blockquote>
<p>This function returns the icon of the resource pointed by <b>Info</b>. The 
parameter <b>Size</b> specified the required icon size in pixels. The returned 
object has the reference count 1 and should be freed using Unref.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Modified (<b>Info</b> : 
Gtk_Recent_Info) <font color="#0000FF">return</font> Time;</tt></p>
</blockquote>
<p>This function returns the last modification time of the resource pointed by
<b>Info</b>. Time_Error is propagated when time is not available.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Private_Hint (<b>Info</b> : 
Gtk_Recent_Info) <font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns the value of the &quot;private&quot; flag. Resources in the 
recently used list that have this flag set to <font color="#800000"><i>true</i></font> 
should only be displayed by the applications that have registered them.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Private_Hint (<b>Info</b> : 
Gtk_Recent_Info) <font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns the value of the &quot;private&quot; flag. Resources in the 
recently used list that have this flag set to <font color="#800000"><i>true</i></font> 
should only be displayed by the applications that have registered them.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Short_Name (<b>Info</b> : 
Gtk_Recent_Info) <font color="#0000FF">return</font> UTF8_String;</tt></p>
</blockquote>
<p>This function computes a valid UTF-8 string that can be used as the name of 
the item in a menu or list. For example, calling this function on an item that 
refers to &quot;file:///foo/bar.txt&quot; will yield &quot;bar.txt&quot;.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Visited (<b>Info</b> : 
Gtk_Recent_Info) <font color="#0000FF">return</font> Time;</tt></p>
</blockquote>
<p>This function returns the last time the resource pointed by <b>Info</b> was 
visited. Time_Error is propagated when time is not available.</p>
		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Recent_Manager.Has_Application">
</a>function</font> Has_Application<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Info</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Gtk_Recent_Info;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>App_Name</b> 
: UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <font color="#800000"><i>true</i></font> if the 
resource pointed by <b>Info</b> was registered by the application <b>App_Name</b>.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Has_Group<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Info</b>&nbsp; : 
Gtk_Recent_Info;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Group</b> 
: UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <font color="#800000"><i>true</i></font> if the 
resource pointed by <b>Info</b> was specified for <b>Group</b>.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Is_Local (<b>Info</b> : 
Gtk_Recent_Info) <font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <font color="#800000"><i>true</i></font> if the 
resource pointed by <b>Info</b> is local according to the scheme of its URI.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Last_Application (<b>Info</b> : 
Gtk_Recent_Info) <font color="#0000FF">return</font> UTF8_String;</tt></p>
</blockquote>
<p>This function returns the name of the last application that has registered 
the resource pointed by <b>Info</b>.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Match (<b>Info_A</b>, <b>Info_B</b> 
: Gtk_Recent_Info) <font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if the 
arguments point to the same resource.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Ref (<b>Info</b> : Gtk_Recent_Info);</tt></p>
</blockquote>
<p>This procedure increases the reference count of <b>Info</b>,</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Unref (<b>Info</b> : 
Gtk_Recent_Info);</tt></p>
</blockquote>
<p>This procedure decreases the reference count of <b>Info</b>. This may lead 
the the object destruction.</p>
<p><u><b>Items managers</b></u>. A
<a href="https://developer.gnome.org/gtk3/stable/GtkRecentManager.html">GtkRecentManager</a> object provides a facility 
for adding, removing and looking up recently used files. Each recently used file 
is identified by its URI, and has meta-data associated to it. The corresponding 
item has the type Gtk_Recent_Info.</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Recent_Manager.Gtk_Recent_Manager_Record"></a>type</font> Gtk_Recent_Manager_Record
<font color="#0000FF">is<br>
&nbsp;&nbsp; new </font>Glib.Object.GObject_Record<font color="#0000FF"> with 
null record</font>;<br>
<font color="#0000FF">type</font> Gtk_Recent_Manager <font color="#0000FF">is<br>
&nbsp;&nbsp; access all </font>Gtk_Recent_Manager_Record'Class;</tt></p>
</blockquote>
<p>The following operations are defined for the manager objects:</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Add_Full<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Manager</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">access</font> Gtk_Recent_Manager_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>URI</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Display_Name</b> : UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Description</b>&nbsp; : UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>MIME_Type</b>&nbsp;&nbsp;&nbsp; 
: UTF8_String := &quot;<font color="#FF0000">application/octet-stream</font>&quot;;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>App_Name</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: UTF8_String := Get_Application_Name;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>App_Exec</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: UTF8_String := &quot; &quot; &amp; Get_PRGName &amp; &quot;<font color="#FF0000">%u</font>&quot;;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Groups</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Chars_Ptr_Array := Null_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Is_Private</b>&nbsp;&nbsp; 
: Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p>
</blockquote>
<p>Adds a new resource, pointed by <b>URI</b>, into the recently used resources 
list,. <b>URI</b> will be used to identify this resource inside the list. The 
result is <i><font color="#800000">true</font></i> if a new item was 
successfully added.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Add_Item<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Manager</b> :
<font color="#0000FF">not null access</font> Gtk_Recent_Manager_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>URI</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p>
</blockquote>
<p>Adds a new resource, pointed by <b>URI</b>, into the recently used resources 
list. The meta data are derived from <b>URI</b>. The result is <i>
<font color="#800000">true</font></i> if a new item was successfully added.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Default <font color="#0000FF">
return</font> Gtk_Recent_Manager;</tt></p>
</blockquote>
<p>This function returns the default manager. It is not created new by the 
function, so the result need not to be passed to Unref.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Items<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Manager</b> :
<font color="#0000FF">not null access</font> Gtk_Recent_Manager_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Gtk_Recent_Info_Array;</tt></p>
</blockquote>
<p>This function returns the array of items from <b>Manager</b>. For each item 
from the array Unref has to be called. Note that the result is unfiltered and 
contains items added from other applications. You will probably wish to filter it 
using the application name (see <a href="#Gtk.Missed.Get_Application_Name">
Get_Application_Name</a> and <a href="#Gtk.Recent_Manager.Has_Application">
Has_Application</a>). Like:</p>
<blockquote>
	<p><tt><font color="#0000FF">if</font> Has_Application (Item, Get_Application_Name)
	<font color="#0000FF">then</font><br>
	<font color="#008000">&nbsp;&nbsp; -- <i>Item belongs to this application</i><br>
	</font>&nbsp;&nbsp; ...</tt></p>
</blockquote>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Gtk_New (<b>Manager</b> :
<font color="#0000FF">out</font> Gtk_Recent_Manager);</tt></p>
</blockquote>
<p>This procedure creates a new manager.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Has_Item<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Manager</b> :
<font color="#0000FF">not null access</font> Gtk_Recent_Manager_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>URI</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if <b>Manager</b> 
has a resource for <b>URI</b>.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize (<b>Manager</b> :
<font color="#0000FF">not null access</font> Gtk_Recent_Manager_Record'Class);</tt></p>
</blockquote>
<p>This procedure has to be called by the derived type from its Initialize.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Lookup_Item<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Manager</b> :
<font color="#0000FF">not null access</font> Gtk_Recent_Manager_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>URI</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Item_Info;</tt></p>
</blockquote>
<p>This function searches for an item corresponding to <b>URI</b>. The result has 
the following type:</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Item_Disposition <font color="#0000FF">
is</font> (Found, Not_Found, Error);<br>
<font color="#0000FF">type</font> Item_Info (Status : Item_Disposition)<font color="#0000FF"> 
is record<br>
&nbsp;&nbsp; case </font>Status<font color="#0000FF"> is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when </font>Found =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Info : Gtk_Recent_Info;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> Not_Found =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> Error =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Error : GError;<br>
<font color="#0000FF">&nbsp;&nbsp; end case</font>;<br>
<font color="#0000FF">end record</font>;</tt></p>
</blockquote>
<p>When search was successful the discrimnant Status is <i>Found</i> and the 
field Info describes the resource information. The caller has to call Unref on 
it. When search failed Status is <i>Not_Found</i>. On errors, Status is <i>Error</i> 
and the filed Error indicates the reason.
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/glib.error.html#L44C14">Error_Free</a> has to be called on it.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Move_Item<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ( <b>&nbsp;Manager</b> :
<font color="#0000FF">not null access</font> Gtk_Recent_Manager_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>URI</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
New_URI</b> : UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Error</b>&nbsp;&nbsp; : <font color="#0000FF">out</font> GError<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure changes the location of a recently used resource from <b>URI</b> 
to <b>New_URI</b>. When <b>Error</b> is not <font color="#0000FF">null</font> it 
indicates an error and has to be passed to
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/glib.error.html#L44C14">Error_Free</a>.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Purge_Items<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Manager</b> :
<font color="#0000FF">not null access</font> Gtk_Recent_Manager_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Error</b>&nbsp;&nbsp; : <font color="#0000FF">out</font> GError;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Removed</b> : <font color="#0000FF">out</font> GInt<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure purges every item from the resources list. <b>Removed</b> is
the number of items removed. When <b>Error</b> is not <font color="#0000FF">null</font>
it indicates an error and has to be passed to
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/glib.error.html#L44C14">Error_Free</a>. </p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Remove_Item<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ( <b>&nbsp;Manager</b> :
<font color="#0000FF">not null access</font> Gtk_Recent_Manager_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>URI</b>&nbsp;&nbsp;&nbsp;&nbsp;
: UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Error</b>&nbsp;&nbsp; : <font color="#0000FF">out</font> GError<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure removes a recently used resource from the list. When <b>Error</b> 
is not <font color="#0000FF">null</font> it indicates an error and has to be 
passed to
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/glib.error.html#L44C14">Error_Free</a>. </p>
<h4><a name="5.4.1"></a>5.4.1. Key to value mapping</h4>
<p><a name="Gtk.Recent_Manager_Keys"></a>The package
<a href="#Gtk.Recent_Manager_Keys">Gtk.Recent_Manager_Keys</a> provides 
simplified means to store and restore values by keys:</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Recent_Manager_Keys.Restore"></a>function</font> 
Restore<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Default</b> 
: UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Manager</b> 
: Gtk_Recent_Manager := Get_Default<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> UTF8_String;</tt></p>
</blockquote>
<p>This function restores the value previously stored using
<a href="#Gtk.Recent_Manager_Keys.Store">Store</a> by its key. The parameter <b>
Key</b> is the key. When no value for the key is found, <b>Default</b> is 
returned. <b>Manager</b> is the
<a href="#Gtk.Recent_Manager.Gtk_Recent_Manager_Record">recent manager</a> to 
use.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Recent_Manager_Keys.Restore(model)"></a>procedure</font> 
Restore<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Model</b>&nbsp;&nbsp; : Gtk_List_Store;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Column</b>&nbsp; : GInt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Max_Row</b> : Positive := <font color="#800000">10</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Manager</b> : Gtk_Recent_Manager := Get_Default<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure restores <b>Column</b> of the list store model. The values of 
the keys are named as <i>key</i>_<i>n</i> where <i>key</i> is the value of&nbsp;
<b>Key</b>, and <i>n</i> is the number 1..<b>Max_Row</b>.&nbsp; &lt;key&gt;_1 
corresponds the first row of the model. The values are set at <b>Column</b> as 
strings. When the model does not contain a row, it is inserted into the model. <b>Manager</b> is the
<a href="#Gtk.Recent_Manager.Gtk_Recent_Manager_Record">recent manager</a> to 
use. The procedure can be used to fill combo box entries contents with recently 
entered values as follows:</p>
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#FFDEBD"><tt>&nbsp;&nbsp; Combo : Gtk_Combo_Box_Entry;<br>
&nbsp;&nbsp; List&nbsp; : Gtk_List_Store;<font color="#0000FF"><br>
begin<br>
</font>&nbsp;&nbsp; ...<font color="#0000FF"><br>
&nbsp;&nbsp; </font>Gtk_New (List, (<font color="#800000">1</font> =&gt; 
GType_String));<br>
&nbsp;&nbsp; Restore (&quot;<font color="#FF0000">Combo_Box_Values</font>&quot;, List,
<font color="#800000">0</font>); <br>
&nbsp;&nbsp; Gtk_New_With_Model (Combo, List, <font color="#800000">0</font>);</tt></TD>
  </TR>
</TABLE>

<p> The values of a combo box can be stored using the procedure 
<a href="#Gtk.Recent_Manager_Keys.Store(model)">Store</a>. </p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Recent_Manager_Keys.Store"></a>procedure</font> Store<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Key&nbsp;&nbsp;&nbsp;&nbsp;
</b>: UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp; : UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Manager</b> : Gtk_Recent_Manager := Get_Default<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure stores <b>Value</b> under the key <b>Key</b> using <b>Manager</b>.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Recent_Manager_Keys.Store(model)"></a>procedure</font> Store<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Key&nbsp;&nbsp;&nbsp;&nbsp;
</b>: UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Model</b>&nbsp;&nbsp; : Gtk_List_Store;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Column</b>&nbsp; : GInt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Max_Row</b> : Positive := <font color="#800000">10</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Manager</b> : Gtk_Recent_Manager := Get_Default<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure stores <b>Column</b> of the list store model. The values of 
the keys are named as <i>key</i>_<i>n</i> where <i>key</i> is the value of&nbsp;
<b>Key</b>, and <i>n</i> is the row number. <b>Max_Row</b> rows are stored. Stored 
column can be restored using <a href="#Gtk.Recent_Manager_Keys.Restore(model)">Restore</a>. 
Values entered into the combo box entry and committed as worth to remember 
should be inserted into the model. Later when the widget is destroyed 
<a href="#Gtk.Recent_Manager_Keys.Store(model)">Store</a> is called to remember 
its contents.</p>
<p>The package defines an abstract type to enumerate keys:</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Key_Enumerator <font color="#0000FF">is<br>
&nbsp;&nbsp; abstract new </font>Ada.Finalization.Limited_Controlled
<font color="#0000FF">with null record</font>;</tt></p>
</blockquote>
<p>The type has the class-wide operation:</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Recent_Manager_Keys.Enumerate"></a>
procedure</font> Enumerate<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Enumerator</b> 
: <font color="#0000FF">in out</font> Key_Enumerator'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Prefix</b>&nbsp;&nbsp;&nbsp;&nbsp; : UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Manager</b>&nbsp;&nbsp;&nbsp; : Gtk_Recent_Manager := Get_Default<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure enumerates the keys of <b>Manager</b> which keys begin with <b>
Prefix</b>. For each found key <a href="#Gtk.Recent_Manager_Keys.Process">
Process</a> is called. The operation ends prematurely if
<a href="#Gtk.Recent_Manager_Keys.Process">Process</a> propagates End_Error.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Recent_Manager_Keys.Process"></a>
procedure</font> Process<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Enumerator</b> 
: <font color="#0000FF">in out</font> Key_Enumerator;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Key</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Info</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Gtk_Recent_Info<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is abstract</font>;</tt></p>
</blockquote>
<p>This procedure is called for enumerated keys. <b>Enumerator</b> is the 
parameter passed to <a href="#Gtk.Recent_Manager_Keys.Enumerate">Enumerate</a>.
<b>Key</b> is the key value beginning with <b>Prefix</b>. <b>Value</b> is the 
value corresponding to <b>Key</b>. <b>Info</b> is the 
<a href="#Gtk.Recent_Manager.Get_Recent_Info">information item</a> 
associated with the key. The implementation may propagate End_Error in order to 
end enumeration prematurely.</p>
<h3><a name="5.5"></a>5.5. Source view (GtkSourceView)</h3>
<p>The set of packages:</p>
<ul>
	<li><a href="#Gtk.Source_Buffer">Gtk.Source_Buffer</a></li>
	<li><a href="#Gtk.Source_Language">Gtk.Source_Language</a></li>
	<li><a href="#Gtk.Source_Language_Manager">Gtk.Source_Language_Manager</a></li>
	<li><a href="#Gtk.Source_Mark">Gtk.Source_Mark</a></li>
	<li><a href="#Gtk.Source_Style">Gtk.Source_Style</a></li>
	<li><a href="#Gtk.Source_Style_Scheme">Gtk.Source_Style_Scheme</a></li>
	<li>
<a href="#Gtk.Source_Style_Scheme_Manager">Gtk.Source_Style_Scheme_Manager</a></li>
	<li><a href="#Gtk.Source_View">Gtk.Source_View</a></li>
</ul>
<p> 
provides a complete set of bindings to the
<a href="https://developer.gnome.org/gtksourceview/stable/GtkSourceView.html">GtkSourceView</a>, an 
extension of the text view widget that supports syntax highlighting.
<a href="https://developer.gnome.org/gtksourceview/stable/GtkSourceView.html">GtkSourceView</a> comes with a 
large data base of language syntax highlighting description which also includes 
Ada. It also allows custom syntax highlighting definitions.</p>
<table border="1" cellspacing="0" cellpadding="5">
	<tr>
		<td><i>Note, that </i>
<a href="https://developer.gnome.org/gtksourceview/stable/GtkSourceView.html">GtkSourceView</a><i> is  
		presently not a part of </i>
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/">GtkAda</a><i> distribution. In
		order to use these package you will need to install </i>
<a href="https://developer.gnome.org/gtksourceview/stable/GtkSourceView.html">GtkSourceView</a> <i>
		developing distribution. For further information see </i>
		<a href="#Installation">installation</a><i>.</i></td>
	</tr>
</table>
<p> 
<u><b><a name="Gtk.Source_Buffer"></a>Source buffer</b></u>. The package
<a href="#Gtk.Source_Buffer">Gtk.Source_Buffer</a> provides binding to extended 
text buffer object (see
<a href="https://developer.gnome.org/gtksourceview/stable/GtkSourceBuffer.html">GtkSourceBuffer</a>):</p>
		<blockquote>
<p><tt><font color="#0000FF">type</font> Gtk_Source_Buffer_Record
<font color="#0000FF">is<br>
&nbsp;&nbsp; new </font>Gtk_Text_Buffer_Record <font color="#0000FF">with 
private</font>;<br>
<font color="#0000FF">type</font> Gtk_Source_Buffer <font color="#0000FF">is 
access all</font> Gtk_Source_Buffer_Record'Class;</tt></p>
</blockquote>
<p>The package defines a new text search constant that can used for text 
searches in the buffer:</p>
		<blockquote>
<p><tt>Case_Insensitive : <font color="#0000FF">constant</font> 
Gtk_Text_Search_Flags := ...;</tt></p>
</blockquote>
<p>The following operations are defined:</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Backward_Iter_To_Source_Mark<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Buffer</b>&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Source_Buffer_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Iter</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Gtk_Text_Iter;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Moved</b>&nbsp;&nbsp;&nbsp; : <font color="#0000FF">out</font> Boolean;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Category</b> : 
UTF8_String ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure moves <b>Iter</b> to the position of the previous 
Gtk_Source_Mark of the given category. <b>Moved</b> is <font color="#800000"><i>
true</i></font> if <b>Iter</b> was moved. If <b>Category</b> is omitted, the 
previous source mark can be of any category.</p>
		<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Source_Buffer.Begin_Not_Undoable_Action"></a>procedure</font> 
Begin_Not_Undoable_Action<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Buffer</b> :
<font color="#0000FF">not null access</font> Gtk_Source_Buffer_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure marks the beginning of a not undoable action on the buffer, 
disabling the undo manager. Typically you would call this function before 
initially setting the contents of the buffer (e.g. when loading a file in a text 
editor). You may nest <a href="#Gtk.Source_Buffer.Begin_Not_Undoable_Action">
Begin_Not_Undoable_Action</a> /
<a href="#Gtk.Source_Buffer.End_Not_Undoable_Action">End_Not_Undoable_Action</a> 
blocks.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Can_Redo<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Buffer</b> :
<font color="#0000FF">not null access</font> Gtk_Source_Buffer_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if the source 
buffer can redo the last action.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Can_Undo<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Buffer</b> :
<font color="#0000FF">not null access</font> Gtk_Source_Buffer_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if the source 
buffer can undo the last action.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Create_Source_Mark<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Buffer</b>&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Source_Buffer_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Category</b> : 
UTF8_String; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Where</b>&nbsp;&nbsp;&nbsp; 
: Gtk_Text_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Gtk_Source_Mark;</tt></p>
</blockquote>
<p>This function creates a source mark in the buffer of category. A source mark 
is a Gtk_Text_Mark, but organized into categories. Depending on the category a 
pixbuf can be specified that will be displayed along the line of the mark. Like 
a Gtk_Text_Mark, a Gtk_Source_Mark can be anonymous. Also, the buffer owns the 
marks so you shouldn't unreference it. Marks always have left gravity and are 
moved to the beginning of the line when the user deletes the line they were in. 
Typical uses for a source mark are bookmarks, breakpoints, current executing 
instruction indication in a source file, etc.</p>
		<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Source_Buffer.End_Not_Undoable_Action"></a>procedure</font> 
End_Not_Undoable_Action<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Buffer</b> :
<font color="#0000FF">not null access</font> Gtk_Source_Buffer_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure marks the end of a not undoable action on the buffer. When the 
last not undoable block is closed through the call to this procedure, the list 
of undo actions is cleared and the undo manager is re-enabled.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Ensure_Highlight<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Buffer</b> :
<font color="#0000FF">not null access</font> Gtk_Source_Buffer_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Start</b>&nbsp; : Gtk_Text_Iter;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Stop</b>&nbsp;&nbsp; 
: Gtk_Text_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure forces buffer to analyze and highlight the given area 
synchronously. Note that this is a potentially slow operation and should be used 
only when you need to make sure that some text not currently visible is 
highlighted, for instance before printing.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Ensure_Highlight<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Buffer</b> :
<font color="#0000FF">not null access</font> Gtk_Source_Buffer_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Start</b>&nbsp; : Gtk_Text_Iter;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Stop</b>&nbsp;&nbsp; 
: Gtk_Text_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure forces buffer to analyze and highlight the given area 
synchronously. Note that this is a potentially slow operation and should be used 
only when you need to make sure that some text not currently visible is 
highlighted, for instance before printing.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Forward_Iter_To_Source_Mark<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Buffer</b>&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Source_Buffer_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Iter</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Gtk_Text_Iter;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Moved</b>&nbsp;&nbsp;&nbsp; : <font color="#0000FF">out</font> Boolean;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Category</b> : 
UTF8_String ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure moves <b>Iter</b> to the position of the next Gtk_Source_Mark 
of the given category. <b>Moved</b> is <font color="#800000"><i>true</i></font> 
if <b>Iter</b> was moved. If <b>Category</b> is omitted, the previous source 
mark can be of any category.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Highlight_Matching_Brackets<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Buffer</b> :
<font color="#0000FF">not null access</font> Gtk_Source_Buffer_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if the source 
buffer will highlight matching brackets.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Highlight_Syntax<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Buffer</b> :
<font color="#0000FF">not null access</font> Gtk_Source_Buffer_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if if syntax 
highlighting is activated.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Language<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Buffer</b> :
<font color="#0000FF">not null access</font> Gtk_Source_Buffer_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Gtk_Source_Language;</tt></p>
</blockquote>
<p>This function returns the language associated with the buffer. The returned 
language object is owned by the buffer. It must not be unref'ed.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Max_Undo_Levels<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Buffer</b> :
<font color="#0000FF">not null access</font> Gtk_Source_Buffer_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> GInt;</tt></p>
</blockquote>
<p>This function returns the maximum number of possible undo levels or -1 if no 
limit is set.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Source_Marks_At_Line<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Buffer</b>&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Source_Buffer_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Line</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: GInt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Category</b> : 
UTF8_String ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Gtk_Source_Marks_Array;</tt></p>
</blockquote>
<p>This function returns the array of marks at the line. The objects in the 
array are owned by the buffer and shall not be unref'ed.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Source_Marks_At_Iter<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Buffer</b>&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Source_Buffer_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Iter</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Gtk_Text_Iter;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Category</b> : 
UTF8_String ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Gtk_Source_Marks_Array;</tt></p>
</blockquote>
<p>This function returns the array of marks at the iterator. The objects in the 
array are owned by the buffer and shall not be unref'ed.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Style_Scheme<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Buffer</b> :
<font color="#0000FF">not null access</font> Gtk_Source_Buffer_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Gtk_Source_Style_Scheme;</tt></p>
</blockquote>
<p>This function returns the style scheme of the buffer. The returned style 
scheme object is owned by the buffer. It must not be unref'ed.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Buffer</b>&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Gtk_Source_Buffer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Language</b> : <font color="#0000FF">not null access</font> 
Gtk_Source_Language_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure creates a new buffer with a language set for highlighting.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Buffer</b>&nbsp;: <font color="#0000FF">out</font> Gtk_Source_Buffer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Table</b>&nbsp; : Gtk_Text_Tag_Table := <font color="#0000FF">null</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure creates a new buffer with a text tag table. When table is
<font color="#0000FF">null</font> a new one is created.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Buffer</b>&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Source_Buffer_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Language</b> : <font color="#0000FF">not null access</font> 
Gtk_Source_Language_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure</font> Initialize<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
<b>Buffer</b>&nbsp;: <font color="#0000FF">not null access</font> Gtk_Source_Buffer_Record'Class;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<b>Table</b>&nbsp; : Gtk_Text_Tag_Table<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>One of these procedures has to be called from the Initialize of a derived object.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Redo (<b>Buffer</b> :
<font color="#0000FF">not null access</font> Gtk_Source_Buffer_Record'Class);</tt></p>
</blockquote>
<p>This procedure re-does the last undo action.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Remove_Source_Marks<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Buffer</b>&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Source_Buffer_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Start</b>&nbsp;&nbsp;&nbsp; : Gtk_Text_Iter;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Stop</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Gtk_Text_Iter;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Category</b> : 
UTF8_String ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure removes all marks of category between <b>Start</b> and <b>Stop</b> 
from the buffer. If category is omitted, all marks in the range will be removed.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Highlight_Matching_Brackets<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Buffer</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Source_Buffer_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Highlight</b> : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure controls the bracket match highlighting function in the 
buffer. If activated, when you position your cursor over a bracket character (a 
parenthesis, a square bracket, etc.) the matching opening or closing bracket 
character will be highlighted.</p>
		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Source_Buffer.Set_Highlight_Syntax">
</a>procedure</font> Set_Highlight_Syntax<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Buffer</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Source_Buffer_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Highlight</b> : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>If <b>Highlight</b> is <i><font color="#800000">true</font></i>, the text 
will be highlighted according to the syntax patterns specified in the language 
set with <a href="#Gtk.Source_Buffer.Set_Language">Set_language</a>. If 
highlight is <font color="#800000"><i>false</i></font>, syntax highlighting is 
disabled and all the
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.text_tag.html">Gtk_Text_Tag</a> objects that have been added by the syntax highlighting engine 
are removed from the buffer.</p>
		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Source_Buffer.Set_Language"></a>
procedure</font> Set_Language<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Buffer</b>&nbsp;&nbsp;
: <font color="#0000FF">not null access</font> Gtk_Source_Buffer_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Language</b> : Gtk_Source_Language<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure associates a Gtk_Source_Language with the source buffer. If 
language is null and syntax highlighting is enabled (see
<a href="#Gtk.Source_Buffer.Set_Highlight_Syntax">Set_Highlight_Syntax</a>, the 
syntax patterns defined in language will be used to highlight the text contained 
in the buffer. If language is <font color="#0000FF">null</font>, the text 
contained in the buffer is not highlighted.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Max_Undo_Levels<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Buffer</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Source_Buffer_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Max_Undo_Levels</b> : GInt := <font color="#800000">-1</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>The value -1 of <b>Max_Undo_Levels</b> indicates no limit is set. Otherwise 
it is the maximal number of undo levels to track.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Style_Scheme<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Buffer</b> :
<font color="#0000FF">not null access</font> Gtk_Source_Buffer_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Scheme</b> : <font color="#0000FF">not null access</font> 
Gtk_Source_Style_Scheme_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets style scheme used by the buffer.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Undo (<b>Buffer</b> :
<font color="#0000FF">not null access</font> Gtk_Source_Buffer_Record);</tt></p>
</blockquote>
<p>This procedure undoes the last action, which modified the buffer. Actions are 
defined as groups of operations between a call to
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.text_buffer.html#L143C14">Begin_User_Action</a> and
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.text_buffer.html#L302C14">End_User_Action</a>, or sequences of similar edits (inserts or deletes) on the 
same line.</p>
<p> 
<u><b><a name="Gtk.Source_Language"></a>Source language</b></u>. The package
<a href="#Gtk.Source_Language">Gtk.Source_Language</a> provides bindings to
<a href="https://developer.gnome.org/gtksourceview/stable/GtkSourceLanguage.html">GtkSourceLanguage</a>:</p>
		<blockquote>
<p><tt><font color="#0000FF">type</font> Gtk_Source_Language_Record
<font color="#0000FF">is<br>
&nbsp;&nbsp; new</font> GObject_Record <font color="#0000FF">with private</font>;<br>
<font color="#0000FF">type</font> Gtk_Source_Language <font color="#0000FF">is<br>
&nbsp;&nbsp; access all</font> Gtk_Source_Language_Record'Class;</tt></p>
</blockquote>
<p>The following operations are defined:</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Globs<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Language</b> :
<font color="#0000FF">not null access</font> Gtk_Source_Language_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Chars_Ptr_Array;</tt></p>
</blockquote>
<p>This is just an utility wrapper around
<a href="#Gtk.Source_Language.Get_Metadata">Get_Metadata</a> to retrieve the 
&quot;globs&quot; metadata property and split it into an array. The elements of the result 
have to be freed using Interfaces.C.Strings.Free or else Gtkada.Types.Free.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Hidden<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Language</b> :
<font color="#0000FF">not null access</font> Gtk_Source_Language_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <font color="#800000"><i>true</i></font> if the 
language should be hidden from the user.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_ID<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Language</b> :
<font color="#0000FF">not null access</font> Gtk_Source_Language_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;)&nbsp; <font color="#0000FF">return</font> UTF8_String;</tt></p>
</blockquote>
<p>This function returns the language ID.</p>
		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Source_Language.Get_Metadata"></a>
function</font> Get_Metadata<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Language</b> :
<font color="#0000FF">not null access</font> Gtk_Source_Language_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> UTF8_String;</tt></p>
</blockquote>
<p>This function returns value of property <b>Name</b> stored in the metadata.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Mime_Types<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Language</b> :
<font color="#0000FF">not null access</font> Gtk_Source_Language_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Chars_Ptr_Array;</tt></p>
</blockquote>
<p>This function returns the mime types associated to this language. This is 
just an utility wrapper around <a href="#Gtk.Source_Language.Get_Metadata">
Get_Metadata</a> to retrieve the &quot;mimetypes&quot; metadata property and split it into 
an array. The elements of the result have to be freed using 
Interfaces.C.Strings.Free or else Gtkada.Types.Free.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Name<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Language</b> :
<font color="#0000FF">not null access</font> Gtk_Source_Language_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> UTF8_String;</tt></p>
</blockquote>
<p>This function returns the localized name of the language.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Section<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Language</b> :
<font color="#0000FF">not null access</font> Gtk_Source_Language_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> UTF8_String;</tt></p>
</blockquote>
<p>This function returns the localized section of the language.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Style_Fallback<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Language</b> :
<font color="#0000FF">not null access</font> Gtk_Source_Language_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Style&nbsp;&nbsp;
</b>&nbsp;: UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> UTF8_String;</tt></p>
</blockquote>
<p>This function returns the ID of the style to use if the specified <b>Style</b> 
is not present in the current style scheme.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Style_IDs<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Language</b> :
<font color="#0000FF">not null access</font> Gtk_Source_Language_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Chars_Ptr_Array;</tt></p>
</blockquote>
<p>This function returns the identifiers of the styles defined by this language. 
The elements of the result have to be freed using Interfaces.C.Strings.Free or 
else Gtkada.Types.Free.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Style_Name<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Language</b> :
<font color="#0000FF">not null access</font> Gtk_Source_Language_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Style</b>&nbsp;&nbsp;&nbsp; 
: UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Chars_Ptr_Array;</tt></p>
</blockquote>
<p>This function returns the style name or empty string.</p>
<p> 
<u><b><a name="Gtk.Source_Language_Manager"></a>Source language manager</b></u>. The package
<a href="#Gtk.Source_Language_Manager">Gtk.Source_Language_Manager</a> provides bindings
to
<a href="https://developer.gnome.org/gtksourceview/stable/GtkSourceLanguageManager.html">GtkSourceLanguageManager</a>. 
A manager object is used to get <a href="#Gtk.Source_Language">source language</a>, 
usually from some persistent storage.</p>
		<blockquote>
<p><tt><font color="#0000FF">type</font> Gtk_Source_Language_Manager_Record
<font color="#0000FF">is<br>
&nbsp;&nbsp; new</font> GObject_Record <font color="#0000FF">with private</font>;<br>
<font color="#0000FF">type</font> Gtk_Source_Language_Manager is<br>
&nbsp;&nbsp; <font color="#0000FF">access all</font> 
Gtk_Source_Language_Manager_Record'Class;</tt></p>
</blockquote>
<p>The following operations are defined:</p>
		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Source_Language_Manager.Get_Default">
</a>function</font> Get_Default <font color="#0000FF">return</font> 
Gtk_Source_Language_Manager;</tt></p>
</blockquote>
<p>The returned object is owned and shall not be unref'ed.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Language<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Manager</b>&nbsp; :
<font color="#0000FF">not null access</font> Gtk_Source_Language_Manager_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Language</b> 
: UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Gtk_Source_Language;</tt></p>
</blockquote>
<p>The returned object is owned and shall not be unref'ed. For example:</p>
<blockquote>
	<tt>Get_Language (Get_Default, &quot;<font color="#FF0000">ada</font>&quot;);</tt><p><tt><font color="#0000FF">function</font> 
	Get_Language_IDs<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Manager</b> :
	<font color="#0000FF">not null access</font> Gtk_Source_Language_Manager_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Chars_Ptr_Array;</tt></p>
</blockquote>
<p>This function returns an array containing a list of language identifiers. The 
array elements are owned by the language manager and must not be modified.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Get_Search_Path<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Manager</b> :
	<font color="#0000FF">not null access</font> Gtk_Source_Language_Manager_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Chars_Ptr_Array;</tt></p>
</blockquote>
<p>This function returns an array containing a list of language files 
directories. The array elements are owned by the language manager and must not 
be modified.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Gtk_New (<b>Manager</b> :
	<font color="#0000FF">out</font> Gtk_Source_Language_Manager);</tt></p>
</blockquote>
<p>This procedure creates new manager object.</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Guess_Language<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Manager</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">not null access</font> Gtk_Source_Language_Manager_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>File_Name</b>&nbsp;&nbsp;&nbsp; 
	: UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Content_Type</b> : UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Gtk_Source_Language;<br>
	<font color="#0000FF">function</font> Guess_Language_By_File_Name<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Manager</b>&nbsp;&nbsp; 
	: <font color="#0000FF">not null access</font> Gtk_Source_Language_Manager_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>File_Name</b> 
	: UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Gtk_Source_Language;<br>
	<font color="#0000FF">function</font> Guess_Language_By_Content<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Manager</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">not null access</font> Gtk_Source_Language_Manager_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Content_Type</b> : UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Gtk_Source_Language;</tt></p>
</blockquote>
<p>This function guesses language by file name and or content. The returned 
object is owned and shall not be unref'ed. Either <b>File_Name</b> or <b>
Content_Type</b> can be omitted in the function versions named 
Guess_Language_By_File_Name and Guess_Language_By_Content.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Manager</b> :
	<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font> &nbsp;Gtk_Source_Language_Manager_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure has to be called by derived types from their Initialize.</p>
<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Set_Search_Path<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Manager</b> :
	<font color="#0000FF">not null access</font> Gtk_Source_Language_Manager_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Dirs</b>&nbsp;&nbsp;&nbsp; 
	: Chars_Ptr_Array ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets the search path to look after language descriptions. When
<b>Dirs</b> is absent the search path is set to default. At the moment this 
function can be called only before the language files are loaded for the first 
time. In practice to set a custom search path for a manager, you have to call 
this function right after creating it.</p>
<p> 
<u><b><a name="Gtk.Source_Mark"></a>Source mark</b></u>. The package
<a href="#Gtk.Source_Mark">Gtk.Source_Mark</a> provides bindings to
<a href="https://developer.gnome.org/gtksourceview/stable/GtkSourceMark.html">GtkSourceMark</a>:</p>
		<blockquote>
<p><tt><font color="#0000FF">type</font> Gtk_Source_Mark_Record
<font color="#0000FF">is<br>
&nbsp;&nbsp; new</font> Gtk_Text_Mark_Record <font color="#0000FF">with private</font>;<br>
<font color="#0000FF">type</font> Gtk_Source_Mark <font color="#0000FF">is 
access all</font> Gtk_Source_Mark_Record'Class;</tt></p>
</blockquote>
<p>The arrays of source marks are used in some operations:</p>
		<blockquote>
<p><tt><font color="#0000FF">type</font> Gtk_Source_Marks_Array
<font color="#0000FF">is<br>
&nbsp;&nbsp; array</font> (Positive range &lt;&gt;) <font color="#0000FF">of</font> 
Gtk_Source_Mark;</tt></p>
</blockquote>
<p>The following operations are defined:</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Category<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Mark</b> :
<font color="#0000FF">not null access</font> Gtk_Source_Mark_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> UTF8_String;</tt></p>
</blockquote>
<p>This function returns the category of <b>Mark</b>.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Mark</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Gtk_Source_Mark;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Name</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: UTF8_String; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Category</b> : UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures create a new mark. The parameter <b>Name</b> can be omitted 
to create an anonymous mark.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Mark</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Source_Mark_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Name</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: UTF8_String; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Category</b> : UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called from Initialize of derived objects.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Next<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Mark</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Source_Mark_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Category</b> : 
UTF8_String ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Gtk_Source_Mark;</tt></p>
</blockquote>
<p>This function returns the next mark in the buffer or <font color="#0000FF">
null</font> if the mark was not added to a buffer. If there is no next mark,
<font color="#0000FF">null</font> will be returned. If category is omitted, it 
looks for marks of any category.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Prev<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Mark</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Source_Mark_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Category</b> : 
UTF8_String ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Gtk_Source_Mark;</tt></p>
</blockquote>
<p>This function returns the previous mark in the buffer or
<font color="#0000FF">null</font> if the mark was not added to a buffer. If 
there is no previous mark, <font color="#0000FF">null</font> will be returned. 
If category is omitted, it looks for marks of any category.</p>
<p> 
<u><b><a name="Gtk.Source_Mark_Attributes"></a>Source mark attributes</b></u>. The package
<a href="#Gtk.Source_Mark_Attributes">Gtk.Source_Mark_Attributes</a> provides bindings to
<a href="https://developer.gnome.org/gtksourceview/stable/GtkSourceMarkAttributes.html">GtkSourceMarkAttributes</a>:</p>
		<blockquote>
<p><tt><font color="#0000FF">type</font> Gtk_Source_Mark_Atributes_Record
<font color="#0000FF">is<br>
&nbsp;&nbsp; new</font> GObject_Record <font color="#0000FF">with private</font>;<br>
<font color="#0000FF">type</font> Gtk_Source_Mark_Atributes <font color="#0000FF">is<br>
&nbsp;&nbsp; 
access all</font> Gtk_Source_Mark_Atributes_Record'Class;</tt></p>
</blockquote>
<p>The following operations are defined:</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Background<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Attributes</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Source_Mark_Atributes_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Gdk_RGBA;</tt></p>
</blockquote>
<p>This function returns the background color of <b>Attributes</b>.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_GIcon<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Attributes</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Source_Mark_Atributes_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> G_Icon;</tt></p>
</blockquote>
<p>This function returns the icon of <b>Attributes</b>.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_GIcon<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Attributes</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Source_Mark_Atributes_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> G_Icon;</tt></p>
</blockquote>
<p>This function returns the icon of <b>Attributes</b>.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Icon_Name<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Attributes</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Source_Mark_Atributes_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> UTF8_String;</tt></p>
</blockquote>
<p>This function returns the icon name of <b>Attributes</b>. The result is empty 
string if no icon name set.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Pxibuf<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Attributes</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Source_Mark_Atributes_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Gdk_Pixbuf;</tt></p>
</blockquote>
<p>This function returns the buffer of the rendered icon of <b>Attributes</b>. 
The result can be <font color="#0000FF">null</font>.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Stock_ID<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Attributes</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Source_Mark_Atributes_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> UTF8_String;</tt></p>
</blockquote>
<p>This function returns the icon stock ID of <b>Attributes</b>. The result can 
be empty string.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Tooltip_Markup<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Attributes</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Source_Mark_Atributes_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Mark :
<font color="#0000FF">not null access</font> Gtk_Source_Mark_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> UTF8_String;</tt></p>
</blockquote>
<p>This function returns the tooltip text which may contain markup.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Tooltip_Text<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Attributes</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Source_Mark_Atributes_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Mark :
<font color="#0000FF">not null access</font> Gtk_Source_Mark_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> UTF8_String;</tt></p>
</blockquote>
<p>This function return the tooltip text.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Attributes</b> 
: <font color="#0000FF">out</font> Gtk_Source_Mark_Atributes<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure create a new object of attributes.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Attributes</b> 
: <font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font> &nbsp;Gtk_Source_Mark_Atributes_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called from Initialize of derived objects.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Render_Icon<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Attributes</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Source_Mark_Atributes_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Widget</b> 
: <font color="#0000FF">not null access</font> Gtk_Widget_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Size</b>&nbsp;&nbsp; 
: GInt<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Gdk_Pixbuf;</tt></p>
</blockquote>
<p>This function renders an icon of given size. The base of the icon is set by 
the last call to one of <a href="#Gtk.Source_Mark_Attributes.Set_Pixbuf">
Set_Pixbuf</a>, <a href="#Gtk.Source_Mark_Attributes.Set_GIcon">Set_GIcon</a>,
<a href="#Gtk.Source_Mark_Attributes.Set_Stock_ID">Set_Stock_ID</a>. <b>Size</b> 
cannot be lower than 1.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Background<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Attributes</b> 
: <font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Source_Mark_Atributes_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Background</b> : Gdk_RGBA<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets the background color.</p>
		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Source_Mark_Attributes.Set_GIcon"></a>
procedure</font> Set_GIcon<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Attributes</b> 
: <font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Source_Mark_Atributes_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Icon</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: G_Icon<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets the icon.</p>
		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Source_Mark_Attributes.Set_Icon_Name">
</a>procedure</font> Set_Icon_Name<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Attributes</b> 
: <font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Source_Mark_Atributes_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Icon_Name&nbsp; </b>: UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets the icon name.</p>
		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Source_Mark_Attributes.Set_Pixbuf">
</a>procedure</font> Set_Pixbuf<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Attributes</b> 
: <font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Source_Mark_Atributes_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pixbuf</b>&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">not null access</font> 
Gdk_Pixbuf_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets the icon.</p>
		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Source_Mark_Attributes.Set_Stock_ID">
</a>procedure</font> Set_Stock_ID<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Attributes</b> 
: <font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Source_Mark_Atributes_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Stock_ID</b>&nbsp;&nbsp; : UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets the icon from stock ID.</p>
<p> 
<u><b><a name="Gtk.Source_Style"></a>Source style</b></u>. The package
<a href="#Gtk.Source_Style">Gtk.Source_Style</a> provides bindings to
<a href="https://developer.gnome.org/gtksourceview/stable/GtkSourceStyle.html">
GtkSourceStyle</a>:</p>
		<blockquote>
<p><tt><font color="#0000FF">type</font> Gtk_Source_Style_Record
<font color="#0000FF">is new</font> GObject_Record <font color="#0000FF">with 
private</font>;<br>
<font color="#0000FF">type</font> Gtk_Source_Style <font color="#0000FF">is 
access all</font> Gtk_Source_Style_Record'Class;</tt></p>
</blockquote>
<p>The following operations are defined:</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Style_Copy<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Style</b> :
<font color="#0000FF">not null access</font> Gtk_Source_Style_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font> Gtk_Source_Style;</tt></p>
</blockquote>
<p>This function creates a copy of <b>Style</b>. The result shall be unref'ed when no 
more used.</p>
<p> 
<u><b><a name="Gtk.Source_Style_Scheme"></a>Source style scheme</b></u>. The package
<a href="#Gtk.Source_Style_Scheme">Gtk.Source_Style_Scheme</a> provides bindings to
<a href="https://developer.gnome.org/gtksourceview/stable/GtkSourceStyleScheme.html">GtkSourceStyleScheme</a>:</p>
		<blockquote>
<p><tt><font color="#0000FF">type</font> Gtk_Source_Style_Scheme_Record
<font color="#0000FF">is<br>
&nbsp;&nbsp; new</font> GObject_Record <font color="#0000FF">with private</font>;<br>
<font color="#0000FF">type</font> Gtk_Source_Style_Scheme <font color="#0000FF">
is<br>
&nbsp;&nbsp; access all</font> Gtk_Source_Style_Scheme_Record'Class;</tt></p>
</blockquote>
<p>The following operations are defined:</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Authors<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Scheme</b> :
<font color="#0000FF">not null access</font> Gtk_Source_Style_Scheme_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Chars_Ptr_Array;</tt></p>
</blockquote>
<p>This function returns authors of the style scheme. Elements of the result are 
owned by the style scheme. They shall not modified or freed.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Description<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Scheme</b> :
<font color="#0000FF">not null access</font> Gtk_Source_Style_Scheme_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> UTF8_String;</tt></p>
</blockquote>
<p>This function returns scheme description or empty string if none.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Filename<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Scheme</b> :
<font color="#0000FF">not null access</font> Gtk_Source_Style_Scheme_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> UTF8_String;</tt></p>
</blockquote>
<p>This function returns the file name parsed to create the scheme or empty 
string if none.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_ID<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Scheme</b> :
<font color="#0000FF">not null access</font> Gtk_Source_Style_Scheme_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> UTF8_String;</tt></p>
</blockquote>
<p>This function returns identifier of the style scheme.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Name<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Scheme</b> :
<font color="#0000FF">not null access</font> Gtk_Source_Style_Scheme_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> UTF8_String;</tt></p>
</blockquote>
<p>This function returns name of the style scheme.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Style<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Scheme</b> :
<font color="#0000FF">not null access</font> Gtk_Source_Style_Scheme_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Style</b>&nbsp; 
: UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Gtk_Source_Style;</tt></p>
</blockquote>
<p>This function returns the style corresponding to <b>Style</b> or
<font color="#0000FF">null</font>.</p>
<p> 
<u><b><a name="Gtk.Source_Style_Scheme_Manager"></a>Source style scheme manager</b></u>. The package
<a href="#Gtk.Source_Style_Scheme_Manager">Gtk.Source_Style_Scheme_Manager</a> provides bindings to
<a href="https://developer.gnome.org/gtksourceview/stable/GtkSourceStyleSchemeManager.html">GtkSourceStyleSchemeManager</a>:</p>
		<blockquote>
<p><tt><font color="#0000FF">type</font> Gtk_Source_Style_Scheme_Manager_Record
<font color="#0000FF">is<br>
&nbsp;&nbsp; new</font> GObject_Record <font color="#0000FF">with private</font>;<br>
<font color="#0000FF">type</font> Gtk_Source_Style_Scheme_Manager
<font color="#0000FF">is<br>
&nbsp;&nbsp; access all</font> Gtk_Source_Style_Scheme_Manager_Record'Class;</tt></p>
</blockquote>
<p>The following operations are defined:</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Default <font color="#0000FF">
return</font> Gtk_Source_Style_Scheme_Manager;</tt></p>
</blockquote>
<p>This function returns the default style scheme manager. It does not create a 
new object, so its result shall not be unref'ed.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Append_Search_Path<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Manager</b> :
<font color="#0000FF">not null access</font> Gtk_Source_Style_Scheme_Manager_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Path</b>&nbsp;&nbsp;&nbsp; 
: UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure appends <b>Path</b> to the list of directories where the 
manager looks for style scheme files.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Force_Rescan<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Manager</b> :
<font color="#0000FF">not null access</font> Gtk_Source_Style_Scheme_Manager_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure marks any currently cached information about the available 
style schemes as invalid. All the available style schemes will be reloaded next 
time the manager is accessed.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Scheme<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Manager</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font> &nbsp;Gtk_Source_Style_Scheme_Manager_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Scheme</b>&nbsp; 
: UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Gtk_Source_Style_Scheme;</tt></p>
</blockquote>
<p>This function returns style scheme by identifier. The returned value is owned 
by manager and must not be unref'ed.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Scheme_IDs<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Manager</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font> &nbsp;Gtk_Source_Style_Scheme_Manager_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Chars_Ptr_Array;</tt></p>
</blockquote>
<p>This function returns an array of string containing the identifiers of the 
available style schemes or Null_Ptr if no style scheme is available. The array 
elements are owned by the manager and must not be freed.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Search_Path<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Manager</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font> &nbsp;Gtk_Source_Style_Scheme_Manager_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Chars_Ptr_Array;</tt></p>
</blockquote>
<p>This function returns an array of C-strings containing the path items. The 
array elements are owned by the manager and must not be freed.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Gtk_New (<b>Manager</b> :
<font color="#0000FF">out</font> Gtk_Source_Style_Scheme_Manager);</tt></p>
</blockquote>
<p>This procedure creates new manager object..</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Manager</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font> &nbsp;Gtk_Source_Style_Scheme_Manager_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is to be called from Initialize of derived objects.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Prepend_Search_Path<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Manager</b> :
<font color="#0000FF">not null access</font> Gtk_Source_Style_Scheme_Manager_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Path</b>&nbsp;&nbsp;&nbsp; 
: UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure prepends <b>Path</b> to the list of directories where the 
manager looks for style scheme files.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Search_Path<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Manager</b> :
<font color="#0000FF">not null access</font> Gtk_Source_Style_Scheme_Manager_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Dirs</b>&nbsp;&nbsp;&nbsp; 
: Chars_Ptr_Array ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets the list of directories where the manager looks for style 
scheme files. When <b>Dirs</b> is absent the search path is reset to default.</p>
<p> 
<u><b><a name="Gtk.Source_View"></a>Source view widget</b></u>. The package
<a href="#Gtk.Source_View">Gtk.Source_View</a> provides bindings to
<a href="https://developer.gnome.org/gtksourceview/stable/GtkSourceView.html">GtkSourceView</a>:</p>
		<blockquote>
<p><tt><font color="#0000FF">type</font> Gtk_Source_View_Record
<font color="#0000FF">is<br>
&nbsp;&nbsp; new</font> Gtk_Text_View_Record <font color="#0000FF">with private</font>;<br>
<font color="#0000FF">type</font> Gtk_Source_View <font color="#0000FF">is 
access all</font> Gtk_Source_View_Record'Class;</tt></p>
</blockquote>
<p>The following types are defined:</p>
		<blockquote>
<p><tt><font color="#0000FF">type</font> Gtk_Source_Smart_Home_End_Type
<font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Home_End_Disabled,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Home_End_Before,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Home_End_After,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Home_End_Always<br>
&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This type controls how HOME and END keys are treated when pressed.</p>
		<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Source_View.Gtk_Source_Draw_Spaces_Flags"></a>type</font> Gtk_Source_Draw_Spaces_Flags
<font color="#0000FF">is mod</font> <font color="#800000">2</font>**<font color="#800000">4</font>;<br>
Draw_Spaces_Space&nbsp;&nbsp;&nbsp; : <font color="#0000FF">constant</font> 
Gtk_Source_Draw_Spaces_Flags := <font color="#800000">2</font>**<font color="#800000">0</font>;<br>
Draw_Spaces_Tab&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">constant</font> 
Gtk_Source_Draw_Spaces_Flags := <font color="#800000">2</font>**<font color="#800000">1</font>;<br>
Draw_Spaces_New_line : <font color="#0000FF">constant</font> 
Gtk_Source_Draw_Spaces_Flags := <font color="#800000">2</font>**<font color="#800000">2</font>;<br>
Draw_Spaces_NBSP&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">constant</font> 
Gtk_Source_Draw_Spaces_Flags := <font color="#800000">2</font>**<font color="#800000">3</font>;<br>
Draw_Spaces_ALL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">constant</font> 
Gtk_Source_Draw_Spaces_Flags :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Source_Draw_Spaces_Flags'Last;</tt></p>
</blockquote>
<p>This type defines whether to draw categories of blank characters.</p>
		<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Source_View.Category_Background_Color"></a>type</font> 
Category_Background_Color (Has_Color : Boolean) <font color="#0000FF">is record<br>
&nbsp;&nbsp; case</font> Has_Color <font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when</font> True&nbsp; =&gt; Color : Gdk_Color;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> False =&gt;
<font color="#0000FF">null</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">end case</font>;<br>
<font color="#0000FF">end record</font>;</tt></p>
</blockquote>
<p>This object is returned when a color is returned. The discriminant Has_Color 
is <font color="#800000"><i>false</i></font> when no color is used.</p>
<p>The following operations are defined in the package:</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Auto_Indent<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font> Gtk_Source_View_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <font color="#800000"><i>true</i></font> if auto 
indentation is enabled.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Draw_Spaces<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ( <b>&nbsp;Widget</b> :
<font color="#0000FF">not null access</font> Gtk_Source_View_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
Gtk_Source_Draw_Spaces_Flags;</tt></p>
</blockquote>
<p>This function returns the 
<a href="#Gtk.Source_View.Gtk_Source_Draw_Spaces_Flags">flags</a> used for drawing spaces.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Highlight_Current_Line<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ( <b>&nbsp;Widget</b> :
<font color="#0000FF">not null access</font> Gtk_Source_View_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
Boolean;</tt></p>
</blockquote>
<p>This function returns&nbsp; <font color="#800000"><i>true</i></font> if the 
current line is highlighted.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Indent_On_Tab<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ( <b>&nbsp;Widget</b> :
<font color="#0000FF">not null access</font> Gtk_Source_View_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
Boolean;</tt></p>
</blockquote>
<p>This function returns <font color="#800000"><i>true</i></font> if the 
selection is indented when tab is pressed.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Indent_Width<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ( <b>&nbsp;Widget</b> :
<font color="#0000FF">not null access</font> Gtk_Source_View_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
GInt;</tt></p>
</blockquote>
<p>This function returns the number of spaces to use for each step of indent.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Insert_Spaces_Instead_Of_Tabs<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ( <b>&nbsp;Widget</b> :
<font color="#0000FF">not null access</font> Gtk_Source_View_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
Boolean;</tt></p>
</blockquote>
<p>This function returns<font color="#800000"><i> true</i></font> if spaces are 
inserted instead of tabs.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Mark_Attributes<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Source_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Category</b> 
: UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Priority</b> 
: GInt<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
Gtk_Source_Mark_Atributes;</tt></p>
</blockquote>
<p>This function returns the attributes for the category and priority. The 
object is owned and should not be <i>unref</i>-ed.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Mark_Category_Background<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp; 
: <font color="#0000FF">nor null access</font> Gtk_Source_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Category</b> 
: UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Category_Background_Color;</tt></p>
</blockquote>
<p>This function returns the background color of <b>Category</b> as
<a href="#Gtk.Source_View.Category_Background_Color">Category_Background_Color</a> 
object.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Mark_Category_Pixbuf<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Source_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Category</b> 
: UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
Gdk_Pixbuf;</tt></p>
</blockquote>
<p>This function returns the pixbuf of a category of marks or Null_Pixbuf if 
none.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Mark_Category_Priority<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Source_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Category</b> 
: UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
GInt;</tt></p>
</blockquote>
<p>This function returns the priority of a category of marks.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Right_Margin_Position<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font> Gtk_Source_View_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
GUInt;</tt></p>
</blockquote>
<p>This function returns the position of the right margin (width in characters).</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Show_Line_Marks<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font> Gtk_Source_View_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
Boolean;</tt></p>
</blockquote>
<p>This function returns <font color="#800000"><i>true</i></font> if line marks 
are shown.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Show_Line_Numbers<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font> Gtk_Source_View_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
Boolean;</tt></p>
</blockquote>
<p>This function returns <font color="#800000"><i>true</i></font> if line 
numbers are shown.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Show_Right_Margin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font> Gtk_Source_View_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
Boolean;</tt></p>
</blockquote>
<p>This function returns <font color="#800000"><i>true</i></font> if the right 
margin is shown.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Smart_Home_End<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;:
<font color="#0000FF">not null access</font> Gtk_Source_View_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
Gtk_Source_Smart_Home_End_Type;</tt></p>
</blockquote>
<p>This function returns the flags controlling treatment of HOME and END key 
presses.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Tab_Width<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> 
:
<font color="#0000FF">not null access</font> Gtk_Source_View_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
GUInt;</tt></p>
</blockquote>
<p>This function returns the tab width in characters.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">out</font> Gtk_Source_View;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Buffer</b> : Gtk_Source_Buffer := <font color="#0000FF">null</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure creates a new widget. When <b>Buffer</b> is
<font color="#0000FF">null</font> a new buffer is created. Otherwise the widget 
uses the buffer specified. Note that the same buffer can be shared by several 
widgets.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font> Gtk_Source_View_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Buffer</b> : Gtk_Source_Buffer<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called by each derived object from its Initialize.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Auto_Indent<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font> Gtk_Source_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Enable</b> : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>If <b>Enable</b> is <i><font color="#800000">true</font></i> auto indentation 
of text is enabled.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Draw_Spaces<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font> Gtk_Source_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Flags</b>&nbsp; : Gtk_Source_Draw_Spaces_Flags<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets if and how bank characters should be visualized. Specifying 
<a href="#Gtk.Source_View.Gtk_Source_Draw_Spaces_Flags">flags</a> as 0 will disable display of 
blank characters.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Highlight_Current_Line<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font> Gtk_Source_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Show</b>&nbsp;&nbsp; 
: Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets whether to highlight the current line.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Indent_On_Tab<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font> Gtk_Source_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Enable</b> : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure controls indentation mode. If enabled, when the tab key is 
pressed and there is a selection, the selected text is indented of one level 
instead of being replaced with the tab characters. Shift + Tab unindents the 
selection.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Indent_Width<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font> Gtk_Source_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Width</b>&nbsp; : GInt := <font color="#800000">-1</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets the number of spaces to use for each step of indent. If 
Width is -1, the value of the &quot;tab-width&quot; property will be used.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Insert_Spaces_Instead_Of_Tabs<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font> Gtk_Source_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Enable</b> : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure controls whether to insert spaces instead of tabs.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Mark_Attributes<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Source_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Category</b>&nbsp;&nbsp; : UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Attributes</b> : <font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Source_Mark_Atributes;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Priority</b>&nbsp;&nbsp; : GInt<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets attributes for the category and priority.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Mark_Category_Background<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp; 
: 
<font color="#0000FF">not null access</font> Gtk_Source_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Category</b> : UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Color</b>&nbsp;&nbsp;&nbsp; 
: Gdk_Color ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets the background color of the marks of <b>Category</b>. 
When <b>Color</b> is omitted, it the background color is unset for the given 
category of marks.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Mark_Category_Pixbuf<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp; 
: 
<font color="#0000FF">not null access</font> Gtk_Source_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Category</b> : UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Pixbuf</b>&nbsp;&nbsp; : Gdk_Pixbuf := Null_Pixbuf<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure associates a given pixbuf with a given mark category. If 
pixbuf is Null_Pixbuf, the pixbuf is unset.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Mark_Category_Priority<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp; 
: 
<font color="#0000FF">not null access</font> Gtk_Source_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Category</b> : UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Priority</b> : GInt<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets the priority of a category of marks. When there are 
multiple marks on the same line, marks of categories with higher priorities will 
be drawn on top.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Right_Margin_Position<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp; 
: 
<font color="#0000FF">not null access</font> Gtk_Source_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Position</b> : GUInt<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets the position of the right margin (width in characters).</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Show_Line_Marks<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font> Gtk_Source_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Show</b>&nbsp;&nbsp; 
: Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets whether line marks should be displayed.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Show_Line_Numbers<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font> Gtk_Source_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Show</b>&nbsp;&nbsp; 
: Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets whether line numbers should be displayed.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Show_Right_Margin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font> Gtk_Source_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Show</b>&nbsp;&nbsp; 
: Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets whether the right margin should be displayed.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Smart_Home_End<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: 
<font color="#0000FF">not null access</font> Gtk_Source_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Smart_Home_End</b> : Gtk_Source_Smart_Home_End_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets&nbsp; the desired movement of the cursor when HOME and 
END keys are pressed.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Tab_Width<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font> Gtk_Source_View_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Width</b>&nbsp; : GUInt<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets the width of tabulation in characters.</p>
<h3><a name="5.6"></a>5.6. Platform-specific content typing (GContentType)</h3>
<p> 
<a name="GIO.Content_Type"></a>The package <a href="#GIO.Content_Type">
GIO.Content_Type</a> provides bindings to the platform-specific content typing. 
Content typing is a way to classify files according to their content. The 
operating system usually supports some means to determine the file content, like 
file name extension etc..<a href="https://developer.gnome.org/gio/stable/gio-GContentType.html">GContentType</a> 
is a way to interface it.</p>
<p> 
The package provides the following subprograms:</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Can_Be_Executable (<b>Instance</b> 
: UTF8_String) <font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function checks if a content type <b>Instance</b> can be executable. 
Note that for instance things like text files can be executables (i.e. scripts 
and batch files).</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Equals (<b>Type_1</b>, <b>Type_2</b> 
: UTF8_String) <font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if two content 
types are same or equivalent.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> From_MIME_Type (<b>MIME</b> : 
UTF8_String) <font color="#0000FF">return</font> UTF8_String;</tt></p>
</blockquote>
<p>This function tries to find a content type based on the
<a href="http://www.iana.org/assignments/media-types">MIME type</a> specified by 
the parameter <b>MIME</b>. The result is empty string if it fails.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Description (<b>Instance</b> : 
UTF8_String) <font color="#0000FF">return</font> UTF8_String;</tt></p>
</blockquote>
<p>This function gets the human readable description of a content type <b>
Instance</b>. The description may look like <i>Ada spec file</i>.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Icon (<b>Instance</b> : 
UTF8_String) <font color="#0000FF">return</font> GObject;</tt></p>
</blockquote>
<p>This function returns the icon for the content type. Icons have type
<a href="#Gtk.Missed.GType_Icon">GType_Icon</a>. Icons can be rendered by
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.cell_renderer_pixbuf.html">Gtk_Cell_Renderer_Pixbuf</a>. Call
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/glib.object.html#L78C14">Unref</a> when icon is no more used.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_MIME_Type (<b>Instance</b> :
UTF8_String) <font color="#0000FF">return</font> UTF8_String;</tt></p>
</blockquote>
<p>This function gets the <a href="http://www.iana.org/assignments/media-types">
MIME type</a> by content type. The result empty string if the function fails.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Guess (<b>File_Name</b> : 
UTF8_String) <font color="#0000FF">return</font> UTF8_String;</tt></p>
</blockquote>
<p>This function gets the content type of the file specified by its path <b>
File_Name</b>. The result is an empty string if the function fails.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Is_A (<b>Instance</b>, <b>Supertype</b> 
: UTF8_String) <font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if the 
contents specified by <b>Instance</b> are subsets of the contents specified by
<b>Supertype</b>.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Is_Unknown (<b>Instance</b> : 
UTF8_String) <font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if <b>Instance</b> 
is an unknown content type.</p>
<h3><a name="5.7"></a>5.7. Mounts (GMount)</h3>
<p> 
<a name="GIO.Mount"></a>The package <a href="#GIO.Mount">GIO.Mount</a> provides bindings to 
<a href="https://developer.gnome.org/gio/stable/GMount.html">GMount</a>, 
user-visible mounts. Mount is a file system made accessible. Mounts can be 
mounted and unmounted:</p>
		<blockquote>
<p><tt><font color="#0000FF">type</font> GMount_Record <font color="#0000FF">is 
new</font> GObject_Record <font color="#0000FF">with null record</font>;<br>
<font color="#0000FF">type</font> GMount <font color="#0000FF">is access all</font> 
GMount_Record'Class;</tt></p>
</blockquote>
<p> 
The package provides the following subprograms:</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Can_Eject<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Mount</b> :
<font color="#0000FF">not null access</font> GMount_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if <b>Mount</b> 
can be ejected.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Can_Unmount<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Mount</b> :
<font color="#0000FF">not null access</font> GMount_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font> 
Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if <b>Mount</b> 
can be unmounted.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Icon<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Mount</b> :
<font color="#0000FF">not null access</font> GMount_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
GObject;</tt></p>
</blockquote>
<p>This function returns the icon corresponding to <b>Mount</b> or
<font color="#0000FF">null</font>. Icons have type
<a href="#Gtk.Missed.GType_Icon">GType_Icon</a>. Icons can be rendered by
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.cell_renderer_pixbuf.html">Gtk_Cell_Renderer_Pixbuf</a>. Call
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/glib.object.html#L78C14">Unref</a> when icon is no more used.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Name<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Mount</b> :
<font color="#0000FF">not null access</font> GMount_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
UTF8_String;</tt></p>
</blockquote>
<p>This function returns the name of <b>Mount</b>.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Root<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Mount</b> :
<font color="#0000FF">not null access</font> GMount_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
UTF8_String;</tt></p>
</blockquote>
<p>This function returns the root path of <b>Mount</b>. The path is not 
necessary the system root. If <b>Mount</b> is a network share, then the result 
is the mount point.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_UUID<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Mount</b> :
<font color="#0000FF">not null access</font> GMount_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
UTF8_String;</tt></p>
</blockquote>
<p>This function sets the UUID for the mount. The reference is typically based 
on the file system UUID for the mount in question and should be considered an 
opaque string.</p>
		<blockquote>
<p><tt><font color="#0000FF">package</font> Mount_List <font color="#0000FF">is 
new</font> Glib.Glist.Generic_List (GMount);</tt></p>
</blockquote>
<p>This instance provides lists of mounts. Each element of the list must be 
freed using
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/glib.object.html#L78C14">Unref</a> (applied to
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/glib.glist.generic_list.html#L120C16">Get_Data</a>). Then the list as a whole must be freed using
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/glib.glist.generic_list.html#L107C17">Free</a>.</p>
<h3><a name="5.8"></a>5.8. Volumes (GVolume)</h3>
<p> 
<a name="GIO.Volume"></a>The package <a href="#GIO.Volume">GIO.Volume</a> provides bindings to 
<a href="https://developer.gnome.org/gio/stable/GVolume.html">GVolume</a>, 
objects that can be mounted.</p>
		<blockquote>
<p><tt><font color="#0000FF">type</font> GVolume_Record<font color="#0000FF"> is 
new</font> GObject_Record <font color="#0000FF">with null record</font>;<br>
<font color="#0000FF">type</font> GVolume <font color="#0000FF">is access all</font> 
GVolume_Record'Class;</tt></p>
</blockquote>
<p> 
The package provides the following subprograms:</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Icon<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Volume</b> :
<font color="#0000FF">not null access</font> GVolume_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
GObject;</tt></p>
</blockquote>
<p>This function returns the icon corresponding to <b>Volume</b> or
<font color="#0000FF">null</font>. Icons have type
<a href="#Gtk.Missed.GType_Icon">GType_Icon</a>. Icons can be rendered by
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.cell_renderer_pixbuf.html">Gtk_Cell_Renderer_Pixbuf</a>. Call
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/glib.object.html#L78C14">Unref</a> when icon is no more used.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Name<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Volume</b> :
<font color="#0000FF">not null access</font> GMount_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
UTF8_String;;</tt></p>
</blockquote>
<p>This function returns the name of <b>Volume</b>.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Volume<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Mount</b> :
<font color="#0000FF">not null access</font> GMount_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )<font color="#0000FF">&nbsp; return</font> GVolume;</tt></p>
</blockquote>
<p>This function returns the volume mounted on <b>Mount</b>. When the result is 
not <font color="#0000FF">null</font> it must be freed using
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/glib.object.html#L78C14">Unref</a> when icon is no more used.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Should_Automount<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Volume</b> :
<font color="#0000FF">not null access</font> GVolume_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )<font color="#0000FF">&nbsp; return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns true if <b>Volume</b> should be mounted automatically.</p>
		<blockquote>
<p><tt><font color="#0000FF">package</font> Volume_List<font color="#0000FF"> is 
new</font> Glib.Glist.Generic_List (GVolume);</tt></p>
</blockquote>
<p>This instance provides lists of volumes. Each element of the list must be 
freed using
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/glib.object.html#L78C14">Unref</a> (applied to
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/glib.glist.generic_list.html#L120C16">Get_Data</a>). Then the list as a whole must be freed using
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/glib.glist.generic_list.html#L107C17">Free</a>.</p>
<h3><a name="5.9"></a>5.9. Drives (GDrive)</h3>
<p> 
<a name="GIO.Drive"></a>The package <a href="#GIO.Drive">GIO.Drive</a> provides bindings to 
<a href="https://developer.gnome.org/gio/stable/GDrive.html">GDrive</a>, 
objects representing a piece of hardware connected to the machine. It's 
generally only created for removable hardware or hardware with removable media.</p>
		<blockquote>
<p><tt><font color="#0000FF">type</font> GDrive_Record<font color="#0000FF"> is 
new</font> GObject_Record <font color="#0000FF">with null record</font>;<br>
<font color="#0000FF">type</font> GDrive <font color="#0000FF">is access all</font> 
GDrive_Record'Class;</tt></p>
</blockquote>
<p> 
The package provides the following subprograms:</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Can_Eject (<b>Drive</b> :
<font color="#0000FF">not null access</font> GDrive_Record) <font color="#0000FF">return</font> 
Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if <b>Drive</b> 
can be ejected.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Drive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Volume</b> :
<font color="#0000FF">not null access</font> GVolume_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font> GDrive;<br>
<font color="#0000FF">function</font> Get_Drive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Mount</b> :
<font color="#0000FF">not null access</font> GMount_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font> GDrive;</tt></p>
</blockquote>
<p>These functions return the drive of a <b>Volume</b> or <b>Mount</b>. The 
result can be <font color="#0000FF">null</font>. When not
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/glib.object.html#L78C14">Unref</a> must be called when the object is no more used.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Icon<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Drive</b> :
<font color="#0000FF">not null access</font> GDrive_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
GObject;</tt></p>
</blockquote>
<p>This function returns the icon corresponding to <b>Drive</b> or
<font color="#0000FF">null</font>. Icons have type
<a href="#Gtk.Missed.GType_Icon">GType_Icon</a>. Icons can be rendered by
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.cell_renderer_pixbuf.html">Gtk_Cell_Renderer_Pixbuf</a>. Call
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/glib.object.html#L78C14">Unref</a> when icon is no more used.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Name<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Drive</b> :
<font color="#0000FF">not null access</font> GDrive_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> 
UTF8_String;;</tt></p>
</blockquote>
<p>This function returns the name of <b>Drive</b>.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Volumes<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Drive</b> :
<font color="#0000FF">not null access</font> GDrive_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )<font color="#0000FF">&nbsp; return</font> Volume_List.GList;</tt></p>
</blockquote>
<p>This function returns the list of volumes on <b>Drive</b>. Each element of 
the list must be freed using
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/glib.object.html#L78C14">Unref</a> (applied to
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/glib.glist.generic_list.html#L120C16">Get_Data</a>). Then the list as a whole must be freed using
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/glib.glist.generic_list.html#L107C17">Free</a>.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Has_Media<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Drive</b> :
<font color="#0000FF">not null access</font> GDrive_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )<font color="#0000FF">&nbsp; return</font> 
Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if <b>Drive</b> 
has media. Note that the OS may not be polling the drive for media changes; see
<a href="#GIO.Drive.Is_Media_Check_Automatic">Is_Media_Check_Automatic</a> for 
more details. </p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Has_Volumes<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Drive</b> :
<font color="#0000FF">not null access</font> GDrive_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )<font color="#0000FF">&nbsp; return</font> 
Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if <b>Drive</b> 
contains volumes.</p>
		<blockquote>
<p><tt><font color="#0000FF"><a name="GIO.Drive.Is_Media_Check_Automatic"></a>function</font> 
Is_Media_Check_Automatic<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Drive</b> :
<font color="#0000FF">not null access</font> GDrive_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )<font color="#0000FF"> return</font> 
Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if <b>Drive</b> 
is capable of automatically detecting media changes.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Is_Media_Removable<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Drive</b> :
<font color="#0000FF">not null access</font> GDrive_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )<font color="#0000FF">&nbsp; return</font> 
Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if <b>Drive</b> 
supports removable media.</p>
		<blockquote>
<p><tt><font color="#0000FF">package</font> Drive_List<font color="#0000FF"> is 
new</font> Glib.Glist.Generic_List (GDrive);</tt></p>
</blockquote>
<p>This instance provides lists of volumes. Each element of the list must be 
freed using
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/glib.object.html#L78C14">Unref</a> (applied to
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/glib.glist.generic_list.html#L120C16">Get_Data</a>). Then the list as a whole must be freed using
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/glib.glist.generic_list.html#L107C17">Free</a>.</p>
<h3><a name="5.10"></a>5.10. Volume monitor (GVolumeMonitor)</h3>
<p> 
<a name="GIO.Volume_Monitor"></a>The package <a href="#GIO.Volume_Monitor">
GIO.Volume_Monitor</a> provides bindings to 
<a href="https://developer.gnome.org/gio/stable/GVolumeMonitor.html">
GVolumeMonitor</a>, objects listing devices and volumes on the computer.</p>
		<blockquote>
<p><tt><font color="#0000FF">type</font> GVolume_Monitor_Record
<font color="#0000FF">is new</font> GObject_Record <font color="#0000FF">with 
null record</font>;<br>
<font color="#0000FF">type</font> GVolume_Monitor <font color="#0000FF">is 
access all</font> GVolume_Monitor_Record'Class;</tt></p>
</blockquote>
<p> 
The package provides the following subprograms:</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get <font color="#0000FF">return</font> 
GVolume_Monitor;</tt></p>
</blockquote>
<p>This function returns the default volume monitor.
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/glib.object.html#L78C14">Unref</a> must be called when the object is no more used.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Connected_Drives<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Monitor</b> 
: <font color="#0000FF">not null access</font> GVolume_Monitor_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font> Drive_List.GList;</tt></p>
</blockquote>
<p>This function returns connected drives. Each element of the list must be 
freed using
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/glib.object.html#L78C14">Unref</a> (applied to
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/glib.glist.generic_list.html#L120C16">Get_Data</a>). Then the list as a whole must be freed using
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/glib.glist.generic_list.html#L107C17">Free</a>.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Mounts<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Monitor</b> :
<font color="#0000FF">not null access</font> GVolume_Monitor_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font> Mount_List.GList;</tt></p>
</blockquote>
<p>This function returns list of mounts. Each element of the list must be freed 
using
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/glib.object.html#L78C14">Unref</a> (applied to
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/glib.glist.generic_list.html#L120C16">Get_Data</a>). Then the list as a whole must be freed using
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/glib.glist.generic_list.html#L107C17">Free</a>.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Mount_For_UUID<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Monitor</b> :
<font color="#0000FF">not null access</font> GVolume_Monitor_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>UUID</b>&nbsp;&nbsp;&nbsp; 
: UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> GMount;</tt></p>
</blockquote>
<p>This function returns a mount by its <b>UUID</b>. When not
<font color="#0000FF">null</font> it must be freed using
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/glib.object.html#L78C14">Unref</a>.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Volumes<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Monitor</b> :
<font color="#0000FF">not null access</font> GVolume_Monitor_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">return</font> Volume_List.GList;</tt></p>
</blockquote>
<p>This function returns the list of volumes. Each element of 
the list must be freed using
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/glib.object.html#L78C14">Unref</a> (applied to
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/glib.glist.generic_list.html#L120C16">Get_Data</a>). Then the list as a whole must be freed using
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/glib.glist.generic_list.html#L107C17">Free</a>.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Volume_For_UUID<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Monitor</b> :
<font color="#0000FF">not null access</font> GVolume_Monitor_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>UUID</b>&nbsp;&nbsp;&nbsp; 
: UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> GVolume;</tt></p>
</blockquote>
<p>This function returns a volume by its <b>UUID</b>. When not
<font color="#0000FF">null</font> it must be freed using
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/glib.object.html#L78C14">Unref</a>.</p>
<h3><a name="5.11"></a>5.11. Generic signal handlers</h3>
<p> 
<a name="Gtk.Handlers.Generic_Callback"></a>The package 
<a href="#Gtk.Handlers.Generic_Callback">Gtk.Handlers.Generic_Callback</a> 
provides signal handlers, which differently to the handlers provided by the 
parent package, deal with the signal parameters and the return value as
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/glib.values.html#L44C9">GValue</a>s:</p>
		<blockquote>
<p><tt><font color="#0000FF">generic</font><br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Object_Type <font color="#0000FF">
is new</font> GObject_Record <font color="#0000FF">with private</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">type</font> User_Type <font color="#0000FF">
is private</font>;<br>
<font color="#0000FF">package</font> Gtk.Handlers.Generic_Callback <font color="#0000FF">is</font> 
...</tt></p>
</blockquote>
<p>The formal parameters are:</p>
<ul>
	<li><i>Object_Type</i> is the type of the object of widget to connect;</li>
	<li><i>User_Type</i> is the type of the additional parameter to pass to the 
	handler.</li>
</ul>
<p>The package declares the callback procedure type as:</p>
		<blockquote>
<p><tt><font color="#0000FF">type</font> Handler <font color="#0000FF">is access 
procedure</font><br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Object</b>&nbsp;&nbsp;&nbsp; :
<font color="#0000FF">not null access</font> Object_Type'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Arguments</b> : GValue_Array;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Result</b>&nbsp;&nbsp;&nbsp; :
<font color="#0000FF">in out </font>GValue;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: User_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>The parameter <b>Object</b> is the object for which the signal was emitted.
<b>Arguments</b> is an array of the signal parameters. <b>Result</b> is the 
result value. <b>Result</b> is initialized with the expected type. This type is 
GType_None when no result is expected. The implementation should set the 
returned value into <b>Result</b>, if any. <b>Data</b> is the user value 
specified in <a href="#Gtk.Handlers.Generic_Callback.Connect">Connect</a>:</p>
		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Handlers.Generic_Callback.Connect">
</a>procedure</font> Connect<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Object</b>&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Object_Type'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: GLib.Signal_Name;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Callback</b> : Handler;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: User_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
After</b>&nbsp;&nbsp;&nbsp; : Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<font color="#0000FF">function</font> Connect<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Object</b>&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Object_Type'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: GLib.Signal_Name;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Callback</b> 
: Handler;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: User_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>After</b>&nbsp;&nbsp;&nbsp; 
: Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Handler_ID;</tt></p>
</blockquote>
<p>These subprograms are used to connect <b>Callback</b> to the signal <b>Name</b> 
of <b>Object</b>. The value <b>Data</b> is passed to <b>Callback</b>. 
Constraint_Error is propagated when <b>Name</b> does not specify a signal of <b>
Object</b>.</p>
<h3><a name="5.12"></a>5.12. Stock items backward compatibility</h3>
<p> 
Starting with GTK+ 3.10 stock items are considered deprecated. The functionality 
is threatened to be removed and warning messages generated run time. There is no 
substitute for the functionality offered, in particular for the &quot;stock-id&quot; 
property of the pixbuf cell renderer and Add_Button of dialog. The package 
Gtk.Missed provides replacements for deprecated operations:</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Add_Button_From_Stock<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Dialog</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Dialog_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Response</b>&nbsp; : Gtk_Response_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Label</b>&nbsp;&nbsp;&nbsp;&nbsp; : UTF8_String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := 
&quot;&quot;;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Icon</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: UTF8_String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := &quot;&quot;;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Icon_Left</b> : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := 
True;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Size</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Gtk_Icon_Size&nbsp;&nbsp;&nbsp; := Icon_Size_Button;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Spacing</b>&nbsp;&nbsp; : GUInt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= <font color="#800000">3</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Tip</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: UTF8_String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := &quot;&quot;;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Relief</b>&nbsp;&nbsp;&nbsp; : Gtk_Relief_Style := Relief_Normal<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<font color="#0000FF">function</font> Add_Button_From_Stock<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Dialog</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Dialog_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Response</b>&nbsp; 
: Gtk_Response_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Label</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: UTF8_String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := &quot;&quot;;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Icon</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: UTF8_String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := &quot;&quot;;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Icon_Left</b> 
: Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := True;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Size</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Gtk_Icon_Size&nbsp;&nbsp;&nbsp; := Icon_Size_Button;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Spacing</b>&nbsp;&nbsp; 
: GUInt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := 3;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Tip</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: UTF8_String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := &quot;&quot;;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Relief</b>&nbsp;&nbsp;&nbsp; 
: Gtk_Relief_Style := Relief_Normal<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Gtk_Button;</tt></p>
</blockquote>
<p>These subprograms replace Add_Button. The add a new button to <b>Dialog</b>.
<b>Response</b> is the response returned by the dialog's Run when the button is 
pressed. <b>Label</b> is the text used for the button. If can use mnemonics e.g. 
&quot;_OK&quot;. <b>Icon</b> is the image name, e.g. &quot;gtk-ok&quot;. <b>Icon_Left</b> is true 
when the image to be on the left, when present. <b>Size</b> is the image size.
<b>Spacing</b> is the spacing between the label and image. <b>Tip</b> is the 
tooltip text. Relief is the button shape.</p>
		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Missed.Add_Named"></a>procedure</font> 
Add_Named<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Name</b> : 
UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Icon</b> 
: Gdk_Pixbuf<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is a replacement to Add_Static. It is used in combination with
<a href="#Gtk.Missed.Add_Stock_Attrubute">Add_Stock_Attribute</a>, which first 
searches for the icons registered by this procedure and only then for themed 
icons. <b>Name</b> is the icon name, case sensitive. <b>Icon</b> the icon. You 
can add several icons of different sizes under the same name.</p>
		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Missed.Add_Stock_Attrubute"></a>
procedure</font> Add_Stock_Attribute<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Cell_Layout</b> 
: <font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Tree_View_Column_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Cell</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Cell_Renderer_Pixbuf_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Column</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GInt<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is an equivalent to Add_Attribute (<b>Cell_Layout</b>, <b>Cell</b>, 
&quot;<i>stock-id</i>&quot;, <b>Column</b>), which is deprecated now. It uses &quot;<i>icon-name</i>&quot; 
instead and adds a cell data function which first searches for the icons added 
using <a href="#Gtk.Missed.Add_Named">Add_Named</a> and only then for the themed 
ones.</p>
<hr>
<p align="right">
  <a name="6"></a><a href="#5"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><a href="#14"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></a><a href="#7"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H2>6. Handles as GTK+ values</H2>
<p><a name="handles_as_values"></a>The reference counted
<a href="http://www.dmitry-kazakov.de/ada/components.htm#Objects_etc">objects</a> 
of <a href="http://www.dmitry-kazakov.de/ada/components.htm">simple components</a> 
can be stored into 
<a href="http://www.gtk.org">GTK+</a> 
<a href="https://developer.gnome.org/gobject/stable/gobject-Generic-values.html#GValue">values</a> (GValue object) and passed around to all 
<a href="http://www.gtk.org">GTK+</a> 
subprograms. For example, they can be put into a tree view model. This way 
custom Ada objects can be designed for use with 
<a href="http://www.gtk.org">GTK+</a>. The generic package Glib.Values.Handle 
can be instantiated for this purpose:</p>
		<blockquote>
<p><tt><font color="#0000FF">generic</font><br>
&nbsp;&nbsp; Type_Name : <font color="#0000FF">in</font> String;<br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Object_Type (&lt;&gt;)
<font color="#0000FF">is abstract new</font> Object.Entity <font color="#0000FF">
with private</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Object_Type_Ptr&nbsp;
<font color="#0000FF">is access</font> Object_Type'Class;<br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Handle_Type (&lt;&gt;)
<font color="#0000FF">is private</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">with function </font>Ptr (Refernece : 
Handle_Type)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> 
Object_Type_Ptr is &lt;&gt;;<br>
&nbsp;&nbsp; <font color="#0000FF">with function </font>Ref (Object : 
Object_Type_Ptr)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> Handle_Type
<font color="#0000FF">is</font> &lt;&gt;;<br>
<font color="#0000FF">package</font> GLib.Values.Handle <font color="#0000FF">is</font> 
...</tt></p>
</blockquote>
<p>The formal parameters are:</p>
<ul>
	<li><i>Type_Name</i> is the name of the 
<a href="http://www.gtk.org">GTK+</a> 
	type, the package instance will create;</li>
	<li><i>Object_Type</i> is the type of Ada objects. It must be a descendant of
	<a href="http://www.dmitry-kazakov.de/ada/components.htm#Entity">
	Object.Entity</a>;</li>
	<li><i>Object_Ptr</i> is the access type used in handles to Object_Type. It is the 
	same type as the actual parameter of the corresponding instance of the
	<a href="http://www.dmitry-kazakov.de/ada/components.htm#Object.Handle">
	Object.Handle</a> package;</li>
	<li><i>Handle_Type</i> is the type of the corresponding handle, obtained from the 
	instance of
	<a href="http://www.dmitry-kazakov.de/ada/components.htm#Object.Handle">
	Object.Handle</a>;</li>
	<li><i>Ptr</i> is a function to dereference Handle_Type. Normally it is Ptr from 
	the instance of
	<a href="http://www.dmitry-kazakov.de/ada/components.htm#Object.Handle">
	Object.Handle</a>;</li>
	<li><i>Ref</i> is a function to reference Object_Type. Usually it is Ref Ptr from 
	the instance of
	<a href="http://www.dmitry-kazakov.de/ada/components.htm#Object.Handle">
	Object.Handle</a>.</li>
</ul>
<p>The package creates 
<a href="http://www.gtk.org">GTK+</a> 
type to reference Object_Type'Class. When a GValue object of this type is set to 
an instance of Object_Type'Class, it acts as a counted reference to it. This 
prevents the target object from destruction until GValue is not reset to another 
object or destroyed by Unset. When a GValue is copied the reference count of the 
target object is increased.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Type <font color="#0000FF">
return</font> GType;</tt></p>
</blockquote>
<p>This function returns the 
<a href="http://www.gtk.org">GTK+</a> 
type of values.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Handle (<b>Value</b> : GValue)
<font color="#0000FF">return</font> Handle_Type;</tt></p>
</blockquote>
<p>This function returns a handle to the object stored in <b>Value</b>. 
Constraint_Error is propagated when <b>Value</b> is of wrong type.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Ptr (<b>Value</b> : GValue)
<font color="#0000FF">return</font> Object_Type_Ptr;</tt></p>
</blockquote>
<p>This function returns a pointer to the object stored in <b>Value</b>. The 
result is <font color="#0000FF">null</font> when <b>Value</b> is of wrong type. 
The pointer can be safely used as long as <b>Value</b> is not reset. This 
function is intended for a lower level use, and should be avoided in favor of 
Get_Handle. </p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Handle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Value</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> GValue;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Reference</b> : Handle_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets <b>Value</b> to the object referenced by <b>Reference</b>. 
Prior the call <b>Value</b> must be initialized using Init (Value, Get_Type). 
Constraint_Error is propagated when <b>Value</b> is not properly initialized.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Ptr<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Value</b> :
<font color="#0000FF">in out</font> GValue;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Ptr&nbsp;
</b>&nbsp;: Object_Type_Ptr<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets <b>Value</b> to the object&nbsp; referenced by <b>Ptr</b>. 
Prior the call <b>Value</b> must be initialized using Init (Value, Get_Type). 
Constraint_Error is propagated when <b>Value</b> is not properly initialized.</p>
<hr>
<p align="right">
<a name="7"></a><a href="#6"><IMG src="prev.gif" alt="[Back]" width="29" height="29"></a><a href="#14"><IMG src="index.gif" alt="[TOC]" width="29" height="29"></a><a href="#8"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H2>7.
Unit selection widget and dialogs</H2>
<P>
The <a href="http://www.dmitry-kazakov.de/ada/units.htm">units of measurements 
for Ada</a> contains a <a href="http://www.gtk.org">GTK+</a> widget and dialog 
boxes for a comfortable input of measurement units:<P>
<img border="0" src="gtk_unit_selection.gif" width="345" height="373" alt="unit selection"><p>The
widget is provided by the generic package 
<a href="http://www.dmitry-kazakov.de/ada/units.htm#Measures_Gtk_Edit">
Measures_Gtk_Edit</a>. The dialogs are 
provided by the child package 
<a href="http://www.dmitry-kazakov.de/ada/units.htm#Measures_Gtk_Edit.Dialogs">Measures_Gtk_Edit.Dialogs</a>.</p>
<hr>
<p align="right">
  <a name="8"></a><a href="#7"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><a href="#14"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></a><a href="#9"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H2>8. Improved HLS color model</H2>
<p>The package Gdk_Color.IHLS implements an improved hue-luminance-saturation
color model as described in
<a href="http://cmm.ensmp.fr/~serra/notes_internes_pdf/NI-230.pdf">A 3D-polar Coordinate Colour Representation Suitable for Image Analysis</a>
by Allan Hanbury and Jean Serra. This color model is closer to human eye
perception than HLS and HSV color spaces, yet not so numerically demanding as
<a href="http://www.cie.co.at">CIE</a> <i>L</i>*<i>a</i>*<i>b</i> is.</p>
<p>In the IHLS space each color is represented by:</p>
<ul>
	<li><i>Hue</i>, the dominant wave length of the color;</li>
	<li><i>Luminance</i>, the luminous intensity of the color perceived as color 
	lightness;</li>
	<li><i>Saturation</i>, the purity of the color.</li>
</ul>
<p>The package defines the following data types:</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Gdk_Hue <font color="#0000FF">is new</font> GUInt16;</tt></p></blockquote>
<p>The value 0 corresponds to the primary <i>Red</i>, the value Gdk_Hue'Modulus/3 does to the 
primary <i>Green</i>, 
the value 2*Gdk_Hue'Modulus/3 does to the primary <i>Blue</i>. Gdk_Hue is a modular type which 
values are wrapped around.</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Gdk_Luminance<font color="#0000FF"> is new</font> GUInt16;</tt></p></blockquote>
<p>Higher values of Gdk_Luminance correspond to lighter colors. The type of 
luminance is chosen conform to the types of the RGB stimuli of Gdk_Color. The 
luminance is directly evaluated from the stimuli as 0.2126<i><font face="Times New Roman">&middot;</font>R</i>
+ 0.7152&middot; <i>G</i> + 0.0722&middot; <i>B</i> (as it is recommended by
<a href="http://www.cie.co.at">International Commission on Illumination</a>).</p>
<blockquote>
<p><tt><font color="#0000FF">subtype</font> Gdk_Red_Luminance<font color="#0000FF">&nbsp;&nbsp; is </font>Gdk_Luminance 
...;<font color="#0000FF"><br>
subtype</font> Gdk_Green_Luminance<font color="#0000FF"> is </font>Gdk_Luminance 
...;<font color="#0000FF"><br>
subtype</font> Gdk_Blue_Luminance<font color="#0000FF">&nbsp; is </font>Gdk_Luminance 
...;</tt></p></blockquote>
<p>These subtypes define the ranges of the luminance, which the primary colors
<i>Red</i>, <i>Green</i> and <i>Blue</i> may take values from. Higher luminance 
values would lead to color distortion due to truncation of the corresponding 
stimulus value. Impure and mixed colors may have higher luminance than the 
primary ones. No value of any hue has the full luminance. The maximal 
range of luminance available for any combination of hue and saturation is Gdk_Blue_Luminance'Range, which is only 7% of the whole range. Only <i>White</i> 
has 100% luminance.</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Gdk_Saturation<font color="#0000FF"> is new</font> GUInt16;</tt></p></blockquote>
<p>The value 0 corresponds to gray colors, the value Gdk_Staturation'Last 
corresponds to pure (monochrome) colors. Saturation type is conform to the types 
of RGB components of Gdk_Color. The saturation is defined through the stimuli as
<i>max</i> (<i>R</i>, <i>G</i>, <i>B</i>) - <i>min</i> (<i>R</i>, <i>G</i>, <i>B</i>).</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Gdk_Stimulus<font color="#0000FF"> is new</font> 
Float;</tt></p></blockquote>
<p>The value 0 corresponds to no stimulus. The value 2<sup>16</sup>-1 
corresponds to the maximal possible stimulus.</p>
<blockquote>
<p><tt><font color="#0000FF">type </font>Gdk_IHLS_Color<font color="#0000FF"> is 
record</font><br>
&nbsp;&nbsp; Hue&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Hue;<br>
&nbsp;&nbsp; Luminance&nbsp; : Gdk_Luminance;<br>
&nbsp;&nbsp; Saturation : Gdk_Saturation;<font color="#0000FF"><br>
end record</font>;</tt></p></blockquote>
<p>The package Gdk_Color.IHLS provides the following subprograms for dealing 
with the colors:</p>
<blockquote>
<p><tt><font color="#0000FF">function </font>Average (<b>List</b> : 
Gdk_Color_Array) <font color="#0000FF">
return </font>Gdk_Color;</tt></p></blockquote>
<p>Thus function averages the colors of <b>List</b> so that the luminance of the 
result will be equal to the averaged luminance. Constraint_Error is propagated 
when <b>List</b> is empty. </p>
<blockquote>
<p><tt><font color="#0000FF">function </font>Darken<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Color</b> : 
Gdk_IHLS_Color;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>By</b>&nbsp;&nbsp;&nbsp; 
: Gdk_Luminance<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Gdk_IHLS_Color;<font color="#0000FF"><br>
function </font>Darken<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Color</b> : 
Gdk_Color;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>By</b>&nbsp;&nbsp;&nbsp; 
: Gdk_Luminance<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return </font>Gdk_Color;</tt></p></blockquote>
<p>These functions darken a color specified by the parameter <b>Color</b> by the 
luminance defined by the value of the parameter <b>By</b>. The parameter <b>
Color</b> can be of either color model. When the value of <b>
By</b> exceeds one of <b>Color</b>, the result will have zero luminance (<i>Black</i>). </p>
<blockquote>
<p><tt><font color="#0000FF">function </font>Lighten<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Color</b> : 
Gdk_IHLS_Color;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>By</b>&nbsp;&nbsp;&nbsp; 
: Gdk_Luminance<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Gdk_IHLS_Color;<font color="#0000FF"><br>
function </font>Lighten<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Color</b>&nbsp;&nbsp;&nbsp; : 
Gdk_Color;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>By</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Luminance;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Impurify</b> 
: Boolean := True<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return </font>Gdk_Color;</tt></p></blockquote>
<p>These functions lighten a color specified by the parameter <b>Color</b> by 
the luminance defined by the value of the parameter <b>By</b>. The result will 
have the maximal available luminance in the IHLS space. The hue is preserved. 
For the variant with <b>Color</b> specified in RGB (Gdk_Color), the result 
luminance might be sufficiently lesser, due to the limitations imposed by the 
RGB color space. In such cases the parameter <b>Impurify</b> controls if the 
luminance can be increased at the cost of purity of the result. See the function
<a href="#function_To_RGB">To_RGB</a> for further information.</p>
<blockquote>
<p><tt><font color="#0000FF">function </font>Impurify<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Color</b> : 
Gdk_IHLS_Color;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>By</b>&nbsp;&nbsp;&nbsp; 
: Gdk_Saturation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Gdk_IHLS_Color;<font color="#0000FF"><br>
function </font>Impurify<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Color</b> : 
Gdk_Color;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>By</b>&nbsp;&nbsp;&nbsp; 
: Gdk_Saturation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return </font>Gdk_Color;</tt></p></blockquote>
<p>These functions impurify a color specified by the parameter <b>Color</b> by 
the saturation defined by the value of the parameter <b>By</b>. When the value 
of <b>By</b> exceeds one of <b>Color</b>, the result will have zero saturation 
(<i>Grey</i>). </p>
<blockquote>
<p><tt><font color="#0000FF">function </font>Purify<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Color</b> : 
Gdk_IHLS_Color;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>By</b>&nbsp;&nbsp;&nbsp; 
: Gdk_Saturation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Gdk_IHLS_Color;<font color="#0000FF"><br>
function </font>Purify<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Color</b> : 
Gdk_Color;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>By</b>&nbsp;&nbsp;&nbsp; 
: Gdk_Saturation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return </font>Gdk_Color;</tt></p></blockquote>
<p>These functions purify a color specified by the parameter <b>Color</b> by the 
saturation defined by the value of the parameter <b>By</b>. The result will 
have maximal available saturation for the hue of <b>Color</b>, which is not 
always a monochrome color for the variant returning Gdk_Color. Purification of 
an RGB color (Gdk_Color) may eventually lead to decreasing its luminance as 
explained <a href="#function_To_RGB">below</a>.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="function_To_RGB"></a>function</font> To_RGB<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Color</b>&nbsp;&nbsp;&nbsp; : 
Gdk_IHLS_Color;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Impurify</b> 
: Boolean := True<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> Gdk_Color;</tt></p></blockquote>
<p>This function converts <b>Color</b> to the RGB color space. Note that some 
colors of the IHLS space do not have counterparts in RGB. In particular pure 
blue colors have maximal luminance of only about 7% of the whole range&nbsp; A 
higher luminance would require a blue stimulus exceeding the maximal possible 
value of. The parameter <b>Impurify</b> determines the behavior in such cases. 
When the parameter <b>Impurify</b> is <i><font color="#800000">false</font></i>, 
the function keeps saturation of the result at the cost of luminance. I.e. the 
result will appear darker than <b>Color</b>. When <b>Impurify</b> is <i>
<font color="#800000">true</font></i>, the function will keep luminance making 
result more impure. I.e. very light colors will appear as white. The procedure
<a href="#procedure_To_RGB">To_RGB</a> can be used instead to get the values of the stimuli regardless their 
ranges for any IHLS color.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="procedure_To_RGB"></a>procedure</font> To_RGB<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Color</b> : 
Gdk_IHLS_Color;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Red</b>&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Gdk_Stimulus;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Green</b> : <font color="#0000FF">out</font> Gdk_Stimulus;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Blue</b>&nbsp; 
: <font color="#0000FF">out</font> Gdk_Stimulus<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure evaluates the RGB stimuli of <b>Color</b>. The results might 
be non-presentable as Gdk_Color, e.g. some stimuli could exceed 2<sup>16</sup>-1.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> To_RGB (<b>Stimulus</b> : 
Gdk_Stimulus) <font color="#0000FF">return</font> UInt16;</tt></p></blockquote>
<p>This function converts <b>Stimulus</b> to a GDK compatible value. It is 
truncated as necessary.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> To_RGB<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Red</b>&nbsp;&nbsp; 
: Gdk_Stimulus;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Green</b> : Gdk_Stimulus;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Blue</b>&nbsp; 
: Gdk_Stimulus<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">return</font> Gdk_Color;</tt></p></blockquote>
<p>This function returns the RGB color corresponding to the stimuli. The result 
has the same hue, but its luminance and to a lesser degree its saturation might 
be diminished in order to obtain a visible color.</p>
<blockquote>
<p><tt><font color="#0000FF">function </font>To_IHLS (<b>Color</b> : Gdk_Color)
<font color="#0000FF">return </font>Gdk_IHLS_Color;</tt></p></blockquote>
<p>This function converts <b>Color</b> to the IHLS color space.</p>
<blockquote>
<p><tt><font color="#0000FF">function </font>Val<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; First</b> : 
Gdk_IHLS_Color;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Pos</b>&nbsp;&nbsp; 
: Natural;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Cycle</b> 
: Color_Cycle := <font color="#800000">3</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return </font>Gdk_IHLS_Color;</tt></p></blockquote>
<p>This function is used to generate a sequence of distinct colors having same 
saturation and luminance. The colors of the sequence are ordered by the position 
starting from 0. The first color of the sequence is <b>First</b>. Each next 
color up to <b>Color_Cycle</b>-1 is obtained by incrementing the hue of <b>First</b> 
by Gdk_Hue'Modulus/<b>Color_Cycle</b>. The 
next <b>Color_Cycle </b>colors are obtained by incrementing the hues of the 
previously generated colors by Gdk_Hue'Modulus/<b>Color_Cycle</b><sup>2</sup>. 
Then they are incremented again by Gdk_Hue'Modulus/<b>Color_Cycle</b><sup>2</sup>, 
and so on up to the color <b>Color_Cycle</b><sup>2</sup>-1. The next <b>
Color_Cycle</b><sup>3</sup> colors are generated using the hue step Gdk_Hue'Modulus/<b>Color_Cycle</b><sup>3</sup>, 
and so on. The colors in the 
sequence do not repeat. They are chosen to maximize the hue distance between 
subsequent colors. 
Such sequences are useful for assigning colors to plotted curves. The subtype 
Color_Cycle is declared as:</p>
<blockquote>
	<p><tt><font color="#0000FF">subtype </font>Color_Cycle
	<font color="#0000FF">is</font> Positive <font color="#0000FF">range</font>
	<font color="#800000">2</font>..Positive'Last</tt></p>
</blockquote>
<hr>
<p align="right">
  <a name="9"></a><a href="#8"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><a href="#14"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></a><a href="#10"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H2>9. Buttons</H2>
<h3><a name="9.1"></a>9.1. Buttons with icons</h3>
<p><a name="Gtk.Image_Button"></a>The package <a href="#Gtk.Image_Button">
Gtk.Image_Button</a> provides a simplified way of creation buttons which icons. 
It provides the image button widget:</p>
<blockquote>
<p><tt><font color="#0000FF">type </font>Gtk_Image_Button_Record<font color="#0000FF"> 
is new </font>Gtk_Button_Record<font color="#0000FF"> with private</font>;<font color="#0000FF"><br>
type </font>Gtk_Image_Button<font color="#0000FF"> is access all </font>
Gtk_Image_Button_Record'Class;</tt></p></blockquote>
<p>The following procedures are provided:</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Box<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Button</b> :
<font color="#0000FF">not null access </font>Gtk_Image_Button_Record
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Gtk_Box;</tt></p></blockquote>
<p>This function returns the button box.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Label<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Button</b> :
<font color="#0000FF">not null access</font> Gtk_Image_Button_Record
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Gtk_Label;</tt></p></blockquote>
<p>This function returns the button label.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Button</b> :
<font color="#0000FF">out</font> Gtk_Image_Button;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Image</b>&nbsp; : <font color="#0000FF">not null access</font> Gtk_Widget_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Label</b>&nbsp; : UTF8_String := &quot;&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This is the button factory. It creates a new button. The parameter <b>Button</b> 
is the result. The parameter <b>Image </b>is the image used as the button icon.
<b>Label</b> is the button text.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Button</b>&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Gtk_Image_Button;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Stock_Id</b> : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Size</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Gtk_Icon_Size;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Label</b>&nbsp;&nbsp;&nbsp; : UTF8_String := &quot;&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This is an alternative button factory. The image is specified by its stock id 
(<b>Stock_Id</b>) and desired size (<b>Size</b>).</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Button</b> :
<font color="#0000FF">not null access</font> Gtk_Image_Button_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Image</b>&nbsp; : <font color="#0000FF">not null access</font> Gtk_Widget_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Label</b>&nbsp; : UTF8_String := &quot;&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure to be called by any descendant of Gtk_Image_Button_Record.</p>
<h3><a name="9.2"></a>9.2. Buttons controlled by style properties</h3>
<p><a name="Gtk.Generic_Style_Button"></a>The generic package
<a href="#Gtk.Generic_Style_Button">Gtk.Generic_Style_Button</a> eases creation 
of buttons customized by the resource file. The button 
appearance is thus fully controlled by its style properties:</p>
<blockquote>
<p><tt><font color="#0000FF">generic</font><br>
&nbsp;&nbsp; Class_Name : UTF8_String;<br>
&nbsp;&nbsp; Label&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : UTF8_String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := 
&quot;&quot;;<br>
&nbsp;&nbsp; Icon&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : UTF8_String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := &quot;&quot;;<br>
&nbsp;&nbsp; Icon_Left&nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := 
True;<font color="#0000FF"><br>
</font>&nbsp;&nbsp; Size&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Gtk_Icon_Size&nbsp;&nbsp;&nbsp; := Icon_Size_Small_Toolbar;<br>
&nbsp;&nbsp; Spacing&nbsp;&nbsp;&nbsp; : GUInt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := <font color="#800000">3</font>;<br>
&nbsp;&nbsp; Tip&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : UTF8_String&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= &quot;&quot;;<br>
&nbsp;&nbsp; Relief&nbsp;&nbsp;&nbsp;&nbsp; : Gtk_Relief_Style := Relief_Normal;<br>
<font color="#0000FF">package </font>Gtk.Generic_Style_Button
<font color="#0000FF">is</font> ...</tt></p></blockquote>
<p>The generic parameters of the package are:</p>
<ul>
	<li><i>Class_Name</i> is the name of the <a href="http://www.gtk.org">GTK+</a> 
	class of the buttons. The class name will then appear in the resource file 
	as the prefix of the style property names;</li>
	<li><i>Label</i> is the default button label text, when not overridden by 
	the resource file;</li>
	<li><i>Icon</i> is the default button icon, when not overridden. The icon is 
	specified as a stock item identifier;</li>
	<li><i>Relief</i> is the default button relief style;</li>
	<li><i>Size</i> is the default size of the button icon;</li>
	<li><i>Spacing</i> is the default spacing between the icon and the label;</li>
	<li><i>Tip</i> is the default tooltip text.</li>
</ul>
<p>Note that the package has to be instantiated at the library level. It defines 
the type of the button in the standard
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/">GtkAda</a> way:</p>
<blockquote>
<p><tt><font color="#0000FF">type </font>Gtk_Style_Button_Record<font color="#0000FF"> 
is new </font>Gtk_Button_Record<font color="#0000FF"> with private</font>;<font color="#0000FF"><br>
type </font>Gtk_Style_Button<font color="#0000FF"> is access all </font>
Gtk_Style_Button_Record'Class;</tt></p></blockquote>
<p>The following procedures are provided:</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Box<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Button</b> :
<font color="#0000FF">not null access </font>Gtk_Style_Button_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Gtk_Box;</tt></p></blockquote>
<p>This function returns the button box.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Label<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Button</b> :
<font color="#0000FF">not null access</font> Gtk_Style_Button_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Gtk_Label;</tt></p></blockquote>
<p>This function returns the button label.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Gtk_New (<b>Button</b> 
: <font color="#0000FF">out</font> Gtk_Style_Button);</tt></p></blockquote>
<p>This is the button factory. It creates a new button. The parameter <b>Button</b> 
is the result.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize (<b>Button</b> 
: <font color="#0000FF">not null access</font> Gtk_Style_Button_Record'Class);</tt></p></blockquote>
<p>This procedure to be called by any descendant of Gtk_Style_Button_Record.</p>
<p>The style properties of Gtk_Style_Button:</p>
<TABLE border="5" cellpadding="3" cellspacing="0">
  <TR>
    <TD valign="top" bgcolor="#008080"><font color="#FFFFFF"><b>Name</b></font></TD>
    <TD valign="top" bgcolor="#008080"><font color="#FFFFFF"><b>Type</b></font></TD>
    <TD valign="top" bgcolor="#008080"><font color="#FFFFFF"><b>Default</b></font></TD>
    <TD valign="top" bgcolor="#008080"><b><font color="#FFFFFF">Description</font></b></TD>
  </TR>
  <TR>
    <TD valign="top">icon-id</TD>
    <TD valign="top">String</TD>
    <TD valign="top">Icon</TD>
    <TD valign="top">The stock image used as the icon for the button</TD>
  </TR>
  <TR>
    <TD valign="top">icon-left</TD>
    <TD valign="top">Boolean</TD>
    <TD valign="top">Icon_Left</TD>
    <TD valign="top">When true, the icon appears left of the label</TD>
  </TR>
  <TR>
    <TD valign="top">icon-size</TD>
    <TD valign="top">
	<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.enums.html#L122C9">Gtk_Icon_Size</a></TD>
    <TD valign="top">Size</TD>
    <TD valign="top">The icon size</TD>
  </TR>
  <TR>
    <TD valign="top">label</TD>
    <TD valign="top">String</TD>
    <TD valign="top">Label</TD>
    <TD valign="top">The button label text</TD>
  </TR>
  <TR>
    <TD valign="top">relief-style</TD>
    <TD valign="top">Gtk_Relief_Style</TD>
    <TD valign="top">Relief_Normal</TD>
    <TD valign="top">The button relief style</TD>
  </TR>
  <TR>
    <TD valign="top">spacing</TD>
    <TD valign="top">GUInt</TD>
    <TD valign="top">Spacing</TD>
    <TD valign="top">The spacing between icon and label</TD>
  </TR>
  <TR>
    <TD valign="top">tip</TD>
    <TD valign="top">String</TD>
    <TD valign="top">Tip</TD>
    <TD valign="top">The tooltip text</TD>
  </TR>
  </TABLE>
<p>The following snippet illustrates how button style properties can be set in a 
CSS file:</p>
<blockquote>
<p><tt>CustomButton {<br>
-CustomButton-label: &quot;Button&quot;;<br>
-CustomButton-tip: &quot;Some UTF-8 text&quot;;<br>
-CustomButton-icon-left: 0;<br>
-CustomButton-icon-id: &quot;gtk-about&quot;;<br>
}</tt></p></blockquote>
<p>Here <i>CustomButton</i> is the <i>Class_Name</i> used during instantiation 
of <a href="#Gtk.Generic_Style_Button">Gtk.Generic_Style_Button</a>. It prefixes 
the style properties names. The full name path of an button instance depends on its container, 
which allows different styles assigned to distinct instances of the button. See GTK+
<a href="https://developer.gnome.org/gtk3/stable/GtkCssProvider.html">CSS files</a> for further information.</p>
<hr>
<p align="right">
  <a name="10"></a><a href="#9"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><a href="#14"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></a><a href="#11"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H2>10. Spawning processes</H2>
<p>The package 
GLib.Spawn provides bindings to GTK+
<a href="https://developer.gnome.org/glib/stable/glib-Spawning-Processes.html">process spawning</a> facilities. The following types are defined in the package:</p>
<blockquote>
<p><tt><font color="#0000FF">type </font>GSpawnFlags<font color="#0000FF"> is 
new</font> GUInt;<br>
Spawn_Leave_Descriptors_Open : <font color="#0000FF">constant</font> GSpawnFlags 
:= ...;<br>
Spawn_Do_Not_Reap_Child&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">
constant</font> GSpawnFlags := ...;<br>
Spawn_Search_Path&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">constant</font> GSpawnFlags := ...;<br>
Spawn_Stdout_To_Dev_Null&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">
constant</font> GSpawnFlags := ...;<br>
Spawn_Stderr_To_Dev_Null&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">
constant</font> GSpawnFlags := ...;<br>
Spawn_Child_Inherits_Stdin&nbsp;&nbsp; : <font color="#0000FF">constant</font> 
GSpawnFlags := ...;<br>
Spawn_File_And_ArgV_Zero&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">
constant</font> GSpawnFlags := ...;</tt></p></blockquote>
<p>The type defines process spawning flags:</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> GPID <font color="#0000FF">is new</font> 
Interfaces.C.Int;</tt></p></blockquote>
<p>This is the type identifying the process, when started asynchronously.</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> GSpawnChildSetupFunc
<font color="#0000FF">is access procedure</font> (<b>Data</b> : Address);</tt></p></blockquote>
<p>The procedure passed in order to perform 
initialization of the child process.</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Chars_Ptr_Array <font color="#0000FF">
is<br>
&nbsp;&nbsp; array</font> (Positive <font color="#0000FF">range</font> &lt;&gt;)
<font color="#0000FF">of aliased</font> Chars_Ptr;<br>
<font color="#0000FF">package</font> Chars_Ptr_Lists <font color="#0000FF">is<br>
&nbsp;&nbsp; new</font> Interfaces.C.Pointers<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Index&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
=&gt; Positive,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Element&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
=&gt; Chars_Ptr,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Element_Array&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
=&gt; Chars_Ptr_Array,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Default_Terminator =&gt; 
Null_Ptr<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>The package provides a pointer to null-terminated arrays of strings passed as 
parameters to the subprograms spawning process.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GLib.Spawn.Async_Result"></a>type</font> 
Async_Result<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Running&nbsp;&nbsp; : Boolean := False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Pipelined : Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is record<br>
&nbsp;&nbsp; case </font>Running <font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when</font> True =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PID : GPID;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">case</font> 
Pipelined <font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when</font> 
True =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Standard_Input&nbsp; : GInt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Standard_Output : GInt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Standard_Error&nbsp; : GInt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">when</font> False =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end case</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> False =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Error : GError;<br>
&nbsp;&nbsp; <font color="#0000FF">end case</font>;<br>
<font color="#0000FF">end record</font>;</tt></p></blockquote>
<p>Objects of this type are returned by procedures that spawn the process 
asynchronously. The caller is responsible to finalize its fields, when present:</p>
<ul>
	<li>PID is the spawned process identification. It has to be closed using 
	calling <a href="#GLib.Spawn.Close_PID">Close_PID</a>;</li>
	<li>Standard_{Input|Output|Error} are the file descriptor numbers of the pipes 
	to the spawned process. They 
	have to be closed by the caller;</li>
	<li>Error is the spawning error, it has to be freed using 
	<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/glib.error.html#L44C14">Error_Free</a>.</li>
</ul>
<blockquote>
<p><tt><font color="#0000FF"><a name="GLib.Spawn.Sync_Result"></a>type</font> 
Sync_Result (Executed : Boolean := False) <font color="#0000FF">is record <br>
&nbsp;&nbsp; case</font> Executed <font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when</font> True =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Exit_Status&nbsp;&nbsp;&nbsp;&nbsp; 
: GInt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Standard_Output : Chars_Ptr;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Standard_Error&nbsp; : 
Chars_Ptr;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> False =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Error : GError;<br>
&nbsp;&nbsp; <font color="#0000FF">end case</font>;<br>
<font color="#0000FF">end record</font>;</tt></p></blockquote>
<p>Objects of this type are returned by procedures that spawn the process 
synchronously. The caller is responsible to finalize its fields, when present:</p>
<ul>
	<li>Standard_{Output|Error} are strings containing captured output and error 
	streams of the process. They have to be released using G_Free;</li>
	<li>Error is the spawning error, it has to be freed using 
	<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/glib.error.html#L44C14">Error_Free</a>.</li>
</ul>
<blockquote>
<p><tt><font color="#0000FF"><a name="GLib.Spawn.Async"></a>function</font> 
Async<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ([ <b>Working_Directory</b> 
: UTF8_String; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>ArgV</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Chars_Ptr_Lists.Pointer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>EnvP</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Chars_Ptr_Lists.Pointer := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Flags</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: GSpawnFlags;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Child_Setup</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GSpawnChildSetupFunc :=
<font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Address&nbsp;:= Null_Address<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Async_Result;</tt></p></blockquote>
<p>This procedure spawns a process asynchronously, that is the caller is not 
blocked. Optional parameter <b>Working_Directory </b>specifies the directory to run the process in.
<b>ArgV</b> is the list arguments. The first argument specifies the process 
name. Optional parameter <b>EnvP</b> is the list of process environment variables. 
When <font color="#0000FF">null</font> the environment of the current process is 
used. <b>Flags</b> is 
the process spawning flags. <b>Child_Setup</b> is an object used to initialize 
the child process. The result is of the type <a href="#GLib.Spawn.Async_Result">
Async_Result</a>.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GLib.Spawn.Async_With_Pipes"></a>function</font> 
Async_With_Pipes<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ([ <b>Working_Directory</b> 
: UTF8_String; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>ArgV</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Chars_Ptr_Lists.Pointer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>EnvP</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Chars_Ptr_Lists.Pointer := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Flags</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: GSpawnFlags;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Child_Setup</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GSpawnChildSetupFunc :=
<font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Address&nbsp;:= Null_Address<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Async_Result;</tt></p></blockquote>
<p>This procedure is similar to <a href="#GLib.Spawn.Async">Async</a> except that it 
additionally open pipes to the process' standard input, output and error. Note 
that this function is very complicated in use. Consider use of
<a href="#GLib.Spawn.Asynchronous.Asynchronous_Process">Asynchronous_Process</a> 
instead.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> 
Child_Watch_Add<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>PID</b>&nbsp; 
: GPid;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Func</b> 
: Child_Watch_Func;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Data</b> 
: Address<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure sets <b>Func</b> as a call-back upon process exit. The process 
is indicated by <b>PID</b>. <b>Data</b> is passed to <b>Func</b> as a parameter.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="GLib.Spawn.Close_PID"></a>procedure</font> 
Close_PID (<b>PID</b> : GPID);</tt></p></blockquote>
<p>On some platforms, notably Windows, the GPId type represents a resource which 
must be closed to prevent resource leaking. Close_PID is provided for this 
purpose. It should be used on all platforms, even though it doesn't do anything 
under UNIX.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Command_Line_Async (<b>Command_Line</b> 
: UTF8_String)<font color="#0000FF"><br>
&nbsp;&nbsp; return</font> GError;</tt></p></blockquote>
<p>This procedure spawns a process asynchronously. <b>Command_Line</b> is the 
command line. When the result is not <font color="#0000FF">null</font>, it 
indicates a spawning error and has to be freed using 
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/glib.error.html#L44C14">Error_Free</a>.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font>&nbsp; Command_Line_Sync (<b>Command_Line</b> 
: UTF8_String)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Sync_Result;</tt></p></blockquote>
<p>This procedure spawns a process synchronously, that is the caller is blocked 
until completion of the spawned process. <b>Command_Line</b> is the command 
line. The result is of the type <a href="#GLib.Spawn.Sync_Result">Sync_Result</a>.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Sync<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ([ <b>Working_Directory</b> 
: UTF8_String; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>ArgV</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Chars_Ptr_Lists.Pointer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>EnvP</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Chars_Ptr_Lists.Pointer := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Flags</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: GSpawnFlags;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Child_Setup</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GSpawnChildSetupFunc :=
<font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>User_Data</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Address := Null_Address<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Sync_Result;</tt></p></blockquote>
<p>This procedure spawns a process synchronously, that is the caller is blocked 
until completion of the spawned process. Optional parameter <b>Working_Directory </b>specifies the 
directory to run the process in. <b>ArgV</b> is the list arguments. The first 
argument specifies the process name. Optional parameter <b>EnvP</b> is the list of process 
environment variables. <b>Flags</b> is the process spawning flags. <b>
Child_Setup</b> is an object used to initialize the child process. The result is 
of the type <a href="#GLib.Spawn.Sync_Result">Sync_Result</a>.</p>
<table border="1" cellspacing="0" cellpadding="5">
	<tr>
		<td>
		<blockquote>
			<u><i><b>Notes</b></i></u></blockquote>
		<ol>
			<li><i>This package requires <a href="http://www.gtk.org">GTK+</a> (and GLib) properly installed;</i></li>
			<li><i>Under Windows in order to work, it requires an additional 
		executable program gspawn-win32-helper.exe. When 
			<a href="http://www.gtk.org">GTK+</a> is not installed, 
		the helper can still be present as a part of an installation of some 
		third-party software that uses <a href="http://www.gtk.org">GTK+</a>. For example, 
		it is contained in the <a href="http://www.gimp.org">GIMP</a> distribution. 
			In such case making the binaries' directory of
			<a href="http://www.gimp.org">GIMP</a> to appear in the 
		system path would be sufficient to make process spawning work without installation of 
			<a href="http://www.gtk.org">GTK+</a>.</i></li>
			<li><i>The present Windows distribution of
			<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/">GtkAda</a> and
			<a href="https://libre.adacore.com/gps/main.html">GNAT GPS</a> do not include 
		gspawn-win32-helper.exe, though they contain the
			<a href="http://www.gtk.org">GTK+</a> DLLs. Make sure that the path to the 
		directory containing the helper program and the DLLs precedes 
			<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/">GtkAda</a> and
			<a href="https://libre.adacore.com/gps/main.html">GNAT GPS</a> binary 
		directories in the PATH variable. Alternatively, you can put a copy of 
			gspawn-win32-helper.exe in the corresponding directory. The rule is 
			that gspawn-win32-helper.exe must be in the same directory as the 
			<a href="http://www.gtk.org">GTK+</a> DLLs.</i></li>
		</ol>
		</td>
	</tr>
</table>
<h3><a name="10.1"></a>10.1. Spawning process with pipes</h3>
<p><a name="GLib.Spawn.Asynchronous"></a>The package
<a href="#GLib.Spawn.Asynchronous">GLib.Spawn.Asynchronous</a> provides as a 
higher-level binding than <a href="#GLib.Spawn.Async_With_Pipes">
Async_With_Pipes</a>. Since a correct use of the function is very difficult, 
especially with regard to deadlocking. The typical use of the function in GLib 
applications is built around single-threaded model of GLib. Ada natively 
supports&nbsp; tasking and the provided binding takes an advantage of this 
allowing concurrent access to the pipes of the asynchronous process. The 
notification of the process completion is processed in a way that prevents 
premature closing of the output and error pipes, which might contain data after 
the process exit. The notification of exit is postponed until all pipes are 
closed in proper state. The notification is done at the context of the main GTK+ 
task.</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Process_State <font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Process_Running,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Process_Completed,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Process_Failed_To_Start<br>
&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>Values of this enumeration type describe the state of the process associated 
with object of:</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="GLib.Spawn.Asynchronous.Asynchronous_Process"></a>type</font> 
Asynchronous_Process <font color="#0000FF">is<br>
&nbsp;&nbsp; new</font> Ada.Finalization.Limited_Controlled
<font color="#0000FF">with private</font>;</tt></p></blockquote>
<p>The following primitive operations are defined:</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Finalize (<b>Process</b> :
<font color="#0000FF">in out</font> Asynchronous_Process);</tt></p></blockquote>
<p>When overridden this procedure has to be called from the custom 
implementation of.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Completed<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Process</b> :
<font color="#0000FF">in out</font> Asynchronous_Process;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Status</b>&nbsp; : GInt<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure is called on the context of the main GTK+ task upon process 
exit, when all pipes are already closed. The parameter <b>Status</b> is the 
process's exist status. The default implementation does nothing.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Error<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Process</b> :
<font color="#0000FF">in out</font> Asynchronous_Process;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp; 
: UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure is called to accept a new potion of the process's output into 
the standard error. Note that this procedure is called from an independent task. 
Use <a href="#Gtk.Main.Router.Request_Data">Gtk.Main.Router</a> facilities if 
you want to call GTK+ operations from Error. The default implementation does 
nothing.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Failed<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Process</b> :
<font color="#0000FF">in out</font> Asynchronous_Process;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Error</b>&nbsp;&nbsp; : GError<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure is called when the process has failed to start. <b>Error</b> 
indicates the error. It is called from Run, i.e. on the context of the main GTK+ 
task. </p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Error (<b>Process</b> : 
Asynchronous_Process) <font color="#0000FF">return</font> GError;</tt></p></blockquote>
<p>This function returns the error caused process spawn failure or
<font color="#0000FF">null</font>.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_State<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Process</b> : 
Asynchronous_Process<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font> Process_State;</tt></p></blockquote>
<p>This function returns the process state.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Exit_Status<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Process</b> : 
Asynchronous_Process<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> GInt;</tt></p></blockquote>
<p>This function returns the exit status of last process execution.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Input<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Process :
<font color="#0000FF">in out</font> Asynchronous_Process;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Data&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Count&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Natural<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure is called to get&nbsp; a new potion of the process's input. 
The implementation puts it into <b>Data</b> and sets <b>Count</b> to the number 
of characters put. <b>Count</b> is set to 0 to indicate end of input. This is 
the default implementation. Note that this procedure is called from an 
independent task. Use <a href="#Gtk.Main.Router.Request_Data">Gtk.Main.Router</a> 
facilities if you want to call GTK+ operations from Input.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Output<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Process</b> :
<font color="#0000FF">in out</font> Asynchronous_Process;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Data</b>&nbsp;&nbsp;&nbsp; 
: UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure is called to accept a new potion of the process's output into 
the standard output. Note that this procedure is called from an independent 
task. Use <a href="#Gtk.Main.Router.Request_Data">Gtk.Main.Router</a> facilities 
if you want to call GTK+ operations from Output. The default implementation does 
nothing.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Run<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Process</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Asynchronous_Process;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>
Working_Directory</b> : UTF8_String; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>ArgV</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Chars_Ptr_Array / GList;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>EnvP</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Chars_Ptr_Array / GList ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>These procedures are called to spawn the process. The parameter <b>Name</b> 
indicates the process name. The parameter <b>Working_Directory</b> is optional. 
When missing the directory of the process is used. <b>ArgV</b> is the list of 
the arguments starting from the first one. Unlikely to <a href="#GLib.Spawn.Async_With_Pipes">
Async_With_Pipes</a> it does not contain the process name. The list is either 
null-terminated or else a list of strings (see also 
<a href="#Gtk.Enums.String_Lists">Gtk.Enums.String_Lists</a>). The optional 
parameter <b>EnvP</b> is the environment. When omitted the environment of the 
current process is used. The exception Use_Error is propagated when a process 
associated with <b>Process</b> is not yet completed. Note that Run has to be 
used only on the context of the main GTK+ task.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Wait<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Process</b>&nbsp; 
: <font color="#0000FF">in out</font> Asynchronous_Process;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Time_Out</b> : Duration := Duration'Last<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure is called to wait for process completion. Time_Error is 
propagated when <b>Time_Out</b> is expired. This procedure can used from any 
task.</p>
<h3><a name="10.2"></a>10.2. Text-buffered pipes</h3>
<p><a name="GLib.Spawn.Text_Bufferred"></a>The package
<a href="#GLib.Spawn.Text_Bufferred">GLib.Spawn.Text_Bufferred</a> provides an 
extension of <a href="#GLib.Spawn.Asynchronous.Asynchronous_Process">
Asynchronous_Process</a> that binds the process standard input, output, and error 
to
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.text_buffer.html#L51C9">Gtk_Text_Buffer</a>:</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Text_Bufferred_Process
<font color="#0000FF">is new</font> Asynchronous_Process <font color="#0000FF">
with private</font>;</tt></p></blockquote>
<p>It has the following operations defined:</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Finalize (<b>Process</b> :
<font color="#0000FF">in out</font> Text_Bufferred_Process);</tt></p></blockquote>
<p>This procedure is to be called when overridden.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Insert<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Process</b> :
<font color="#0000FF">in out</font> Text_Bufferred_Process;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Buffer</b>&nbsp; : <font color="#0000FF">access</font> 
Gtk_Text_Buffer_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Error</b>&nbsp;&nbsp; : Boolean;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Text</b>&nbsp;&nbsp;&nbsp; 
: UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure is called to put contents into a text buffer. <b>Buffer</b> 
is the text buffer. <b>Error</b> is <i><font color="#800000">true</font></i> 
when <b>Buffer</b> is associated with the standard error channel of the process. 
Otherwise it is the output channel. It can be 
overridden in order to provide text tags etc. The procedure is called on the 
context of the main GTK+ task.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Run<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Process</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: in out Text_Bufferred_Process;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>
Working_Directory</b> : UTF8_String; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>ArgV</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Chars_Ptr_Array / GList;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>EnvP</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Chars_Ptr_Array / GList; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Input</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Gtk_Text_Buffer := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Output</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 
Gtk_Text_Buffer := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Error</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Gtk_Text_Buffer := <font color="#0000FF">null</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure calls the process passing the source of <b>Input</b> text 
buffer to the standard input and putting the standard output and error into 
Output and Error, correspondingly. Note that Run has to be used only on the 
context of the main GTK+ task.</p>
<hr>
<p align="right">
  <a name="11"></a><a href="#9"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><a href="#14"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></a><a href="#12"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H2>11. Helper compilation units</H2>
<h3><a name="11.1"></a>11.1. Constant lists of strings</h3>
<p><a name="Gtk.Enums.String_Lists"></a>The package 
<a href="#Gtk.Enums.String_Lists">Gtk.Enums.String_Lists</a> provides a 
simplified way of creation constant lists of strings. When a temporal object of 
Gtk.Enums.String_Lists.GList is needed it can be created this way:</p>
<blockquote>
<p><tt><font color="#0000FF">with </font>Gtk.Enums.String_Lists;
<font color="#0000FF">use </font>Gtk.Enums.String_Lists;<br>
&nbsp;&nbsp; ... <br>
<font color="#0000FF">begin<br>
</font>&nbsp;&nbsp; ...<br>
&nbsp;&nbsp; <i>some_operation</i> (..., +&quot;<font color="#FF0000">A</font>&quot;/&quot;<font color="#FF0000">B</font>&quot;/&quot;<font color="#FF0000">C</font>&quot;, 
...); </tt></p></blockquote>
<p>Here the combo box is filled with the strings&nbsp; &quot;A&quot;, &quot;B&quot;, &quot;C&quot;. The 
package defines a controlled type </p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Controlled_String_List (&lt;&gt;)
<font color="#0000FF">is limited private</font>;</tt></p></blockquote>
<p>with the operations:</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Enums.String_Lists.Get_GList"></a>function</font> Get_GList (<b>List</b> : 
Controlled_String_List) <font color="#0000FF">return</font> String_List.GList;</tt></p></blockquote>
<p>This function is used to get GList object as in the example above. Note that 
the result can be used no longer the parameter <b>List</b> leaves the scope. It 
is recommended not to use it otherwise than for passing it as a parameter to 
another subprogram like Set_Popdown_Strings.</p>
<blockquote>
<p><tt>
<font color="#0000FF">function</font> &quot;<font color="#FF0000">+</font>&quot; (<b>List</b> 
: Controlled_String_List) <font color="#0000FF">return</font> String_List.GList<br>
&nbsp;<font color="#0000FF">&nbsp; renames</font> Get_GList; </tt></p></blockquote>
<p>This is an alias for <a href="#Gtk.Enums.String_Lists.Get_GList">Get_GList</a>.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> &quot;<font color="#FF0000">/</font>&quot; (<b>Left</b> 
: Controlled_String_List; Right : UTF8_String)<br>
&nbsp;<font color="#0000FF">&nbsp; return</font> Controlled_String_List;<font color="#0000FF"><br>
function</font> &quot;<font color="#FF0000">/</font>&quot; (<b>Left</b>, <b>Right</b> : 
UTF8_String)<br>
&nbsp;<font color="#0000FF">&nbsp; return</font> Controlled_String_List;</tt></p></blockquote>
<p>The operator &quot;<font color="#FF0000">/</font>&quot; is used for list concatenation 
and list construction out of two strings.</p>
<h3><a name="11.2"></a>11.2. Wildcard patterns</h3>
<p><a name="Gtk.Enums.Strings_List.Wildcards"></a>The package
<a href="#Gtk.Enums.Strings_List.Wildcards">Gtk.Enums.Strings_List.Wildcards</a> 
provides tools for matching UTF-8 encoded strings against simple wildcard 
patterns. A pattern is a list 
of UTF-8 encoded strings from Gtk.Enums.Strings_List.GList. An empty list 
matches anything. Otherwise, each string of the list is treated as an 
alternative. A text is matched when it is by at least one of the 
alternatives. An alternative can contain any number of wildcard characters (*) 
which match any, possibly empty, sequence of UTF-8 characters. Other UTF-8 
characters are matched as-is. A typical example of a pattern could be:</p>
<blockquote>
	<p><tt>*.ads<br>
	*.adb</tt></p>
</blockquote>
<p>consisting of two alternatives for matching Ada-source files.</p>
<table border="1" cellspacing="0" cellpadding="5">
	<tr>
		<td><i>Note, this package requires
		<a href="http://www.dmitry-kazakov.de/ada/strings_edit.htm">Strings_Edit</a> 
		library.</i></td>
	</tr>
</table>
<p>The following subprograms are defined in the package:</p>
<blockquote>
	<p><tt><font color="#0000FF">function</font> Match<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Text</b>&nbsp;&nbsp;&nbsp; 
	: UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Pattern</b> 
	: Controlled_String_List<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Boolean;<br>
	<font color="#0000FF">function</font> Match<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Text</b>&nbsp;&nbsp;&nbsp; 
	: UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Pattern</b> 
	: String_List.GList<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return</font> Boolean;</tt></p>
</blockquote>
<p>These functions return <i><font color="#800000">true</font></i> when <b>Text</b> 
is matched by <b>Pattern</b>.</p>
<blockquote>
	<p><tt>Any : <font color="#0000FF">constant</font> String_List.GList := 
	String_List.Null_List;</tt></p>
</blockquote>
<p>This constant defines a pattern that matches anything.</p>
<h3><a name="11.3"></a>11.3. Object's reference count</h3>
<blockquote>
<p><tt><font color="#0000FF">function</font> GLib.Object.Ref_Count<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Object</b> :
<font color="#0000FF">access</font> GObject_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> GUInt;</tt></p>
</blockquote>
<p>This function returns the reference count of a 
<a href="http://www.gtk.org">GTK+</a> 
object. Procedures Ref, Unref and packing into containers influence the count. 
When count reaches 0, the object is collected.</p>
<p><i>Notes</i>. References in 
<a href="http://www.gtk.org">GTK+</a> 
are quite confusing. Objects are created with the count set to 1, but this does 
not mean that an explicit Unref should be used to remove them. That depends on 
the object type. There are two categories of:</p>
<ul>
	<li><i>Initially owned</i> objects require Unref;</li>
	<li><i>Initially unowned</i> objects don't.</li>
</ul>
<p>When you create an <i>owned</i> object and then put it into a container, you 
have to call Unref on the object. This will bring its reference count back to 1, 
so that only the container would own the object. When you create an <i>unowned</i> 
object it will also have the reference count set to 1. But this count will be 
flagged as <i>floating</i>. The effect is that when the object gets explicitly referenced, 
it is said the <i>floating reference sinks</i>, i.e. it is simply dropped. 
Therefore to call Unref on it would be a critical error. In short, when a new unowned object is put into a container you don't call Unref on it. All objects
derived from
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.widget.html">Gtk.Widget
</a>are created floating.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> GLib.Object.Checked_Destroy<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Object</b> :
<font color="#0000FF">not null access</font> Gtk_Widget_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure can be used instead of the procedure Destroy. It acts same 
when the object is not floating. Otherwise the floating reference is first 
removed.</p>
<h3><a name="11.4"></a>11.4. Enumeration combo box widget</h3>
<blockquote>
<p><tt><font color="#0000FF">generic<br>
&nbsp;&nbsp; type </font>Enum_Type <font color="#0000FF">is</font> (&lt;&gt;);<br>
<font color="#0000FF">package</font> Gtk.Generic_Enum_Combo_Box
<font color="#0000FF">is</font> ...</tt></p>
</blockquote>
<p>This generic package provides a combo box widget which choices are values of 
the enumeration type used in an instantiation. The package provides:</p>
<blockquote>
<p><tt><font color="#0000FF">type </font>Gtk_Enum_Combo_Box_Record<font color="#0000FF"> 
is<br>
&nbsp;&nbsp; new </font>Gtk.Combo_Box.Gtk_Combo_Box_Record<font color="#0000FF"> 
with null record</font>;<font color="#0000FF"><br>
type </font>Gtk_Enum_Combo_Box<font color="#0000FF"> is access all </font>
Gtk_Enum_Combo_Box_Record'Class;</tt></p>
</blockquote>
<p>The widget object type and a pointer to it.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure </font>Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Combo</b> :
<font color="#0000FF">out </font>Gtk_Enum_Combo_Box;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Style</b> : <font color="#0000FF">in </font>Gtk.Missed.Enum_Style_Type := 
Mixed_Case;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Replace_Underscore_By_Space</b> : <font color="#0000FF">in</font> Boolean := 
False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure creates a new widget. The parameter <b>Style</b> (of the type 
Enum_Style_Type, declared in the package Gtk.Missed) controls the appearance of 
the literals:</p>
<ul>
	<li><i>Mixed_Case</i> - First letter of each word is capitalized;</li>
	<li><i>All_Caps</i> - All letters are capitalized;</li>
	<li><i>All_Small </i>- All letters are in lower case;</li>
	<li><i>Capitalize_First</i> - The first letter is capitalized.</li>
</ul>
<p>The parameter <b>Replace_Underscore_By_Space</b> controls whether the 
underscore character is replaced by space.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure </font>Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Combo</b> :
<font color="#0000FF">access </font>Gtk_Enum_Combo_Box_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Style</b> : <font color="#0000FF">in</font> Gtk.Missed.Enum_Style_Type := 
Gtk.Missed.Mixed_Case;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Replace_Underscore_By_Space</b> : <font color="#0000FF">in</font> Boolean := 
False);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure shall be called from the Initialize of the derived widget in 
order to initialize the object.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure </font>Set_Active_Value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Combo</b> :
<font color="#0000FF">access </font>Gtk_Enum_Combo_Box_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b> : <font color="#0000FF">in</font> Enum_Type<font color="#0000FF"><br>
</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure changes the item selected in the box.</p>
<blockquote>
<p><tt><font color="#0000FF">function </font>Get_Active_Value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Combo</b> :
<font color="#0000FF">access </font>Gtk_Enum_Combo_Box_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Enum_Type;</tt></p>
</blockquote>
<p>This function returns the currently selected item in the box. The exception 
Gtk.Missed.No_Selection is propagated when nothing is selected.</p>
<h3><a name="11.5"></a>11.5. Resizing custom drawn widgets</h3>
<p>Starting with the version 3.0 the method of widget resizing was changed. 
There is no signal emitted when the widget is about to be resized. The signal <i>
configure-event</i> effectively cannot be caught. One technique to handle custom 
widget size changes is querying its actual size from the handler of the <i>draw</i> 
event. Normally when the widget is resized it is also redrawn and thus it is 
enough to call Get_Allocated_Width and Get_Allocated_Height or alternatively 
Get_Allocation in order to determine the actual size and then render the widget 
accordingly.</p>
<p>In some cases the problem is that the widget size is wrong. When a descendant 
of Gtk_Fixed or Get_Drawable gets shrunken as a child of a container, its 
allocation size is not decreased. To handle this problem one should override the 
&quot;virtual&quot; operations of the widget responsible for reporting that the widget can 
be shrunken. The following code snippet illustrates the approach. </p>
<blockquote>
<p><tt>Class : Ada_GObject_Class;<font color="#008000"> -- My widget class 
object</font><font color="#0000FF"><br>
<br>
procedure </font>Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Widget :
<font color="#0000FF">not null access</font> My_Widget_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is<br>
</font>&nbsp;&nbsp; Properties_To_Install : Boolean := Class = 
Uninitialized_Class;<br>
<font color="#0000FF">begin</font><br>
&nbsp;&nbsp; <i>&lt;parent-type-package</i>&gt;.Initialize (Widget, ...);<br>
&nbsp;&nbsp; Initialize_Class_Record<br>
&nbsp;&nbsp; (&nbsp; Widget,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Null_Array,<i><font color="#008000"> -- Signals</font></i><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Class,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">My_Widget</font>&quot;<br>
&nbsp;&nbsp; );<br>
&nbsp;&nbsp; <font color="#0000FF">if</font> Properties_To_Install
<font color="#0000FF">then</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ... <i><font color="#008000">-- Install 
properties if needed</font></i><br>
&nbsp;&nbsp; <font color="#0000FF">end if</font>;<br>
&nbsp;&nbsp; <i><font color="#008000">--<br>
&nbsp;&nbsp; -- Set handlers respond to sizing requests<br>
&nbsp;&nbsp; --</font></i><br>
&nbsp;&nbsp; Set_Default_Get_Preferred_Width_Handler<br>
&nbsp;&nbsp; (&nbsp; Class,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Preferred_Width'Access<br>
&nbsp;&nbsp; );<br>
&nbsp;&nbsp; Set_Default_Get_Preferred_Height_Handler<br>
&nbsp;&nbsp; (&nbsp; Class,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Preferred_Height'Access<br>
&nbsp;&nbsp; );<br>
&nbsp;&nbsp; ...<font color="#0000FF"><br>
end</font> Initialize;</tt></p>
</blockquote>
<p>The handlers to deal with the widget size are defined as follows:</p>
<blockquote>
<p><tt><font color="#0000FF">procedure </font>Preferred_Height<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Widget&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Address;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Minimum_Size : <font color="#0000FF">out</font> GInt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Natural_Size : <font color="#0000FF">out</font> GInt<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
pragma
</font>Convention (C, Preferred_Size);<font color="#0000FF"><br>
<br>
procedure</font> Preferred_Size<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Widget&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Address;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Minimum_Size : <font color="#0000FF">out</font> GInt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Natural_Size : <font color="#0000FF">out</font> GInt<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">is</font><br>
&nbsp;&nbsp; Stub : My_Widget_Record;<br>
&nbsp;&nbsp; This : My_Widget;<font color="#0000FF">
</font><i><font color="#008000">&nbsp; -- Pointer to Ada object</font></i><font color="#0000FF"><br>
begin<br>
</font>&nbsp;&nbsp; This := My_Widget (Get_User_Data (Widget, Stub));<font color="#0000FF"><br>
&nbsp;&nbsp;
</font>Minimum_Size := <font color="#800000">1</font>;&nbsp; <i>
<font color="#008000">-- Down to one pixel</font></i><br>
&nbsp;&nbsp;
Natural_Size := ... <i><font color="#008000">-- Use This to calculate natural 
height</font></i><font color="#0000FF"><br>
end 
</font>Preferred_Height<font color="#0000FF">;</font></tt></p>
</blockquote>
<hr>
<p align="right">
  <a name="12"></a><a href="#11"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><a href="#14"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></a><a href="#13"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H2>12. Installation</H2>
<h3><a name="12.1"></a>12.1. Using the source distribution</h3>
<P>
<a name="Installation"></a>The software does not require special installation. The archive's content can be 
put in a directory and used as-is. For users of <a href="http://libre.adacore.com/libre/">GNAT compiler</a> 
the software provides gpr project files, which can be used in the
<a href="https://libre.adacore.com/gps/main.html">Gnat Programming Studio</a> 
(GPS). 
<p>To ease use of the software with GPS, it can be integrated into the GPS 
using the <a href="http://www.dmitry-kazakov.de/ada/gps_installer.htm">GPS 
Library Installer</a> (gps_installer). Start the gps_installer as root (or with 
the corresponding administrative rights to the GNAT installation directory) 
specifying the source directory as the argument. Follow the instructions.</p><P>
The packages that binds source view widget require an installation of
<a href="https://developer.gnome.org/gtksourceview/stable/GtkSourceView.html">GtkSourceView</a>. Note that 
the standard
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/">GtkAda</a> distribution
does not contain <a href="https://developer.gnome.org/gtksourceview/stable/GtkSourceView.html">GtkSourceView</a> libraries.
You will need to download and install them manually. Normally</p>
<ul>
	<li><i>Windows</i>. <a name="gtkada_windows_packages"></a>You should have
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/">GtkAda</a> 
	installed first. Typically the installation goes into the directory C:\GtkAda. 
	After that you decompress the contents of the archive
	<a href="http://dmitry-kazakov.de/ada/gtksourceview-3.4.2-mingw.tgz">
	gtksourceview-3.4.2-mingw.tgz</a> in that directory. (The archive contains
<a href="https://developer.gnome.org/gtksourceview/stable/GtkSourceView.html">GtkSourceView</a> version 
	3.4.2 and libxml2 version 2.6.30 compiled using GNAT GPL 2013 for Windows)</li>
	<li><i>Linux</i>. You should install the <i>gtksourceview3-devel</i> 
	(Fedora) or <i>gtksourceview-3.0-dev</i> (Debian) packages as appropriate. 
	(See notes about GtkAda installation under Fedora and Debian below)</li>
</ul>
  <TABLE border="5" cellpadding="3" cellspacing="0">
  <TR>
    <TD valign="top" bgcolor="#008080"><FONT color="#FFFFFF"><B>Project files</B></FONT></TD>
    <TD valign="top" bgcolor="#008080"><FONT color="#FFFFFF"><B>Provides</B></FONT></TD>
    <TD valign="top" bgcolor="#008080"><FONT color="#FFFFFF"><B>Use in custom 
	project</B></FONT></TD>
  </TR>
  <TR>
    <TD valign="top">gtkada_contributions</TD>
    <TD valign="top">GtkAda contributions</TD>
    <TD valign="top"><tt>
	<font color="#0000FF">with</font> 
	&quot;gtkada_contributions.gpr&quot;;</tt></TD>
  </TR>
  <TR>
    <TD valign="top">gtkada_contributions-source_view</TD>
    <TD valign="top">GtkAda contributions with source view packages</TD>
    <TD valign="top"><tt>
	<font color="#0000FF">with</font> 
	&quot;gtkada_contributions-source_view.gpr&quot;;</tt></TD>
  </TR>
  <TR>
    <TD valign="top">components-gtk</TD>
    <TD valign="top">GtkAda contributions with
<a href="http://www.dmitry-kazakov.de/ada/components.htm">Simple Components for 
Ada</a></TD>
    <TD valign="top"><tt>
	<font color="#0000FF">with</font> 
	&quot;components-gtk.gpr&quot;;</tt></TD>
  </TR>
  <TR>
    <TD valign="top">components-odbc-gtk</TD>
    <TD valign="top">GtkAda contributions with
<a href="http://www.dmitry-kazakov.de/ada/components.htm">Simple Components for 
Ada</a> and native ODBC bindings </TD>
    <TD valign="top"><tt>
	<font color="#0000FF">with</font> 
	&quot;components-odbc-gtk.gpr&quot;;</tt></TD>
  </TR>
  </TABLE>
<h3><a name="12.2"></a>12.2. GtkAda distributions</h3>
<p><u><b>Fedora Core 20</b></u>. <a name="gtkada_fedora_packages"></a>Presently 
Fedora does not provide packaged GtkAda 
3.x. The following transitional packages can be used instead:</p>
  <TABLE border="5" cellpadding="3" cellspacing="0">
  <TR>
    <TD valign="top" bgcolor="#008080"><font color="#FFFFFF"><b>Packages</b></font></TD>
    <TD valign="top" bgcolor="#008080"><font color="#FFFFFF"><b>32-bit</b></font></TD>
    <TD valign="top" bgcolor="#008080"><font color="#FFFFFF"><b>64-bit</b></font></TD>
  </TR>
  <TR>
    <TD valign="top" rowspan="2">Binary</TD>
    <TD valign="top">
	<a href="http://www.dmitry-kazakov.de/distributions/gtkada-3.8-1.i686.rpm">gtkada-3.8-1.i686.rpm</a></TD>
    <TD valign="top">
	<a href="http://www.dmitry-kazakov.de/distributions/gtkada-3.8-1.x86_64.rpm">gtkada-3.8-1.x86_64.rpm</a></TD>
  </TR>
  <TR>
    <TD valign="top">
	<a href="http://www.dmitry-kazakov.de/distributions/gtkada-debuginfo-3.8-1.i686.rpm">gtkada-debuginfo-3.8-1.i686.rpm</a></TD>
    <TD valign="top">
	<a href="http://www.dmitry-kazakov.de/distributions/gtkada-debuginfo-3.8-1.x86_64.rpm">gtkada-debuginfo-3.8-1.x86_64.rpm</a></TD>
  </TR>
  <TR>
    <TD valign="top" rowspan="2">Developing</TD>
    <TD valign="top">
	<a href="http://www.dmitry-kazakov.de/distributions/gtkada-devel-3.8-1.i686.rpm">gtkada-devel-3.8-1.i686.rpm</a></TD>
    <TD valign="top">
	<a href="http://www.dmitry-kazakov.de/distributions/gtkada-devel-3.8-1.x86_64.rpm">gtkada-devel-3.8-1.x86_64.rpm</a></TD>
  </TR>
  <TR>
    <TD valign="top">
	<a href="http://www.dmitry-kazakov.de/distributions/gtkada-devel-debuginfo-3.8-1.i686.rpm">gtkada-devel-debuginfo-3.8-1.i686.rpm</a></TD>
    <TD valign="top">
	<a href="http://www.dmitry-kazakov.de/distributions/gtkada-devel-debuginfo-3.8-1.x86_64.rpm">gtkada-devel-debuginfo-3.8-1.x86_64.rpm</a></TD>
  </TR>
  <TR>
    <TD valign="top" rowspan="2">Source</TD>
    <TD valign="top" colspan="2">
	<a href="http://www.dmitry-kazakov.de/distributions/gtkada-3.8-1.src.rpm">gtkada-3.8-1.src.rpm</a></TD>
  </TR>
  <TR>
    <TD valign="top" colspan="2">
	<a href="http://www.dmitry-kazakov.de/distributions/gtkada-devel-3.8-1.src.rpm">gtkada-devel-3.8-1.src.rpm</a></TD>
  </TR>
  </TABLE>
<p>For automatic install and update with <i>yum</i>,
place the file <a href="http://dmitry-kazakov.de/dmitry-kazakov.repo">dmitry-kazakov.repo</a> 
into the directory <i>/etc/yum.repos.d</i>.</p>
<p><u><b>Debian 7</b></u>. <a name="gtkada_debian_packages"></a>Presently Debian 
does not provide packaged GtkAda 
3.x. The following transitional packages can be used instead (manually or from 
the repository):</p>
  <TABLE border="5" cellpadding="3" cellspacing="0">
  <TR>
    <TD valign="top" bgcolor="#008080"><font color="#FFFFFF"><b>Packages</b></font></TD>
    <TD valign="top" bgcolor="#008080"><font color="#FFFFFF"><b>32-bit</b></font></TD>
    <TD valign="top" bgcolor="#008080"><font color="#FFFFFF"><b>64-bit</b></font></TD>
  </TR>
  <TR>
    <TD valign="top" rowspan="2">Binary</TD>
    <TD valign="top">
	<a href="http://www.dmitry-kazakov.de/distributions/pool/main/libg/libgtkada-3.8/libgtkada3.8_1_i386.deb">
	libgtkada3.8_1_i386.deb</a></TD>
    <TD valign="top">
	<a href="http://www.dmitry-kazakov.de/distributions/pool/main/libg/libgtkada-3.8/libgtkada3.8_1_amd64.deb">
	libgtkada3.8_1_amd64.deb</a></TD>
  </TR>
  <TR>
    <TD valign="top">
	<a href="http://www.dmitry-kazakov.de/distributions/pool/main/libg/libgtkada-3.8/libgtkada3.8-dbg_1_i386.deb">
	libgtkada3.8-dbg_1_i386.deb</a></TD>
    <TD valign="top">
	<a href="http://www.dmitry-kazakov.de/distributions/pool/main/libg/libgtkada-3.8/libgtkada3.8-dbg_1_amd64.deb">
	libgtkada3.8-dbg_1_amd64.deb</a></TD>
  </TR>
  <TR>
    <TD valign="top">Developing</TD>
    <TD valign="top">
	<a href="http://www.dmitry-kazakov.de/distributions/pool/main/libg/libgtkada-3.8/libgtkada3.8-dev_1_i386.deb">
	libgtkada3.8-dev_1_i386.deb</a></TD>
    <TD valign="top">
	<a href="http://www.dmitry-kazakov.de/distributions/pool/main/libg/libgtkada-3.8/libgtkada3.8-dev_1_amd64.deb">
	libgtkada3.8-dev_1_amd64.deb</a></TD>
  </TR>
  </TABLE>
<p>For automatic install and update with APT, add the following line to <i>/etc/apt/sources.list</i>:</p>
<blockquote><tt>deb http://dmitry-kazakov.de/distributions sid main</tt></blockquote>
<p><u><b>Windows</b></u>. The GtkAda 3.4.x can be obtained from AdaCore
<a href="http://libre.adacore.com/libre/tools/gtkada/">Libre</a>.</p>
<h3><a name="12.3"></a>12.3. Debian and Fedora packages</h3>
<p>Under Fedora, Debian Linux and their derivates you can use GtkAda 
contribution packages for
<a href="#fedora_packages">Fedora</a> and
	<a href="#debian_packages">Debian</a> respectively.</p>
<h3><a name="12.4"></a>12.4. Fedora packages repository</h3>
<p>The Fedora packages of this library are located in a <i>yum</i> software 
package manager repository. They can be searched, installed and updated 
automatically using <i>yum</i>. In order to do so, the file
<a href="http://dmitry-kazakov.de/dmitry-kazakov.repo">dmitry-kazakov.repo</a> 
can be put into the directory <i>/etc/yum.repos.d</i>.</p>
<h3><a name="12.5"></a>12.5. Debian packages repository</h3>
<p>In order to use <i>apt</i> Debian repository for automatic install and update 
these packages add the following line to <i>/etc/apt/sources.list</i>:</p>
<blockquote>
	<tt>deb http://dmitry-kazakov.de/distributions sid main</tt></blockquote>
<hr>
<p align="right">
  <a name="13"></a><a href="#12"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><a href="#14"><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H2>13.
<a name="changes_log"></a>Changes log</H2>
<P>
<i>
The following versions were tested with the compilers:</i>
<ul>
  <li>
GNAT GPL 2016 (20160515-49)</li>
	<li><i>GNAT 6</i></li>
  </ul>
<P><i>and the GtkAda versions:</i></p>
<ul>
	<li><i>GtkAda 3.14.2</i></li>
</ul>
<P>
Changes (21 February 2017) to the version 3.17:<ul>
	<li>Gtk.Main.Router implementation of Send is changed so that when called on 
	the main task context the callback is made at the loop end rather than 
	immediately.</li>
	</ul>
<P>
Changes (20 November 2016) to the version 3.16:<ul>
	<li>Minor bug fixes in Gtk.Main.Router</li>
	</ul>
<P>
Changes (25 July 2016) to the version 3.15:<ul>
	<li>Compatibility with GtkAda 3.14</li>
	</ul>
<P>
<i>
The following versions were tested with the compilers:</i>
<ul>
  <li>
<i>GNAT GPL 2015 (20150428-49)</i></li>
	<li><i>GNAT 5.3</i></li>
  </ul>
<P><i>and the GtkAda versions:</i></p>
<ul>
	<li><i>GtkAda 3.8.3</i></li>
	<li><i>GtkAda 3.8.4</i></li>
</ul>
<P>
Changes (3 March 2016) to the version 3.14:<ul>
	<li>Get_Clip_Rectangle procedure and function added to Gtk.Missed;</li>
	<li>Freeze_Notify and Thaw_Notify added to Gtk.Missed.</li>
	</ul>
<P>
Changes (10 October 2015) to the version 3.13:<ul>
	<li>Minor bug fixes;</li>
	<li>GTK 3.10 compatibility issues.</li>
	</ul>
<P>
<i>
The following versions were tested with the compilers:</i>
<ul>
  <li>
<i>GNAT GPL 2015 (20150428-49)</i></li>
	<li><i>GNAT 4.9.2</i></li>
  </ul>
<P>
<i>and the GtkAda versions:</i><ul>
	<li><i>GtkAda 3.8.3</i></li>
	</ul>
<p>Changes (24 August 2015) to the version 3.11:</p>
<ul>
  <li>Added workaround get/set string operations for tree model, store and list 
	store (Gtk.Missed). The standard versions have critical bug;</li>
	<li>Messages filter added to Gtk.Main.Router.GNAT_Stack;</li>
	<li>Add_Button_From_Stock added to Gtk.Missed to work around Gtk.Dialog.Add_Button. (Add_Button generates warnings about GtkButton:use-stock 
	being deprecated);</li>
	<li>Add_Named and Add_Stock_Attribute added to Gtk.Messed to work around 
	deprecated &quot;stock-id&quot; property of GtkCellRendererPixbuf;</li>
	<li>Say procedures in Gtk.Main.Router and in Gtk.Main.Router.GNAT_Stack 
	changed in order to be independent on GtkAda.Dialogs (for the same reason);</li>
	<li>Bug fixes.</li>
</ul>
<p>Changes (29 June 2015) to the version 3.11:</p>
<ul>
  <li>Adapted to GNAT GPL 2015 and GtkAda 3.8.3.</li>
</ul>
	<p>
<i>
The following versions were tested with the compilers:</i>
</p>
<ul>
  <li>
<i>GNAT GPL 2014 (20140331)</i></li>
	<li>
<i>GNAT 4.8.2 (20131212)</i></li>
  <li><i>GNAT 4.9.0</i></li>
  </ul>
<P>
<i>and the GtkAda versions:</i><ul>
	<li><i>GtkAda 3.8.2</i></li>
	</ul>
<p>Changes (2 April 2015) to the version 3.10:</p>
<ul>
  <li>ARMv7 (AKA armhf) support.</li>
</ul>
	<P>
Changes&nbsp; (24 November 2014) to the version 3.9:<ul>
	<li>Path parameter added to the signals item-inserted and item-deleting in 
	Gtk.Abstract_Browser;</li>
	<li>Comparing Gtk_Tree_Path in Gtk.Missed was made safe when one one of the 
	paths is empty;</li>
	<li>Annoying Windows popup boxes, notably, &quot;please insert disk into drive&quot;, 
	are blocked automatically when the application links to the library (see 
	Gtk.Missed package initialization);</li>
	<li>Bug fixes.</li>
	</ul>
	<P>
Changes&nbsp; (24 July 2014) to the version 3.8:<ul>
	<li>Minor bug fixes;</li>
	<li>Fedora packages rely on the official GtkAda3 packages (released by Bj&ouml;rn 
	Persson).</li>
	</ul>
	<P>
Changes&nbsp; (1 June 2014) to the version 2.14:<ul>
	<li>The library was adapted to the GtkAda 3.x. Earlier versions are no more 
	supported;</li>
	<li>Only Ada 2005 and Ada 2012 are supported when GtkAda 3.x is used;</li>
	<li>Null address exclusion is added where appropriate (since Ada 95 is no 
	more supported);</li>
	<li>Add_Class_Style, Add_Widget_Class_Style, Add_Widget_Name_Style removed 
	from Gtk.Missed. The resource files are replaced with GTK style provider;</li>
	<li>Set_Has_Tooltip is removed from Gtk.Missed. It is now provided by 
	Gtk.Widget;</li>
	<li>Has_Tooltip is removed from Gtk.Missed. It is now provided by Gtk.Widget 
	as Get_Has_Tooltip;</li>
	<li>The signature of Set_Tip from Gtk.Missed is changed. The first parameter 
	is removed;</li>
	<li>Get_Size is removed from Gtk.Missed. It is now provided by Gtk.Window;</li>
	<li>Delete_Event_Handler and Destroy_Handler added to Gtk.Missed to ease 
	designing GtkAda applications consisting of a single procedure;</li>
	<li>Init of Gtk.Main.Router has additional parameter, the application 
	window. The change is necessary because Gtk 3.x does not offer hooks on main 
	loop exit as Gtk 2.x did;</li>
	<li>Gtk.Object.Checked_Destroy is renamed to GLib.Object.Checked_Destroy;</li>
	<li>Gtk.Generic_Style_Button handling tooltips is changed to the new 
	interface;</li>
	<li>Class_Find_Style_Property removed from Gtk.Widget.Styles. See 
	Gtk.Widget.Find_Style_Property;</li>
	<li>Get_Property for GFloat removed from Gtk.Missed as it now provided by 
	the package GLib.Properties;</li>
	<li>Class_Install_Property added to Gtk.Missed;</li>
	<li>From_RGBA and To_RGBA added to Gtk.Missed;</li>
	<li>Procedure Check and function To_String were added to Gtk.Missed;</li>
	<li>Get_Screen_Position procedure added to Gtk.Missed;</li>
	<li>Generic package Set_Column_Cell_Data added to Gtk.Missed (sets cell data 
	function of a tree model column);</li>
	<li>Set_Object removed from GLib.Values.Handling. This procedure is now 
	provided in GLib.Values;</li>
	<li>The package Gtk.Widget.Styles.CSS_Store added to enumerate and export widget 
	style properties in the CSS format;</li>
	<li>The package Gtk.Tooltips.Strong_References was removed;</li>
	<li>The package Gtk.Cell_Renderer.Abstract_Renderer was adapted to new 
	interface of cell renderer introduced by GTK 3.x;</li>
	<li>The package Gtk.Tree_Model.Abstract_Store was adapted to new 
	interface of cell renderer introduced by GTK 3.x;</li>
	<li>Procedures Forward_Search and Backward_Search were removed from the 
	package Gtk.Source_Buffer. This functionality is now provided by 
	Gtk_Text_Iter;</li>
	<li>Package Gtk.Source_Mark_Attributes added (new in GtkSourceView 3.x);</li>
	<li>The procedures Get_Mark_Category_*, Set_Mark_Category_* were removed 
	from the package Gtk.Source_View. This functionality is provided by Gtk.Source_Mark_Attributes 
	in GtkSourceView 3.x;</li>
	<li>Procedures Get_For_Screen, Get_Limit, Set_Limit were removed from 
	Gtk.Recent_Manager_Alt, as they are no more present in GTK 3.x;</li>
	<li>Package Gdk.Pixbuf.Image was added to provide memory-mapped images which 
	pixels can be manipulated directly in the memory;</li>
	<li>Get_Style_Fallback added to the package Gtk.Source_Language;</li>
	<li>GtkAda 3.8 compiled from sources and packaged for Fedora and Debian 
	until an official release.</li>
	</ul>
<P>
<i>
The following versions were tested with the compilers:</i>
<ul>
  <li>
<i>GNAT Pro 6.4.2 (20110614-4)</i></li>
	<li>
<i>GNAT 4.6.2 (20111027)</i></li>
  </ul>
<P>
<i>and the GtkAda versions:</i><ul>
	<li><i>GtkAda 2.24.0</i></li>
	<li><i>GtkAda 2.18.0</i></li>
	</ul>
	<P>
Changes&nbsp; (10 August 2012) to the version 2.13:<ul>
	<li>Bug fix in test_gtk_missed;</li>
	<li>Calls to C functions using variant argument lists worked around to 
	improve cross-platform compatibility.</li>
	</ul>
	<P>
Changes to the version 2.12:<ul>
	<li>Timeout parameter added to the procedure Send of the package 
	Generic_Message.</li>
	</ul>
	<P>
Changes to the version 2.11:<ul>
	<li>Bug fixes in Gtk.Missed (GIO bindings);</li>
	<li>Some class-wide operations of Gtk_Directory_Items_View_Record made 
	primitive for better usability;</li>
	<li>Documented operations provided by the package 
	Gtk.Tree_Model.Abstract_Store;</li>
	<li>The package Gtk.Abstract_Browser is re-implemented. It is no more uses 
	the GTK filtered store (which is presently broken).</li>
	</ul>
<P>
<i>
The following versions were tested with the compilers:</i><ul>
  <li>
<i>GNAT Pro 6.4.2 (20110614-4)</i></li>
	<li>
<i>GNAT 4.6.2 (20111027)</i></li>
  </ul>
<P>
<i>and the GtkAda versions:</i><ul>
	<li><i>GtkAda 2.18.0</i></li>
	</ul>
	<P>
Changes to the version 2.10:<ul>
	<li>Adaptation to 64-bit versions of Gtk and GtkAda.</li>
	</ul>
<P>
<i>
The following versions were tested with the compilers:</i>
<ul>
  <li>
<i>GNAT Pro 6.3.1 (20100111-43)</i></li>
	<li>
<i>GNAT 4.5.3 (20110419)</i></li>
  </ul>
<P>
<i>and the GtkAda versions:</i><ul>
	<li><i>GtkAda 2.14.2</i></li>
	<li><i>GtkAda 2.18.0</i></li>
	</ul>
	<P>
Changes to the version 2.9:<ul>
	<li>A variant of the procedure Set was added to the package Gtk.Handlers.References 
	to unset references explicitly;</li>
	<li>Added Has_Tooltip, Set_Has_Tooltip, Set_Tip to Gtk.Missed;</li>
	<li>Gtk.Handlers.Generic_Callback was added to support signal handlers with 
	return values handled as GValue;</li>
	<li>The package Gtk.Recent_Manager was renamed to Gtk.Recent_Manager_Alt to 
	keep it compatible to GtkAda 2.18.0. For earlier versions of GtkAda, 
	renaming packages are provided for backward compatibility;</li>
	<li>Gtk.Object.Checked_Destroy procedure added to safely destroy floating 
	widgets;</li>
	<li>The package
	Gtk.Recent_Manager_Keys provides simplified means to store and restore 
	values by key, store and restore contents of combo boxes.</li>
	</ul>
<P>
<i>
The following versions were tested with the compilers:</i><ul>
  <li>
<i>GNAT Pro 6.2.2 (20090612-43)</i></li>
	<li>
<i>GNAT 4.4.3 (20100127)</i></li>
  </ul>
<P>
<i>and the GtkAda versions:</i><ul>
	<li><i>GtkAda 2.14.0</i></li>
	<li><i>GtkAda 2.14.1</i></li>
	<li><i>GtkAda 2.14.2</i></li>
	</ul>
	<P>
Changes to the version 2.8:<ul>
	<li>Progress indication added to Gtk_Abstract_Directory_Record;</li>
	<li>Style_Get added to Gtk.Widget.Styles returning GValue by name;</li>
	<li>RGB convenience function was added to Gtk.Missed;</li>
	<li>Gtk.Generic_Enum_Combo_Box provides combo box widget created from an 
	enumeration type (contributed by Oliver Kellogg);</li>
	<li>The documentation links to the AdaCore on-line GtkAda Reference Manual 
	were fixed because the old reference manual is no longer available.</li>
	</ul>
	<P>
Changes to the version 2.7:<ul>
	<li>Dir_Open, Dir_Close, Dir_Rewind, Dir_Read_Name were added to Gtk.Missed 
	enumerate items of a directory;</li>
	<li>Remove, Rename were added to Gtk.Missed;</li>
	<li>File_Test was added to Gtk.Missed;</li>
	<li>GType_Icon was added to Gtk.Missed;</li>
	<li>GIO.Content_Type package provides bindings to platform-specific content 
	typing (GContentType);</li>
	<li>Directory browser supports content icons;</li>
	<li>Gtk.Missed declares a controlled type provided to ease showing a wait 
	cursor;</li>
	<li>Themed_Icon_New_With_Default_Fallbacks and Themed_Icon_New were added to Gtk.Missed;</li>
	<li>Packages GIO.Drive, GIO.Mount, GIO.Volume, GIO.Volume_Monitor were added 
	to support GIO..</li>
	</ul>
	<P>
Changes to the version 2.6:<ul>
	<li>Quit_Error exception is propagated from operation in Gtk.Main.Router 
	when the main loop was quitted. This change should ease proper application 
	completion, e.g. when the main loop is quitted before the tasks making 
	requests to GTK;</li>
	<li>Added GtkAda installation notes;</li>
	<li>Internal package Gdk.Pixbuf.Conversions was added to fix backward 
	incompatibility introduced by GtkAda 2.14.2;</li>
	<li>xpm2gtkada is modified to support GtkAda 2.14.2;</li>
	<li>Packaged for Debian and Fedora.</li>
	</ul>
<P>
<i>
The following versions were tested with the compilers:</i>
<ul>
  <li>
<i>GNAT Pro 6.2.2 (20090612-43)</i></li>
	<li>
<i>GNAT GPL 2009 (20090519)</i></li>
  </ul>
<P>
<i>and the GtkAda versions:</i><ul>
	<li><i>GtkAda 2.14.0</i></li>
	</ul>
	<P>
Changes to the version 2.5:<ul>
	<li>Indent procedure was added to Gtk.Main.Router.GNAT_Stack;</li>
	<li>Send of Gtk.Main.Router.Generic_Message changed to accommodate an in-out 
	parameter.</li>
	</ul>
	<P>
Changes to the version 2.4:<ul>
	<li>Relief_Style parameter and property style were added to Gtk.Generic_Style_Button;</li>
	<li>An instance of GLib.Generic_Properties.Generic_Enumeration_Property was 
	added to GLib.Properties.Relief_Style;</li>
	<li>Gtk.Widget.Styles.Relief_Style, an instance of Gtk.Widget.Styles.Generic_Enumeration 
	was added;</li>
	<li>Project source navigation in the GPS was added. From the tracing window one can 
	open locations specified in a GNAT call traceback in the GPS, when the later 
	is active and in the server mode;</li>
	<li>A signal was added to the abstract caching store, emitted upon store 
	refresh;</li>
	<li>Documentation was extended to describe debugging techniques of GTK+ 
	applications.</li>
	</ul>
<P>
<i>
The following versions were tested with the compilers:</i>
<ul>
  <li>
<i>GNAT Pro 6.2.1 (20090115-43)</i></li>
	<li>
<i>GNAT GPL 2009 (20090519)</i></li>
  </ul>
<P>
<i>and the GtkAda versions:</i><ul>
	<li><i>GtkAda 2.14.0</i></li>
	</ul>
	<P>
Changes to the version 2.3:<ul>
	<li>Translation of traceback into symbolic form by pasting from the 
	clipboard;</li>
	<li>Set_Selection and Reset_Selection were added to Gtk.Abstract_Browser;</li>
	<li>Get_Directory_Object and Get_Storage were added to 
	Gtk.Persistent_Storage_Browser;</li>
	<li>GtkSourceView bindings added..</li>
	</ul>
	<P>
Changes to the version 2.2:<ul>
	<li>Get_Class, Get_DSN and Get_Manager were added to Gtk.Persistent_Storage_Browser;</li>
	<li>Find_Program_In_Path, Get_Current_Dir, Get_PRGName and&nbsp;Is_In were added to Gtk.Missed;</li>
	<li>Subprograms for dealing file names were added to Missed: Build_Filename, Get_Basename, Get_Dirname, Get_Root, Get_User_Special_Dir, Is_Absolute, Skip_Root;</li>
	<li>Generic_Message was added to Gtk.Main.Router to provide asynchronous 
	execution requests;</li>
	<li>Gtk.Main.Router implementation was revised to ensure user-defined 
	callbacks to happen outside protected actions;</li>
	<li>Gtk.Main.Router tracing now uses text view widget. Outputs of different 
	Trace are colorized to make visually distinct;</li>
	<li>Get_Creation_Time, Get_Query,.Set_Query were added to Gtk.Persistent_Storage_Browser;</li>
	<li>GLib.Spawn, GLib.Spawn.Asynchronous, GLib.Spawn.Text_Bufferred provide bindings to GTK+ process spawning facilities;</li>
	<li>Installation instructions added.</li>
	</ul>
	<P>
Changes to the version 2.1:<ul>
	<li>This version was adapted to GtkAda 2.10.2;</li>
	<li>In order to improve security Gtk.Persistent_Storage_Browser wipes 
	password strings it creates before their deallocation;</li>
	<li>Gtk.Tree_Model.Columned_Store contains Is_Ancestor and Is_Descendant 
	functions;</li>
	<li>Gtk.Tree_Model.Columned_Store supports a mode without a reference model;</li>
	<li>Gtk.Tree_Model.Extension_Store supports reference model change;</li>
	<li>Get_Directory_Cache is added to Gtk.Persistent_Storage_Browser;</li>
	<li>Procedure Set is added to GLib.Object.Weak_References;</li>
	<li>Bug fix in GLib.Object.Strong_References and Weak_References;</li>
	<li>Get_Current_Object, Get_Current_Storage, Get_Path added to 
	Gtk.Persistent_Storage_Browser.</li>
	</ul>
<P>
<i>
The following versions were tested with the compilers:</i>
<ul>
  <li>
<i>GNAT 4.1.2 20070502;</i></li>
	<li>
<i>GNAT GPL 2007 (20070405-41).</i></li>
  </ul>
<P>
<i>and the GtkAda versions:</i><ul>
	<li><i>GtkAda GPL 2.10.0.</i></li>
	</ul>
<blockquote>
	<blockquote>
		<p><i>Necessary notes</i>. GtkAda GPL 2.10.0.has not yet been officially 
		released for Windows platform. An unofficial release of can be found 
		at <a href="http://www.ada-ru.org/win_bin_en">www.ada-ru.org/win_bin_en</a> thanks to Maxim Reznik, who compiled it from sources. For Linux GtkAda GPL 
		2.10.0 is officially available in <a href="https://libre2.adacore.com">
		sources</a> and can be routinely compiled from.</p>
	</blockquote>
</blockquote>
	<P>
Changes to the version 2.0:<ul>
	<li>Gtk.Tree_Model.Columned_Store package was added to provide derived 
	columned models;</li>
	<li>Gtk.Tree_Model.Extension_Store package was added to provide derived 
	models by adding new columns to the base model;</li>
	<li>Gtk.Abstract_Browser package was added to provide abstract caching tree 
	view models of directory-like hierarchies of items. It also provides 
	specialized tree view widget for rendering directory tree structures and 
	columned directory items.views;</li>
	<li>Gtk.Directory_Browser package provides an implementation of caching tree 
	view model interfacing with Ada.Directories and a MS-Explorer-like widget to 
	work with;</li>
	<li>Gtk.Persistent_Storage_Browser package provides an implementation of 
	caching tree view for browsing persistent object storages;</li>
	<li>Get_Column_No was added to Gtk.Missed for obtain the column number from 
	Gtk_Tree_View_Column;</li>
	<li>Get_Row_No was added to Gtk.Missed for obtain the row number from Gtk_Tree_Model;</li>
	<li>Compare, Is_In, Is_Parent were added to.Gtk.Missed for comparisons of tree model's paths 
	and iterators. The comparison is <font color="#0000FF">null</font>-/Null_Iter-safe;</li>
	<li>Get_Column was added to Gtk.Missed&nbsp; to deal with Gtk_Tree_View_Column 
	parameters of event handlers;</li>
	<li>Keyval_To_Unicode and Unicode_To_Keyval were added to Gtk.Missed;</li>
	<li>Get_Application_Name was added to Gtk.Missed;</li>
	<li>Gtk.Enums.String_Lists was added for matching wildcard patterns;</li>
	<li>Set_Log_Trace was added to Gtk.Main.Router.GNAT_Stack for tracing GLib 
	log messages;</li>
	<li>Gtk.Recent_Manager package was added to interface GtkRecentManager;</li>
	<li>Set_Object was added to GLib.Values.Handling for storing an object into 
	a GValue.</li>
	</ul>
<P>
Changes to the version 1.8:<ul>
	<li>Class_Install_Style_Property and Style_Get_Property were removed from 
	Gtk.Widget.Styles as they are provided by GtkAda 2.10;</li>
	<li>Get_Position, Move, Move_After, Move_Before, Set_Default, Set_Expand 
	were removed for Gtk.Missed for the same reason as above;</li>
	<li>Class_From_Type was added to Gtk.Missed because it is no more provided 
	in GtkAda 2.10.</li>
	</ul>
<P>
<i>
The following versions were tested with the compilers:</i>
<ul>
  <li>
<i>GNAT 4.1.2 20070502;</i></li>
	<li>
<i>GNAT GPL 2007 (20070405-41)</i></li>
  </ul>
<P>
<i>and the GtkAda versions:</i><ul>
	<li><i>GtkAda GPL 2.8.0</i></li>
	</ul>
	<P>
Changes to the version 1.7:<ul>
	<li>GLib.Object.Ref_Count function was added to obtain object's reference 
	count;</li>
	<li>Get_Tooltips was added to Gtk_Style_Button;</li>
	<li>Gtk.Main.Router.GNAT_Stack was added for symbolic traceback..</li>
	</ul>
	<P>
Changes to the version 1.6:<ul>
	<li>Trace was added to Gtk.Main.Router;</li>
	<li>Erase was added to Gtk.Missed to remove all items of a container;</li>
	<li>Get_Visible_Range was added to Gtk.Missed to determine the range of 
	visible rows in a tree view;</li>
	<li>The function Get_Background_Area was added Gtk.Missed to replace 
	incorrent implementation of Gtk.Tree_View.</li>
	</ul>
	<P>
Changes to the version 1.5:<ul>
	<li>Move_After and Move_Before missing in Gtk.Tree_Store were added to 
	Gtk.Missed;</li>
	<li>Set_Expand missing in Gtk.Tree_View_Column was added to Gtk.Missed;</li>
	<li>Is_A missing in GLib was added to Gtk.Missed;</li>
	<li>Gtk.Enums.String_Lists was added for simplified creation of constant 
	lists of strings;</li>
	<li>GLib.Object.Strong_References and GLib.Object.Weak_References were added 
	to provide controlled wrappers around GTK+ strong and weak references;</li>
	<li>Gtk.Handlers.References was added to provide references to signal 
	handlers which disconnect the handler's callback upon finalization:</li>
	<li>Class_List_Properties was added to the package Gtk.Widget.Styles;</li>
	<li>Gtk.Widget.Styles.Store was added for capturing property styles of a 
	widget;</li>
	<li>For GNAT users GPS project files were added;</li>
	<li>Bug fix in editable renderers which caused exception propagation upon 
	keyboard initiated editing;</li>
	<li>Bug fix in Gtk.Widget.Styles which prevented reading Gdk_Color properly.</li>
	</ul>
<P>
<i>
The following versions were tested with the compilers:</i>
<ul>
  <li>
<i>GNAT 4.1.1 20070105;</i></li>
	<li>
<i>GNAT GPL 2006 (20060522-34)</i></li>
  </ul>
<P>
<i>and the GtkAda versions:</i><ul>
	<li><i>GtkAda GPL 2.8.0</i></li>
	</ul>
	<P>
Changes to the version 1.4:<ul>
	<li>Ada 2005 conformance;</li>
	<li>GLib.Values.Handling added for dealing with GLib values;</li>
	<li>Gdk.Color.IHLS package added to deal with the improved HLS color model;</li>
	<li>Gtk.Generic_Style_Button for creation customizable buttons controlled by style 
	properties;</li>
	<li>Editable custom cell renderers.</li>
	</ul>
	<P>
Changes to the version 1.3:<ul>
	<li>GTK+ widget and dialogs for measurement unit selection;</li>
	<li>.A fully annotated example of custom tree model is provided.</li>
	</ul>
<P>
<i>
The following versions were tested with the compilers:</i>
<ul>
  <li>
<i>
GNAT 2005, GCC 4.0.2 (20051125);</i></li>
  <li><i>GNAT 3.15p.</i></li></ul>
<P>
<i>and the GtkAda:</i><ul>
	<li><i>GtkAda GPL 2.8.0</i></li>
	</ul>
	<P>
Changes to the version 1.2:<ul>
	<li>Package Gtk.Missed was contributed by Maxim Reznik. It contains Window 
	management routines and a replacement for GLib.Properties.Set_Property with 
	GFloat argument.</li>
	<li>xpm2gtkada was extended to provide Pixbuf-based images;</li>
	<li>Simple component object can be put into GValues.</li>
	</ul>
	<P>
Changes to the version 1.1:<ul>
	<li>Resource file styles support;</li>
	<li>The utility XPM2GtkAda is provided for embedding images into GtkAda 
	applications.</li>
	</ul>
	<P>
Changes to the version 1.0:<ul>
	<li>The package Gtk.Cell_Renderer_Fixed added;</li>
	<li>Annotated source Gtk.Cell_Renderer_Fixed and a test program to use it.</li>
	</ul>
<P>
<i>
The following versions were tested with the compilers:</i>
<ul>
  <li>
<i>
GNAT 2005, GCC 4.0.2 (20051125);</i></li>
  <li><i>GNAT 3.15p.</i></li>
</ul>
<P>
<i>and the GtkAda:</i><ul>
	<li><i>GtkAda 2.4.0</i></li>
	</ul>
	<P>
The version 1.0.<HR>
<H2 align="right">
  <a name="14"></a><a href="#13"><IMG src="prev.gif" alt="[Back]" width="29" height="29"></a><a href="#14"><IMG src="index.gif" alt="[TOC]" width="29" height="29"></a></H2>
<H2>14. Table of Contents</H2>
<table border="0" cellpadding="0" cellspacing="20">
	<tr>
		<td valign="top">
<b><big><big>1</big></big></b> <A href="#1"><big>Tasking with GTK+</big></A><BR>
&nbsp;&nbsp;&nbsp; <A href="#1.1">1.1. Example</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#1.2">1.2. Debugging tools</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#1.3">1.3. GNAT-specific debugging tools</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#1.4">1.4. Translation of addresses into the source lines</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#1.5">1.5. Source navigation</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#1.6">1.6. Debugging GTK+ programs</A><hr>
<b><big><big>2</big></big></b> <A href="#2"><big>GTK+ tree view</big></A><BR>
&nbsp;&nbsp;&nbsp; <A href="#2.1">2.1. Abstract custom model</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.1.1">2.1.1. Custommodel example</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#2.2">2.2. Generic sortable model</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#2.3">2.3. Custom cell renderer</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#2.4">2.4. Editable renderers</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#2.5">2.5. Fixed-point renderer</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#2.6">2.6. Columned model</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#2.7">2.7. Extension model</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#2.8">2.8. Abstract browser model and widgets</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.8.1">2.8.1. Abstract caching store</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.8.2">2.8.2. Directory tree veiw</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.8.3">2.8.3. Directory items view</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#2.9">2.9. Files directory cache and a browsing widget</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.9.1">2.9.1. Files directory cache</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.9.2">2.9.2. Files directory browsing widget</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.9.3">2.9.3. Wildcard browsing widget</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#2.10">2.10. Persistent storage cache and browsing widget</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.10.1">2.10.1. Paths, URI, Credentials</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.10.2">2.10.2. Cache</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.10.3">2.10.3. Persistent storage tree view</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.10.4">2.10.4. Persistent storage objects view</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.10.5">2.10.5. Persistent storage browsing widget</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.10.6">2.10.6. User credentials input</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.10.7">2.10.7. User credentials input for GNADE</A><hr>
<b><big><big>3</big></big></b>&nbsp;<A href="#3"><big>Embeddable images</big></A><br>
&nbsp;&nbsp;&nbsp; <A href="#3.1">3.1. Building xpm2gtkada from the source</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#3.2">3.2. Usage of xpm2gtkada</A><br>
&nbsp;&nbsp;&nbsp; <A href="#3.3">3.3. Memory-mapped images</A><hr>
<b><big><big>4</big></big></b>&nbsp;<A href="#4"><big>Style properties</big></A><br>
&nbsp;&nbsp;&nbsp; <A href="#4.1">4.1. Installing style properties</A><br>
&nbsp;&nbsp;&nbsp; <A href="#4.2">4.2. Querying style properties</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#4.3">4.3. Querying enumerations</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#4.4">4.4. Other subprograms</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#4.5">4.5. Capturing style properties of a widget</A><BR>
</td><td valign="top">
<b><big><big>5</big></big></b>&nbsp;<A href="#5"><big>Missing stuff</big></A><br>
&nbsp;&nbsp;&nbsp; <A href="#5.1">5.1. Handling GTK+ values</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#5.2">5.2. Controlled strong and weak GTK+ references</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#5.3">5.3. Controlled references to signal handlers (closures)</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#5.4">5.4. Managing recently used files (GtkRecentManager)</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#5.4.1">5.4.1. Key to value mapping</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#5.5">5.5. Source view (GtkSourceView)</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#5.6">5.6. Platform-specific content typing (GContentType)</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#5.7">5.7. Mounts (GMount)</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#5.8">5.8. Volumes (GVolume)</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#5.9">5.9. Drives (GDrive)</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#5.10">5.10. Volume monitor (GVolumeMonitor)</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#5.11">5.11. Generic signal handlers</A><br>
&nbsp;&nbsp;&nbsp; <A href="#5.12">5.12. Stock items backward compatibility</A><hr>
<b><big><big>6</big></big></b>&nbsp;<A href="#6"><big>Handles as GTK+ values</big></A><hr>
<b><big><big>7</big></big></b>&nbsp;<A href="#7"><big>Unit selection widget and dialogs</big></A><hr>
<b><big><big>8</big></big></b>&nbsp;<A href="#8"><big>Improved HLS color model</big></A><hr>
<b><big><big>9</big></big></b>&nbsp;<A href="#9"><big>Buttons</big></A><br>
&nbsp;&nbsp;&nbsp; <A href="#9.1">9.1. Buttons with icons</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#9.2">9.2. Buttons controlled by style properties</A><hr>
<b><big><big>10</big></big></b>&nbsp;<A href="#10"><big>Spawning processes</big></A><br>
&nbsp;&nbsp;&nbsp; <A href="#10.1">10.1. Spawning process with pipes</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#10.2">10.2. Text-buffered pipes</A><hr>
<b><big><big>11</big></big></b>&nbsp;<A href="#11"><big>Helper compilation units</big></A><br>
&nbsp;&nbsp;&nbsp; <A href="#11.1">11.1. Constant lists of strings</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#11.2">11.2. Wildcard patterns</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#11.3">11.3. Object's reference count</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#11.4">11.4. Enumeration combo box</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#11.5">11.5. Resizing custom drawn widgets</A><hr>
<b><big><big>12</big></big></b>&nbsp;<A href="#12"><big>Installation</big></A><br>
&nbsp;&nbsp;&nbsp; <A href="#12.1">12.1. Using the source distribution</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#12.2">12.2. GtkAda distributions</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#12.3">12.3. Debian and Fedora packages</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#12.4">12.4. Fedora packages repository</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#12.5">12.5. Debian packages repository</A><hr>
<b><big><big>13</big></big></b>&nbsp;<A href="#13"><big>Changes log</big></A><hr>
<b><big><big>14</big></big></b>&nbsp;<A href="#14"><big>Table of contents</big></A></td>
	</tr>
</table>
</BODY>
</HTML>
