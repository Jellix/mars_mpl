<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<HTML lang="en">
<HEAD>
<link REL="SHORTCUT ICON" href="http://www.dmitry-kazakov.de/favicon.ico">
<TITLE>Ada industrial control widget library</TITLE>
<meta http-equiv="Content-Style-Type" content="text/css">
<meta http-equiv="Content-Type" content="text/html; charset=us-ascii">
<META name="keywords" content="Cairo, Gtk, Gtk+, gtkada, cairoada, Ada, Ada 95, Ada programming, gauge, clock, speedometer, widget, oscillograph, oscilloscope, gtk oscilloscope, cairo oscilloscope, graph paper, real-time graph, waveform, plot, thermometer">
<META name="Author" content="Dmitry Kazakov">
<META name="Description" content="Ada industrial control widget library">
</HEAD>
<BODY bgcolor="#FFFFFF" link="#0000FF" vlink="#800080">
<P align="center">
<font size="6"><b>ADA INDUSTRIAL CONTROL WIDGET LIBRARY</b></font><BIG><br>
<EM>version 3.15</EM></BIG><br>
<div align="center">
<table border="0" cellspacing="0" cellpadding="0">
	<tr>
		<td align="center">
<BIG>Dmitry A. Kazakov</BIG></td>
	</tr>
	<tr>
		<td align="center">(<A HREF="mailto:mailbox@dmitry-kazakov.de">mailbox@dmitry-kazakov.de</A>)</td>
	</tr>
	<tr>
		<td align="center">
<a href="http://www.dmitry-kazakov.de"><img border="0" src="home.jpg" alt="[Home]" width="40" height="40"></a></td>
	</tr>
</table>
</div>
<P>
This library is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version. This library is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE. See the
<a href="http://www.gnu.org/licenses/gpl.html">GNU General Public License</a>
for more details. You should have received a copy of the GNU General Public
License along with this library; if not, write to the Free Software Foundation,
Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.</P>
<P>
As a special exception, if other files instantiate generics from this unit, or
you link this unit with other files to produce an executable, this unit does not
by itself cause the resulting executable to be covered by the GNU General Public
License. This exception does not however invalidate any other reasons why the
executable file might be covered by the GNU Public License.</P>
<hr>
<table border="0" cellspacing="0" cellpadding="0" style="border-top-width: 0px; border-bottom-width: 0px">
	<tr>
		<td style="border-top-style: none; border-top-width: medium; border-bottom-style:none; border-bottom-width:medium" colspan="3">
		&nbsp;</td>
		<td style="border-top-style: none; border-top-width: medium; border-bottom-style:none; border-bottom-width:medium" align="right">
		&nbsp;</td>
		<td>&nbsp;</td>
		<td align="center">ARM</td>
		<td align="center" colspan="2">Intel</td>
	</tr>
	<tr>
		<td style="border-top-style: none; border-top-width: medium; border-bottom-style:none; border-bottom-width:medium" colspan="3">
		<b>Download AICWL</b></td>
		<td style="border-top-style: none; border-top-width: medium; border-bottom-style:none; border-bottom-width:medium" align="right">
		<b>Platform:</b></td>
		<td>&nbsp;</td>
		<td align="center">v7</td>
		<td align="center">64-</td>
		<td align="center">32bit</td>
	</tr>
	<tr>
		<td style="border-top-style: solid; border-top-width: 1px">
		<a name="fedora_packages"></a>Fedora packages	
		<img border="0" src="fedora-logo.jpg" width="16" height="16" alt="fedora"></td>
		<td style="border-top-style: solid; border-top-width: 1px">&nbsp;</td>
		<td style="border-top-style: solid; border-top-width: 1px" colspan="2">precompiled and packaged using RPM (see also release notes on the download page, for limitations of the packaged distribution)</td>
		<td>&nbsp;</td>
		<td align="right">
		<a href="http://www.dmitry-kazakov.de/distributions/aicwl_fedora_armv7hl.htm"><img src="in.jpg" align=middle alt="[Download page]" width="29" height="29"></a></td>
		<td align="center"><a href="http://www.dmitry-kazakov.de/distributions/aicwl_fedora_x86_64.htm"><img src="in.jpg" align=middle alt="[Download page]" width="29" height="29"></a></td>
		<td align="center"><a href="http://www.dmitry-kazakov.de/distributions/aicwl_fedora_i686.htm"><img src="in.jpg" align=middle alt="[Download page]" width="29" height="29"></a></td>
	</tr>
	<tr>
		<td style="border-top-style: solid; border-top-width: 1px">
		<a name="centos_packages"></a>CentOS packages	
		<img border="0" src="centos-logo.jpg" width="16" height="16" alt="CentOS"></td>
		<td style="border-top-style: solid; border-top-width: 1px">&nbsp;</td>
		<td style="border-top-style: solid; border-top-width: 1px" colspan="2">precompiled and packaged using RPM (see also release notes on the download page, for limitations of the packaged distribution)</td>
		<td>&nbsp;</td>
		<td align="right">&nbsp;</td>
		<td align="center"><a href="http://www.dmitry-kazakov.de/distributions/centos/aicwl_centos_x86_64.htm"><img src="in.jpg" align=middle alt="[Download page]" width="29" height="29"></a></td>
		<td align="center"><a href="http://www.dmitry-kazakov.de/distributions/centos/aicwl_centos_i686.htm"><img src="in.jpg" align=middle alt="[Download page]" width="29" height="29"></a></td>
	</tr>
	<tr>
		<td style="border-top-style: solid; border-top-width: 1px; border-bottom-style: solid; border-bottom-width: 1px">
		<a name="debian_packages"></a>Debian packages	<img border="0" src="debian-logo.jpg" width="16" height="16" alt="debian"></td>
		<td style="border-top-style: solid; border-top-width: 1px; border-bottom-style: solid; border-bottom-width: 1px">&nbsp;</td>
		<td style="border-top-style: solid; border-top-width: 1px; border-bottom-style: solid; border-bottom-width: 1px" colspan="2">precompiled and packaged for dpkg (see also release notes on the download page, for limitations of the packaged distribution)</td>
		<td>&nbsp;</td>
		<td align="right"><a href="http://www.dmitry-kazakov.de/distributions/aicwl_debian_armhf.htm"><img src="in.jpg" align=middle alt="[Download page]" width="29" height="29"></a></td>
		<td align="center"><a href="http://www.dmitry-kazakov.de/distributions/aicwl_debian_x86_64.htm"><img src="in.jpg" align=middle alt="[Download page]" width="29" height="29"></a></td>
		<td align="center"><a href="http://www.dmitry-kazakov.de/distributions/aicwl_debian_i686.htm"><img src="in.jpg" align=middle alt="[Download page]" width="29" height="29"></a></td>
	</tr>
	<tr>
		<td style="border-bottom-style: solid; border-bottom-width: 1px">Source distribution (any platform)</td>
		<td style="border-bottom-style: solid; border-bottom-width: 1px">&nbsp;</td>
		<td style="border-top-style: none; border-top-width: medium; border-bottom-style: solid; border-bottom-width: 1px">
		<a href="http://www.dmitry-kazakov.de/ada/aicwl_3_15.tgz">aicwl_3_15.tgz</a> (<b>tar</b> +
		<b>gzip</b>, Windows users may use WinZip)</td>
		<td style="border-top-style: none; border-top-width: medium; border-bottom-style: solid; border-bottom-width: 1px">&nbsp;</td>
		<td>&nbsp;</td>
		<td align="center">&nbsp;</td>
		<td align="center"><a href="http://www.dmitry-kazakov.de/ada/aicwl_3_15.tgz.tgz"><img src="download.jpg" align=middle alt="[Download]" width="29" height="29"></a></td>
		<td align="center">&nbsp;</td>
	</tr>
	</table>
<HR>
<P align="left">
The described here packages are provided for design high-quality industrial 
control widgets for Ada applications. The software is based on
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm">GtkAda</a>, Ada bindings to
<a href="http://www.gtk.org">GTK+</a> and  
<a href="http://cairographics.org/manual/index.html">cairo</a>. The key features 
of the library:</p>
<ul>
	<li>Widgets composed of transparent layers drawn by <a href="http://cairographics.org/manual/index.html">cairo</a>;</li>
	<li>Fully scalable graphics;</li>
	<li>Support of time controlled refresh policy for real-time and heavy-duty applications;</li>
	<li>Caching graphical operations;</li>
	<li>Stream I/O support for serialization and deserialization;</li>
	<li>Ready-to-use gauge, meter, oscilloscope widgets;</li>
	<li>Editor widget for WYSIWYG design of complex dashboards.</li>
</ul>
<P align="left">
See also <a href="#changes_log">changes log</a>.</p>
<P align="right">
<A name="1"></A><a href="#16"
><IMG src="index.gif" alt="[TOC]" width="29"
    height="29"></a><a href="#2"><IMG src="next.gif" alt="[Next]" width="29"
    height="29"></a></p>
<H2>1. Widgets gallery</H2>
<p><a name="widget_galery"></a>The widget gallery shows some examples of widgets implemented using the 
library. These are provided rather as usable samples due to variability of 
requirements on the style used in projects. The implementations are very 
straightforward and can be used as templates for customization.</p>
<H3><a name="1.1"></a>1.1. Gauges</H3>
<table border="0" cellspacing="10">
	<tr>
		<td align="center">
		<img border="0" src="gtk_gauge_round_254.png" width="246" height="246" alt="gauge round 254"><br>
		<a href="#Gtk.Gauge.Round_254">Gtk_Gauge_Round_254</a></td>
		<td align="center">
		<img border="0" src="gtk_gauge_round_270_reversed.png" width="246" height="246" alt="gauge round 270 reversed"><br>
		<a href="#Gtk.Gauge.Round_270_Reversed">Gtk_Gauge_Round_270_Reversed</a></td>
	</tr>
	<tr>
		<td align="center">
		<img border="0" src="gtk_gauge_round_270.png" width="246" height="246" alt="gauge round 270"><br>
		<a href="#Gtk.Gauge.Round_270">Gtk_Gauge_Round_270</a></td>
		<td align="center">
		<img border="0" src="gtk_gauge_round_270_inout.png" width="246" height="246" alt="gauge round 270 inout"><br>
		<a href="#Gtk.Gauge.Round_270_Inout">Gtk_Gauge_Round_270_Inout</a></td>
	</tr>
	<tr>
		<td align="center">
		<img border="0" src="gtk_gauge_round_270_out.png" width="226" height="226" alt="gauge round 270 out"><br>
		<a href="#Gtk.Gauge.Round_270_Outer">Gtk_Gauge_Round_270_Outer</a></td>
		<td align="center">
		<img border="0" src="gtk_gauge_round_270_60s.png" width="226" height="226" alt="gauge round 270 60s"><br>
		<a href="#Gtk.Gauge.Round_270_60s">Gtk_Gauge_Round_270_60s</a></td>
	</tr>
</table>
<H3><a name="1.2"></a>1.2. Sectors and segments</H3>
<table border="0" cellspacing="10">
	<tr>
		<td align="center">
		<img border="0" src="gtk_gauge_round_180.png" width="243" height="136" alt="gauge round 180"><br>
		<a href="#Gtk.Gauge.Round_180">Gtk_Gauge_Round_180</a></td>
		<td align="center">
		<img border="0" src="gtk_gauge_elliptic_180.png" width="246" height="137" alt="gauge elliptic 180"><br>
		<a href="#Gtk.Gauge.Elliptic_180">Gtk_Gauge_Elliptic_180</a></td>
	</tr>
	<tr>
		<td align="center">
		<img border="0" src="gtk_gauge_round_90.png" width="249" height="154" alt="gauge round 90"><br>
		<a href="#Gtk.Gauge.Round_90">Gtk_Gauge_Round_90</a></td>
		<td align="center">&nbsp;</td>
	</tr>
	<tr>
		<td align="center" colspan="2">
		<img border="0" src="gtk_gauge_round_110.png" width="415" height="112" alt="gauge round 110"><br>
		<a href="#Gtk.Gauge.Round_110">Gtk_Gauge_Round_110</a></td>
	</tr>
</table>
<H3><a name="1.3"></a>1.3. Meters</H3>
<table border="0" cellspacing="10">
	<tr>
		<td align="center">
		<img border="0" src="gtk_meter_angular_90.png" width="283" height="284" alt="meter angular 90"><br>
		<a href="#Gtk.Meter.Angular_90">Gtk_Meter_Angular_90</a></td>
		<td align="center">
		<img border="0" src="gtk_meter_round_94.png" width="262" height="218" alt="meter round 94"><br>
		<a href="#Gtk.Meter.Round_94">Gtk_Meter_Round_94</a></td>
	</tr>
	<tr>
		<td align="center">
		<img border="0" src="gtk_meter_elliptic_90.png" width="283" height="148" alt="meter elliptic 90"><br>
		<a href="#Gtk.Meter.Elliptic_90">Gtk_Meter_Elliptic_90</a></td>
		<td align="center">
		<img border="0" src="gtk_meter_round_90.png" width="283" height="148" alt="meter round 90"><br>
		<a href="#Gtk.Meter.Round_90">Gtk_Meter_Round_90</a></td>
	</tr>
	</table>
<table border="0" cellspacing="10">
	<tr>
		<td align="center">
		<img border="0" src="gtk_meter_thermo.png" width="142" height="425" alt="meter thermo"><br>
		<a href="#Gtk.Meter.Thermo">Gtk.Meter.Thermo</a></td>
		<td align="center">
		<img border="0" src="gtk_meter_thermo_symmetric.png" width="143" height="426" alt="meter thermo symmetric"><br>
		<a href="#Gtk.Meter.Thermo_Symmetric">Gtk_Meter_Thermo_Symmetric</a></td>
		<td align="center">
		<img border="0" src="gtk_meter_thermo_dual.png" width="142" height="426" alt="meter thermo dual"><br>
		<a href="#Gtk_Meter_Thermo_Dual">Gtk_Meter_Thermo_Dual</a></td>
	</tr>
	</table>
<H3><a name="1.4"></a>1.4. Flat and rectangular</H3>
<table border="0" cellspacing="10">
	<tr>
		<td align="center">
		<img border="0" src="gtk_gauge_rectangular_70s.png" width="369" height="104" alt="gauge rectangular 70s"><br>
		<a href="#Gtk.Gauge.Rectangular_70s">Gtk_Gauge_Rectangular_70s</a></td>
		<td align="center" rowspan="3">
		<img border="0" src="gtk_gauge_flat_vertical.png" width="159" height="446" alt="gauge flat vertical"><br>
		<a href="#Gtk.Gauge.Flat_Vertical">Gtk_Gauge_Flat_Vertical</a></td>
	</tr>
	<tr>
		<td align="center">
		<img border="0" src="gtk_gauge_rectangular_70s_slanted.png" width="369" height="104" alt="gauge rectangular 60s slanted"><br>
		<a href="#Gtk.Gauge.Rectangular_70s_Slanted">Gtk_Gauge_Rectangular_70s_Slanted</a></td>
	</tr>
	<tr>
		<td align="center">
		<img border="0" src="gtk_gauge_flat_horizontal.png" width="349" height="114" alt="gauge flat horizontal"><br>
		<a href="#Gtk.Gauge.Flat_Horizontal">Gtk_Gauge_Flat_Horizontal</a></td>
	</tr>
</table>
<H3><a name="1.5"></a>1.5. Wall clocks</H3>
<table border="0" cellspacing="10">
	<tr>
		<td align="center">
		<img border="0" src="gtk_clock_imperial.png" width="243" height="244" alt="clock imperial"><br>
		<a href="#Gtk.Wall_Clock.Imperial">Gtk_Wall_Clock_Imperial</a></td>
		<td align="center">
		<img border="0" src="gtk_clock_modern.png" width="243" height="244" alt="clock modern"><br>
		<a href="#Gtk.Wall_Clock.Modern">Gtk_Wall_Clock_Modern</a></td>
	</tr>
	<tr>
		<td align="center">
		<img border="0" src="gtk_clock_classic.png" width="243" height="244" alt="clock classic"><br>
		<a href="#Gtk.Wall_Clock.Classic">Gtk_Wall_Clock_Classic</a></td>
		<td align="center">&nbsp;</td>
	</tr>
</table>

<H3><a name="1.6"></a>1.6. Oscilloscope</H3>
<table border="0" cellspacing="10">
	<tr>
		<td align="center">
		<img border="0" src="oscilloscope-stack.png" width="450" height="659" alt="oscilloscope stack"><br>
		<a href="#Gtk.Oscilloscope">Gtk_Oscilloscope</a></td>
	</tr>
	</table>

<H3><a name="1.7"></a>1.7. LEDs</H3>
<table border="0" cellspacing="10">
	<tr>
		<td align="center">
		<img border="0" src="gtk_gauge_led_round.png" width="231" height="43" alt="gauge led round"><br>
		<a href="#Gtk.Gauge.LED_Round">Gtk_Gauge_Led_Round</a></td>
		<td align="center">
		<img border="0" src="gtk_gauge_led_rectangular.png" width="231" height="43" alt="gauge led rectangular"><br>
		<a href="#Gtk.Gauge.LED_Rectangular">Gtk_Gauge_Led_Rectangular</a></td>
	</tr>
	</table>

<hr><p align="right">
  <A name="2"></A><a href="#1"><IMG src="prev.gif" alt="[Back]" width="29" height="29"></a><a href="#16"
><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></a><a href="#3"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H2>2. Layered widget</H2>
<p>Layered widget is a <a href="http://www.gtk.org">GTK+</a> widget 
encapsulating stacked layers performing 
<a href="http://cairographics.org/manual/index.html">cairo</a> drawing 
operations when the widget is redrawn. The widget can implement a single gauge, 
but it is not necessary. One widget can well implement the whole dashboard.</p>
<H3><a name="2.1"></a>2.1. Anatomy of a gauge</H3>
<p>A gauge consists of several superimposed transparent layers:</p>
<blockquote>
	<p><img border="0" src="gauge_anatomy.png" width="581" height="558" alt="gauge anatomy"></p>
</blockquote>
<p>The layers are stacked up on each other.</p>

<H3><a name="2.2"></a>2.2. Abstract layer</H3>
<p>The type
<a href="#Gtk.Layered.Abstract_Layer">Abstract_Layer</a> declared in the package 
Gtk.Layered is the base type of all layers of a layered widget:</p>
		<blockquote>
<p><a name="Gtk.Layered.Abstract_Layer"></a><tt><font color="#0000FF">type </font>Abstract_Layer<font color="#0000FF"> is<br>
&nbsp;&nbsp; abstract new </font>Ada.Finalization.Limited_Controlled<font color="#0000FF"><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; and </font>
Layer_Object<font color="#0000FF"><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; and </font>
Layer_Location<font color="#0000FF"> with private;</font></tt></p>
</blockquote>
<p>The type
<a href="#Gtk.Layered.Abstract_Layer">Abstract_Layer</a> implements the 
interfaces <a href="#Gtk.Layered.Layer_Location">Layer_Location</a> and 
<a href="#Gtk.Layered.Layer_Object">Layer_Object</a>.</p>
		<h4><a name="2.2.1"></a>2.2.1. Primitive operations</h4>
		<p>The following primitive operations are provided by
		<a href="#Gtk.Layered.Abstract_Layer">Abstract_Layer</a>: </p>

		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Layered.Above"></a>function </font>Above (<b>Layer</b> : 
Abstract_Layer)<font color="#0000FF"><br>
&nbsp;&nbsp; return access </font>Abstract_Layer'Class;</tt></p>
</blockquote>
		<p>This function returns the layer above <b>Layer</b> or
		<font color="#0000FF">null</font> if <b>Layer</b> is the topmost layer
		of the widget.</p>

		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Layered.Atop"></a>function </font>Atop (<b>Layer</b> : 
Abstract_Layer)<font color="#0000FF"><br>
&nbsp;&nbsp; return not null access </font>Layer_Location'Class;</tt></p>
</blockquote>
		<p>This function returns the location atop <b>Layer</b>. 
		Constraint_Error is propagated when <b>Layer</b> does not belong to any 
		widget.</p>

		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Layered.Below"></a>function </font>Below (<b>Layer</b> : 
Abstract_Layer)<font color="#0000FF"><br>
&nbsp;&nbsp; return access </font>Abstract_Layer'Class;</tt></p>
</blockquote>
		<p>This function returns the layer below <b>Layer</b> or
		<font color="#0000FF">null</font> if <b>Layer</b> is the deepest layer 
		of the widget.</p>

		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Finalize (Layer :
<font color="#0000FF">in out</font> Abstract_Layer);</tt></p>
</blockquote>
		<p>This procedure performs finalization of the layer. When overridden it 
		must be called from the override.</p>

		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Position (<b>Layer</b> : 
Abstract_Layer) <font color="#0000FF">return</font> Natural;</tt></p>
</blockquote>
		<p>This function returns the layer's position or else 0, when the layer 
		does not belong to any widget.</p>

		<blockquote>
<p><tt><a name="Gtk.Layered.Is_Caching"></a><font color="#0000FF">function</font> 
Is_Caching (<b>Layer</b> : Abstract_Layer) <font color="#0000FF">return</font> 
Boolean;</tt></p>
</blockquote>
		<p>This function returns <i><font color="#800000">true</font></i> if the 
		layer performs caching of the underlying layers. Caching layers receive 
		special treatment upon drawing. The default implementation returns <i>
		<font color="#800000">false</font></i>.</p>

		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Property_Set<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b> :
<font color="#0000FF">in out</font> Abstract_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Param</b> : Param_Spec<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is null</font>;</tt></p>
</blockquote>
		<p>This procedure is called when a property of the widget is set. The 
		parameter <b>Param</b> describes the property. The layer may change some 
		of its data when necessary. The default implementation does nothing.</p>
<blockquote>
<p><tt><font color="#0000FF">function </font>Get_Widget (<b>Layer</b> : 
Abstract_Layer)<font color="#0000FF"><br>
&nbsp;&nbsp; return not null access</font> Gtk_Layered_Record'Class;</tt></p>
</blockquote>
		<p>This function returns the widget of the layer.</p>

		<blockquote>
<p><tt><font color="#0000FF">procedure</font> 
Prepare<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Abstract_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Context</b> 
: Cairo_Context;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Area</b>&nbsp;&nbsp;&nbsp; 
: Gdk_Rectangle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is null</font>;</tt></p>
</blockquote>
		<p>This procedure is called for all layers before drawing occurs. The 
		implementation shall not change the list of widget layers nor perform 
		drawing onto <b>Context</b>. The default implementation does nothing.</p>

<blockquote>
<p><tt><font color="#0000FF">procedure </font>Resized<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b> :
<font color="#0000FF">in out</font> Abstract_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Area</b>&nbsp; 
: Gdk_Rectangle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is null;</font></tt></p>
</blockquote>
		<p>This procedure is called when the layer's widget is resized. The 
		default implementation does nothing.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure </font>Store<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Abstract_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Context</b> : Cairo_Context<font color="#0000FF"><br>
</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is null;</font></tt></p>
</blockquote>
		<p>This procedure is called only for the layers which return <i>
		<font color="#800000">true</font></i> from
		<a href="#Gtk.Layered.Is_Caching">Is_Caching</a>. It is done when all 
		underlying layers are drawn. The layer should cache the image drawn. 
		Later when the widget need to be redrawn and the underlying layers 
		return <font color="#800000"><i>false</i></font> from their
		<a href="#Gtk.Layered.Is_Updated">Is_Updated</a>, 
		they are excluded from drawing and only the <a href="#Gtk.Layered.Draw">
		Draw</a> operation of the caching layer is 
		called.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure </font>Style_Set (<b>Layer</b> : <font color="#0000FF">
in out</font> Abstract_Layer)
<font color="#0000FF">is null</font>;</tt></p>
</blockquote>
		<p>The procedure is called when the widget's style properties were set. 
		The default implementation does nothing.</p>
		<h4><a name="2.2.2"></a>2.2.2. Abstract operations</h4>
		<p>The following abstract primitive operations must be implemented:</p>

		<blockquote>
<p><tt><font color="#0000FF">function</font> Add<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b>&nbsp; :
<font color="#0000FF">not null access</font> Layer_Location'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Stream</b> 
: <font color="#0000FF">not null access</font> Root_Stream_Type'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Abstract_Layer <font color="#0000FF">is abstract</font>;</tt></p>
</blockquote>
		<p>This function adds a new layer under the location specified by the 
		parameter <b>Under</b>. The layer parameters are read from <b>Stream</b>. 
		The function returns a pointer to the added layer. Constraint_Error is 
		propagated when layer parameters are illegal. Other exceptions may 
		indicate input errors.</p>

		<blockquote>
<p><tt><a name="Gtk.Layered.Draw"></a><font color="#0000FF">procedure</font> 
Draw<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Abstract_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Context</b> 
: Cairo_Context;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Area</b>&nbsp;&nbsp;&nbsp; 
: Gdk_Rectangle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is abstract</font>;</tt></p>
</blockquote>
		<p>This procedure is called when the layer need to be redrawn. The 
		parameter <b>Context</b> is the current
		<a href="http://cairographics.org/manual/cairo-cairo-t.html">cairo 
		drawing context</a>. The context must be used for all drawing operations
		the implementation performs. The parameter <b>Area</b> is the widget's 
		area need to be updated. The implementation need not to draw outside <b>
		Area</b> rectangle, when it does this the output is clipped out. After a 
		successful call to <a href="#Gtk.Layered.Draw">Draw</a>,
		<a href="#Gtk.Layered.Is_Updated">Is_Updated</a> should return <i>
		<font color="#800000">false</font></i>. The layer, when scalable should 
		consider the widget's center in <a href="#Gtk.Layered.Get_Center">Get_Center</a> and its
		size of <a href="#Gtk.Layered.Get_Size">Get_Size</a>.</p>

		<blockquote>
<p><tt><a name="Gtk.Layered.Get_Properties_Number"></a><font color="#0000FF">function</font> 
Get_Properties_Number (<b>Layer</b> : Abstract_Layer)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Natural
<font color="#0000FF">is abstract</font>;</tt></p>
</blockquote>
		<p>Layers are not <a href="https://developer.gnome.org/glib/">GLib</a>
		objects and thus do not have properties of their own. But they 
		support properties interface. The layer can be asked for its 
		&quot;properties&quot; and their values can be get and set thus influencing the 
		layer's parameters. This can be used by the layered widget in different 
		ways. The styles and properties of the widget may map to the layer's 
		&quot;properties.&quot; An application can control layers of a widget in 
		a generic way by setting 
		the &quot;properties&quot; of the layers.</p>

		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Property_Specification<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;&nbsp;&nbsp; 
: Abstract_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Property</b>
: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Param_Spec
<font color="#0000FF">is abstract</font>;</tt></p>
</blockquote>
		<p>This function returns the specification of a property specified by 
		its number. The result must be released using
		<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/glib.properties.creation.html#L75C14">Unref</a> unless used in some container type which decrements the 
		reference count internally. Constraint_Error is propagated when <b>Property</b> is not in the 
		range 1..<a href="#Gtk.Layered.Get_Properties_Number">Get_Properties_Number</a>.</p>

		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Property_Value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;&nbsp;&nbsp;
: Abstract_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Property</b> 
: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> GValue<font color="#0000FF"> is abstract</font>;</tt></p>
</blockquote>
		<p>This function returns the value of a property specified by 
		its number. The result must be released using
		<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/glib.values.html#L117C14">Unset</a>. Constraint_Error is propagated when <b>Property</b> is not in the 
		range 1..<a href="#Gtk.Layered.Get_Properties_Number">Get_Properties_Number</a>.</p>
<blockquote>
<p><tt><a name="Gtk.Layered.Is_Updated"></a><font color="#0000FF">function</font> 
Is_Updated (<b>Layer</b> : Abstract_Layer)<br>
&nbsp;<font color="#0000FF">&nbsp; return</font>
Boolean <font color="#0000FF">is abstract</font>;</tt></p>
</blockquote>
		<p>An implementation of this function should return <i><font color="#800000">true</font></i> 
		when the 
		layer contents must be redrawn because the layer's state was changed.</p>

		<blockquote>
<p><tt><a name="Gtk.Layered.Move"></a><font color="#0000FF">procedure</font> 
Move<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp; 
: <font color="#0000FF">in out</font> Abstract_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Offset</b> : Cairo_Tuple<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is abstract</font>;</tt></p>
</blockquote>
		<p>The implementation moves all geometric shapes the layer draws from 
		the original position (x,y) to the position (x,y) + <b>Offset</b>. Note 
		that when the layer implements the interface
		<a href="#Gtk.Layered.Scalable_Layer">Scalable_Layer</a>, and
		<a href="#Gtk.Layered.Get_Scaled">Get_Scaled</a> returns <i>
		<font color="#800000">true</font></i>, then the effective <b>Offset</b> 
		in 
<a href="http://cairographics.org/manual/index.html">cairo</a> coordinates will 
		depend on the current widget's size (see <a href="#Gtk.Layered.Get_Size">Get_Size</a>), 
		on which <b>Offset</b> is multiplied. Therefore to move the scalable 
		layer in 
<a href="http://cairographics.org/manual/index.html">cairo</a> coordinates, <b>
		Offset</b> must be divided to the widget's size. Note also that some 
		layers, e.g. ones with border, influence <a href="#Gtk.Layered.Get_Size">Get_Size</a>
		of the layers above.</p>

<blockquote>
<p><tt><a name="Gtk.Layered.Restore"></a><font color="#0000FF">procedure</font> 
Restore<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Stream</b> : <font color="#0000FF">
in out</font> Root_Stream_Type'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Layer</b>&nbsp; : <font color="#0000FF">in out</font> Abstract_Layer<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
is abstract;</font></tt></p>
</blockquote>
		<p>This procedure reads <b>Layer</b> parameters from <b>Stream</b>. 
		The layer parameters must be written using <a href="#Gtk.Layered.Store">
		Store</a>. Constraint_Error is propagated when some of the parameters are illegal.
		Other exceptions may indicate input errors. </p>

		<blockquote>
<p><tt><a name="Gtk.Layered.Scale"></a><font color="#0000FF">procedure</font> 
Scale<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp; 
: <font color="#0000FF">in out</font> Abstract_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Factor</b> : GDouble<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is abstract</font>;</tt></p>
</blockquote>
		<p>The implementation magnifies all geometric shapes the layer draws by
		<b>Factor</b>. Constraint_Error is propagated when <b>Factor</b> is 
		illegal.</p>

		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Property_Value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Abstract_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Property</b> : Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp;&nbsp;&nbsp; : GValue<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">is abstract</font>;</tt></p>
</blockquote>
		<p>This procedure sets a property specified by 
		its number. Constraint_Error is propagated when <b>Property</b> is not in the 
		range 1..<a href="#Gtk.Layered.Get_Properties_Number">Get_Properties_Number</a> 
		or when the property value is invalid.</p>

<blockquote>
<p><tt><a name="Gtk.Layered.Store"></a><font color="#0000FF">procedure</font> Store<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Stream</b> :
<font color="#0000FF">in out</font> Root_Stream_Type'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Layer</b>&nbsp; : Abstract_Layer<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is abstract;</font></tt></p>
</blockquote>
		<p>This procedure writes <b>Layer</b> parameters into <b>Stream</b>. The 
		parameters written this way can be used to restore layer state using
		<a href="#Gtk.Layered.Restore">Restore</a>. An 
		exception may indicate output error.</p>

		<H3><a name="2.3"></a>2.3. Layered widget</H3>
<p>The package Gtk.Layered defines a widget painted using 
<a href="http://cairographics.org/manual/index.html">cairo</a> drawing.</p>
		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Layered.Gtk_Layered_Record"></a>type </font>
Gtk_Layered_Record<font color="#0000FF"> is<br>
&nbsp;&nbsp; new </font>Gtk_Widget_Record<font color="#0000FF"> and </font>
<a href="#Gtk.Layered.Layer_Location">Layer_Location</a><font color="#0000FF"> with private</font>;<font color="#0000FF"><br>
<a name="Gtk.Layered.Gtk_Layered"></a>type </font>Gtk_Layered<font color="#0000FF"> 
is access all </font>Gtk_Layered_Record'Class;</tt></p>
</blockquote>
<p>The objects of the type process <a href="http://www.gtk.org">GTK+</a> events
in order to prepare <a href="http://cairographics.org/manual/cairo-cairo-t.html">
cairo context</a> for drawing into the widget. The widget emits the following 
signals:</p>
<ul>
	<li><i>layer-added</i> is emitted when the layer has been added. The first 
	parameter of the type GUInt is the position of the layer. The layers have 
	positions starting from 1 at the widget's bottom;</li>
	<li><i>layer-removed</i> is emitted when the layer has been removed. The 
	first parameter of the type GUInt is the position the removed layer had. 
	Note that the layer is already removed when the signal is emitted.</li>
</ul>
<p>The widget contains layers
derived from the type
<a href="#Gtk.Layered.Abstract_Layer">Abstract_Layer</a>:</p>
		<blockquote>
<p><tt><font color="#0000FF">function </font>Get_Type<font color="#0000FF"> return </font>
GType;</tt></p>
</blockquote>
<p>This function returns the GTK type of
		<a href="#Gtk.Layered.Gtk_Layered_Record">Gtk_Layered_Record</a>.</p>
		<h4><a name="2.3.1"></a>2.3.1. Primitive operations</h4>
		<p>The following primitive operations are provided by
		<a href="#Gtk.Layered.Gtk_Layered_Record">Gtk_Layered_Record</a>:</p>

		<blockquote>
<p><tt><font color="#0000FF">procedure </font>Erase (<b>Widget</b> :
<font color="#0000FF">in out</font> Gtk_Layered_Record);</tt></p>
</blockquote>
		<p>This procedure removes all layers of a widget.</p>

		<blockquote>
<p><tt><font color="#0000FF">procedure </font>Finalize (<b>Widget</b> :
<font color="#0000FF">in out</font> Gtk_Layered_Record) <font color="#0000FF">is 
null</font>;</tt></p>
</blockquote>
		<p>This procedure is called upon widget destruction. The default 
		implementation destroys all layers attached to the widget.</p>

		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Layered.Get_Aspect_Ratio"></a>function </font>
Get_Aspect_Ratio<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access constant </font>Gtk_Layered_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the aspect ratio of the widget. The aspect ratio is the 
widget's width divided to the widget's height. The aspect ratio may influence 
the behavior of the widget's layer when the size of the widget is changed. The 
default implementation returns the value set using the 
procedure <a href="#Gtk.Layered.Set_Aspect_Ratio">Set_Aspect_Ratio</a>.</p>
		<blockquote>
<p><tt><font color="#0000FF">function </font>Get_Bottom (<b>Widget</b> :
<font color="#0000FF">not null access</font> Gtk_Layered_Record)<font color="#0000FF"><br>
&nbsp;&nbsp; return not null access </font>Layer_Location'Class;</tt></p>
</blockquote>
<p>This function returns the location of the deepest layer of <b>Widget</b>. 
When the widget has no layers the result is the widget itself.</p>
		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Layered.Get_Center"></a>function </font>
Get_Center<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> : <font color="#0000FF">
not null access constant</font> Gtk_Layered_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Cairo_Tuple;</tt></p>
</blockquote>
<p>This function returns the coordinates of the widget's center. When the widget 
layers are scaled according to the widget size it should use this function in 
order to determine the widget's center.</p>
		<blockquote>
<p><tt><font color="#0000FF">function </font>Get_Depth<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :<font color="#0000FF"> 
not null access constant</font> Gtk_Layered_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Natural;</tt></p>
</blockquote>
<p>This function returns the number of its layers.</p>
		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Layered.Get_Drawing_Time"></a>function </font>
Get_Drawing_Time<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :<font color="#0000FF"> 
not null access constant</font> Gtk_Layered_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Time;</tt></p>
</blockquote>
<p>This function returns the time of drawing. The widgets which state depends on 
real time should use this value when draw their states.</p>
		<blockquote>
<p><tt><font color="#0000FF">function </font>Get_Layer<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> : <font color="#0000FF">
not null access constant </font>Gtk_Layered_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Layer</b>&nbsp; 
: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return access </font>Abstract_Layer'Class;</tt></p>
</blockquote>
<p>This function returns the layer by its number. The layers are numbered bottom 
to top. The deepest layer has the number 1. The result <font color="#0000FF">
null</font> if there is no such layer.</p>
		<blockquote>
<p><tt><font color="#0000FF">function </font>Get_Lower (<b>Widget</b> :
<font color="#0000FF">not null access</font> Gtk_Layered_Record)<font color="#0000FF"><br>
&nbsp;&nbsp; return access </font>Abstract_Layer'Class;</tt></p>
</blockquote>
<p>This function returns the bottom layer of <b>Widget</b> or
<font color="#0000FF">null</font> if there is none.</p>
		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Layered.Get_Size"></a>function 
</font>Get_Size<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> : <font color="#0000FF">not null 
access constant</font> Gtk_Layered_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return </font>GDouble;</tt></p>
</blockquote>
<p>This function returns the widget's size. When the widget 
layers are scaled according to the widget size it should use this function in
order to determine the widget's size. The size of the widget is calculated from 
its width and height taking into account its aspect ratio as returned by
<a href="#Gtk.Layered.Get_Aspect_Ratio">Get_Aspect_Ratio</a>. When the widget's 
aspect ratio is less than <a href="#Gtk.Layered.Get_Aspect_Ratio">
Get_Aspect_Ratio</a> the widget size is set to its height multiplied by the 
value returned by <a href="#Gtk.Layered.Get_Aspect_Ratio">
Get_Aspect_Ratio</a>. Otherwise the widget size is set to its 
width. In particular when the aspect ratio is 1, the result is minimum of height 
and width. The widget size can be considered the effective widget's width. Thus 
when a layer is designed, which should be resizable, its vertical dimensions 
should be calculated relatively to the horizontal dimensions. The maximal 
horizontal dimension should be 1.0, when the layer should cover whole widget's
area.</p>
		<blockquote>
<p><tt><font color="#0000FF">function </font>Get_Upper (<b>Widget</b> :
<font color="#0000FF">not null access</font> Gtk_Layered_Record)<font color="#0000FF"><br>
&nbsp;&nbsp; return access </font>Abstract_Layer'Class;</tt></p>
</blockquote>
<p>This function returns the topmost layer of <b>Widget</b> or
<font color="#0000FF">null</font> if there is none.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure 
</font>Refresh<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Widget</b>&nbsp; :
<font color="#0000FF">not null access</font> Gtk_Layered_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Context</b> : Cairo_Context<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure performs drawing of the widget's layers when the widget must 
be redrawn. It should not be used directly. If the widget need to be redrawn the 
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.widget.html#L2297C14">Queue_Draw</a> should be used instead. <b>Context</b> is the cairo context to 
draw onto.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure
</font>Remove<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :<font color="#0000FF"> 
not null access 
</font>Gtk_Layered_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Layer</b>&nbsp; : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure removes the layer by its position. The resources allocated by 
the layer are freed. The layers are numbered from 1 starting from the bottom 
layer. Nothing happens when there is no layer with this number. A layer can also 
be removed implicitly when the corresponding layer object is destroyed.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure 
</font>Resized<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Layered_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Allocation</b> : Gtk_Allocation<font color="#0000FF"><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
</font>)&nbsp; <font color="#0000FF">is null</font>;</tt></p>
</blockquote>
<p>This procedure is called when the widget is resized. <b>Allocation</b> 
describes the new widget's size.</p>
		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Layered.Set_Aspect_Ratio"></a>
procedure </font>
Set_Aspect_Ratio<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">not null access 
</font>Gtk_Layered_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Aspect_Ratio</b> : GDouble<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets the widget's aspect ratio. The default value is 1.0. 
Constraint_Error is propagated when the aspect ratio is negative.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Snapshot<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> : <font color="#0000FF">
not null access</font> Gtk_Layered_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Target</b> : Cairo_Surface_Handle / Cairo_Surface_Handle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
);</tt></p>
</blockquote>
<p>This procedure is used for taking snapshots of the widget. E.g. for rendering 
its contents into a PDF file etc. The parameter <b>Target</b> is the surface or 
a context
onto which the widget contents has to be drawn.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Style_Changed<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :<font color="#0000FF"> 
not null access</font> Gtk_Layered_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
is null</font>;</tt></p>
</blockquote>
<p>This is called when the widget's style properties are set. The default 
implementation does nothing.</p>
		<h4><a name="2.3.2"></a>2.3.2. Class-wide operations</h4>
		<blockquote>
<p><tt><font color="#0000FF">procedure 
</font>Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access 
</font>Gtk_Layered_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is used to initialize the widget's object. When overridden the 
implementation must call the parent's version from its body.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure 
</font>Insert<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp; :
<font color="#0000FF">not null access 
</font>Gtk_Layered_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Layer</b>&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out</font> 
Abstract_Layer'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Position</b> : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure inserts or moves the layer to the specified position. This 
procedure can be moved from one widget to another. The bottom layer has the 
position 1. The topmost layer has the position of the widget's depth. If <b>
Position</b> is greater than the number of layers in the widget, <b>Layer</b> is moved to the 
widget's top. Note that the operation may also move other layers dependant on <b>
Layer</b>.</p>
<h3><a name="2.4"></a>2.4. Abstract bordered layer</h3>
<p><a name="Gtk.Layered.Abstract_Bordered"></a>The package 
<a href="#Gtk.Layered.Abstract_Bordered">Gtk.Layered.Abstract_Bordered</a> provides an abstract type for creation of layers 
with borders:</p>
<blockquote>
	<p><img border="0" src="gauge_border.png" width="277" height="229" alt="gauge border"></p>
	<p><tt><font color="#0000FF">
	<a name="Gtk.Layered.Abstract_Bordered.Abstract_Bordered_Layer"></a>type</font> Abstract_Bordered_Layer
	<font color="#0000FF">is<br>&nbsp;&nbsp; abstract new</font>
	<a href="#Gtk.Layered.Abstract_Layer">Abstract_Layer</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	<font color="#0000FF">and</font> <a href="#Gtk.Layered.Scalable_Layer">Scalable_Layer</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	<font color="#0000FF">and</font> <a href="#Gtk.Layered.Widened_Layer">Widened_Layer</a>
	<font color="#0000FF"> with 
private</font>;</tt></p>
</blockquote>
<p>A bordered layer when created automatically adds a foreground layer above
itself. The foreground layer has the type:</p>
<blockquote>
	<p><tt><font color="#0000FF">type</font> Foreground_Layer
	<font color="#0000FF">is new</font> <a href="#Gtk.Layered.Abstract_Layer">
	Abstract_Layer</a> <font color="#0000FF">
	with private</font>;</tt></p>
</blockquote>
<p>The function of the foreground layer is to have a bracket for the layers
visually belonging to the bordered layer. When the bordered layer is resized 
together with the widget, the layers within the brackets are 
sized in same relation as the are inside the border. In order to maintain this 
behavior the bordered layer changes the current size of the widget as returned 
by <a href="#Gtk.Layered.Get_Size">Get_Size</a>. The foreground layer restores 
the effective widget size back. So the layers which visually belong to the 
bordered area should be put under the foreground layer returned by the function
<a href="#Gtk.Layered.Abstract_Bordered.Get_Foreground">Get_Foreground</a>.</p>
<p>The package declares further types:</p>
		<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Layered.Abstract_Bordered.Border_Color_Type"></a>type</font> 
Border_Color_Type (<b>Style_Color</b> : Boolean := True)
<font color="#0000FF">is record<br>
&nbsp;&nbsp; case</font> Style_Color <font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when</font> True&nbsp; =&gt; <font color="#0000FF">
null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> False =&gt; Color 
: Gdk_Color;<br>
&nbsp;&nbsp; <font color="#0000FF">end case</font>;<br>
<font color="#0000FF">end record</font>;</tt></p>
</blockquote>
<p>This type describe the border's color. When the discriminant <b>Style_Color</b> 
is <i><font color="#800000">true</font></i>, the border has the color of the
widget's background as set in the widget's style. When <b>Style_Color</b> is <i>
<font color="#800000">false</font></i>, the border has the color defined by the 
field Color.</p>
		<blockquote>
<p><tt>Default_Color : <font color="#0000FF">constant</font> Border_Color_Type 
:= (Style_Color =&gt; True);</tt></p>
</blockquote>
<p>This constant defines the default border color.</p>
		<h4><a name="2.4.1"></a>2.4.1. Primitive operations</h4>
		<p>The following primitive operations are defined on
		<a href="#Gtk.Layered.Abstract_Bordered.Abstract_Bordered_Layer">
		Abstract_Bordered_Layer</a>:</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Aspected (<b>Layer</b> : 
Abstract_Bordered_Layer)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns the value set by 
<a href="#Gtk.Layered.Abstract_Bordered.Set_Aspected">Set_Aspected</a>.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Border_Color (<b>Layer</b> : 
Abstract_Bordered_Layer)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Border_Color_Type;</tt></p>
</blockquote>
<p>This function returns the border color. The result has the type 
<a href="#Gtk.Layered.Abstract_Bordered.Border_Color_Type">Border_Color_Type</a>.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Border_Depth (<b>Layer</b> : 
Abstract_Bordered_Layer)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the visible border depth. The visible depth of the 
border is the projection of the <i>z</i>-axis onto the <i>xy</i>-surface.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Border_Shadow (<b>Layer</b> : 
Abstract_Bordered_Layer)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Gtk_Shadow_Type;</tt></p>
</blockquote>
<p>This function returns the border shadow type. The types of shadows are 
defined in the package
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.enums.html">Gtk.Enums</a>.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Border_Width (<b>Layer</b> : 
Abstract_Bordered_Layer)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the border width. The visible border width does not 
include the shadows produced by its visual depth. The effective border width is 
computed as according to the&nbsp; <a href="#Gtk.Layered.Widened_Layer">
Widened_Layer</a> interface. </p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Deepened (<b>Layer</b> : 
Abstract_Bordered_Layer)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> when the 
layer's visual depth is changed with the widget's size.</p>
		<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Layered.Abstract_Bordered.Get_Foreground"></a>function</font> 
Get_Foreground (<b>Layer</b> : Abstract_Bordered_Layer)<br>
&nbsp;&nbsp; <font color="#0000FF">return access</font> Foreground_Layer'Class;</tt></p>
</blockquote>
<p>This function returns the foreground layer corresponding to the bordered 
layer or <font color="#0000FF">null</font> when there is none.</p>
		<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Layered.Abstract_Bordered.Set"></a>procedure</font> 
Set<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Abstract_Bordered_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Border_Width</b>&nbsp; : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Border_Depth</b>&nbsp; : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Border_Color</b>&nbsp; : Border_Color_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Border_Shadow</b> : Gtk_Shadow_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets parameters of the border. <b>Border_Width</b> is the 
width of the border without the border shadow. The border width can be 0.0. <b>
Border_Depth</b> is the visual width of the border shadows. The parameter <b>
Border_Color</b> of the type
<a href="#Gtk.Layered.Abstract_Bordered.Border_Color_Type">Border_Color_Type</a> 
specifies the border color. The parameter <b>Border_Shadow</b> defines the 
border shadow type as defined in the package
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.enums.html">Gtk.Enums</a>.</p>
		<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Layered.Abstract_Bordered.Set_Aspected"></a>procedure</font> 
Set_Aspected<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;&nbsp;&nbsp;
: <font color="#0000FF">in out</font> Abstract_Bordered_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Aspected</b> : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>If <b>Aspected</b> is set to <i><font color="#800000">false</font></i>, when
the widget is resized the border width's aspect remains constant in all 
directions. I.e. the border width is proportional to the widget size in the 
corresponding direction. The option has 
no visible effect when the widget's aspect ratio is 1. For widgets having 
rectangular border this option should be <i><font color="#800000">true</font></i>, 
otherwise vertical and horizontal borders would have different widths. The
widgets having circular borders should have this set to <i>
<font color="#800000">false</font></i>.</p>
		<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Layered.Abstract_Bordered.Set_Deepened"></a>procedure</font> 
Set_Deepened<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Abstract_Bordered_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Deepened</b> : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure is called to change the behavior upon widget's resizing. When 
the parameter <b>Deepened</b> is set to <i><font color="#800000">true</font></i>, 
the visual border shadows will have the width set by the parameter <b>Set_Border_Depth</b> 
of <a href="#Gtk.Layered.Abstract_Bordered.Set">Set</a> multiplied by the 
widget's size as returned by <a href="#Gtk.Layered.Get_Size">Get_Size</a>. 
Otherwise <b>Set_Border_Depth</b> is the absolute width.</p>
<h4><a name="2.4.2"></a>2.4.2. Abstract operations</h4>

		<p>A derived type must implement the following abstract primitive 
		operations:</p>
		<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Layered.Abstract_Bordered.Draw_Contents"></a>procedure</font>
Draw_Contents<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Abstract_Bordered_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Context</b> : Cairo_Context;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Area</b>&nbsp;&nbsp;&nbsp; 
: Gdk_Rectangle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is abstract</font>;</tt></p>
</blockquote>
<p>This procedure is called to draw the layer's contents within the border. When 
called, the border around the contents is already drawn. The path set by 
<a href="#Gtk.Layered.Abstract_Bordered.Set_Contents_Path">Set_Contents_Path</a> is scaled to the required size. E.g. when it is an area to 
fill, the implementation would simply set the color and call Fill (Context). The 
context is translated and scaled according to the required location and size of
the contents.</p>
		<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Layered.Abstract_Bordered.Set_Contents_Path"></a>procedure</font> 
Set_Contents_Path<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Abstract_Bordered_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Context</b> : Cairo_Context;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Area</b>&nbsp;&nbsp;&nbsp; 
: Gdk_Rectangle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is abstract</font>;</tt></p>
</blockquote>
<p>This procedure is called before drawing the border. An implementation should 
create a path in <b>Context</b>. The border will be drawn around the path when
the border layer is not scalable (see also <a href="#Gtk.Layered.Set_Scaled">
Set_Scaled</a>). When the layer is scalable, it is drawn inside the path, which is 
appropriately scaled. Finally 
<a href="#Gtk.Layered.Abstract_Bordered.Draw_Contents">Draw_Contents</a> is called with the path to 
perform actual drawing.</p>
<h3><a name="2.5"></a>2.5. Layer interfaces</h3>

<p>Layers may implement additional interfaces declared in the package
Gtk.Layered.</p>
<h4><a name="2.5.1"></a>2.5.1. Layer location and object interfaces</h4>
<p>The <a href="#Gtk.Layered.Layer_Location">Layer_Location</a> interface describes location of a layer in stack of the layers of the
<a href="#Gtk.Layered.Gtk_Layered_Record">Gtk_Layered_Record</a> widget:</p>

		<blockquote>
<p><a name="Gtk.Layered.Layer_Location"></a><tt><font color="#0000FF">type </font>
Layer_Location<font color="#0000FF"> is limited interface</font>;</tt></p>
</blockquote>
<p>The <a href="#Gtk.Layered.Layer_Object">Layer_Object</a> interface describes 
a layer in stack of the layers of the
<a href="#Gtk.Layered.Gtk_Layered_Record">Gtk_Layered_Record</a> widget:</p>

		<blockquote>
<p><a name="Gtk.Layered.Layer_Object"></a><tt><font color="#0000FF">type </font>
Layer_Object<font color="#0000FF"> is limited interface</font>;</tt></p>
</blockquote>
<p>The
interface declares the abstract primitive operation:</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure </font>Add<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b> :
<font color="#0000FF">not null access </font>Layer_Object;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Under</b> :<font color="#0000FF"> not null access </font>Layer_Location'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;is 
abstract</font>;</tt></p>
</blockquote>
<p>This procedure places <b>Layer</b> under the location specified by the 
parameter <b>Under</b>.</p>
		<h4><a name="2.5.2"></a>2.5.2. Scalable layer interface</h4>
<p>When the layer can be scaled when the widget is resized, it implements the 
interface:</p>

		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Layered.Scalable_Layer"></a>type</font>
Scalable_Layer <font color="#0000FF">is limited interface</font>;</tt></p>
</blockquote>
<p>The interface declares the abstract primitive operations:</p>

		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Layered.Get_Scaled"></a>function</font> 
Get_Scaled (<b>Layer</b> : Scalable_Layer)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Boolean <font color="#0000FF">
is abstract</font>;</tt></p>
</blockquote>
<p>This function returns <font color="#800000"><i>true</i></font> when the layer 
is scaled when the widget is resized. When the result is <i>
<font color="#800000">false</font></i> the layer size is absolute and does not 
change.</p>

		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Layered.Set_Scaled"></a>procedure</font> 
Set_Scaled<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;
: <font color="#0000FF">in out</font> Scalable_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Scaled</b> : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;is 
abstract</font>;</tt></p>
</blockquote>
<p>This procedure changes the layer's behaviour when the widget is resized. When
<b>Scaled</b> is set to <font color="#800000"><i>true</i></font> the layer is 
scaled together with the widget. The layer size is computed as the specified 
size multiplied by the widget's size as returned by
<a href="#Gtk.Layered.Get_Size">Get_Size</a>. </p>
<h4><a name="2.5.3"></a>2.5.3. Widened layer interface</h4>
<p>When the layer draws some lines widened when the widget is resized, it 
implements the interface:</p>

		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Layered.Widened_Layer"></a>type</font> 
Widened_Layer<font color="#0000FF"> is limited interface</font>;</tt></p>
</blockquote>
<p>The interface declares the abstract primitive operations:</p>

		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Layered.Get_Widened"></a>function</font> 
Get_Widened (<b>Layer</b> : Scalable_Layer)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Boolean <font color="#0000FF">
is abstract</font>;</tt></p>
</blockquote>
<p>This function returns <font color="#800000"><i>true</i></font> when the 
layer's lines are widened when the widget is resized. When the result is <i>
<font color="#800000">false</font></i> the layer lines' widths remain unchanged.</p>

		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Layered.Set_Widened"></a>procedure</font> 
Set_Widened<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Scalable_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Widened</b> : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;is 
abstract</font>;</tt></p>
</blockquote>
<p>This procedure changes the layer's behavior when the widget is resized. When
<b>Widened</b> is set to <font color="#800000"><i>true</i></font> the lines of 
the layer are widened together with the widget. The line width is computed as 
the specified width multiplied by the widget's size as returned by
<a href="#Gtk.Layered.Get_Size">Get_Size</a>.</p>
<h4><a name="2.5.4"></a>2.5.4. Annotation layer interface</h4>
<p>Annotation layer draws a set of texts attached to some scale. The interface 
of these layers:</p>

		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Layered.Annotation_Layer"></a>type</font>
Annotation_Layer<font color="#0000FF"> is limited interface</font>;</tt></p>
</blockquote>
<p>The interface declares the abstract primitive operations:</p>

		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Face (<b>Layer</b> : 
Annotation_Layer) <font color="#0000FF">return</font> Pango_Cairo_Font;</tt></p>
</blockquote>
<p>This function returns a handle to the font used of the annotation texts.</p><blockquote>
<p><tt><font color="#0000FF">function</font> Get_Height (<b>Layer</b> : 
Annotation_Layer) <font color="#0000FF">return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the <a href="#ellipse_parameters">parameters</a> of the 
outer ellipse bounding the scale ticks.</p><blockquote>
<p><tt><font color="#0000FF">function</font> Get_Markup<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;&nbsp;&nbsp; 
:  
Annotation_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Position</b> 
: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if the 
corresponding annotation text uses 
			<a href="https://developer.gnome.org/pango/stable/PangoMarkupFormat.html">
			pango markup</a>. The texts are 
enumerated from 1. Constraint_Error is propagated when <b>Position</b> greater 
than the number returned by
<a href="#Gtk.Layered.Elliptic_Annotation.Get_Texts_Number">Get_Text_Number</a>.</p><blockquote>
<p><tt><font color="#0000FF">function</font> Get_Stretch (<b>Layer</b> : 
Annotation_Layer) <font color="#0000FF">return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the factor by which the text original width is 
stretched.</p><blockquote>
<p><tt><font color="#0000FF">function</font> Get_Text<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;&nbsp;&nbsp; 
:  
Annotation_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Position</b> 
: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> UTF8_String;</tt></p>
</blockquote>
<p>This function returns the annotation text by its number. The texts are 
enumerated from 1. Constraint_Error is propagated when <b>Position</b> greater 
than the number returned by
<a href="#Gtk.Layered.Elliptic_Annotation.Get_Texts_Number">Get_Text_Number</a>.</p><blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Layered.Elliptic_Annotation.Get_Texts_Number"></a>function</font> 
Get_Texts_Number (<b>Layer</b> :  
Annotation_Layer)<font color="#0000FF"> return</font> Natural;</tt></p>
</blockquote>
<p>This function returns the number of annotation texts.</p><blockquote>
<p><tt><font color="#0000FF">function</font> Get_Ticks (<b>Layer</b> :
Annotation_Layer) <font color="#0000FF">return</font> Tick_Parameters;</tt></p>
</blockquote>
<p>This function returns the <a href="#Gtk.Layered.Tick_Parameters">parameters 
of the ticks</a> at which the annotation texts are drawn.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Face<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b> :
<font color="#0000FF">in out</font>  
Annotation_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Face</b>&nbsp; 
: Pango_Cairo_Font<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure changes the annotation texts font.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Text<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font>  
Annotation_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Position</b> : Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Text</b>&nbsp;&nbsp;&nbsp;&nbsp;
: UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Markup</b>&nbsp;&nbsp; : Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure changes the annotation text by its number. The texts are 
enumerated from 1. Constraint_Error is propagated when <b>Position</b> greater 
than the number returned by
<a href="#Gtk.Layered.Elliptic_Annotation.Get_Texts_Number">Get_Text_Number</a> 
+ 1. When <b>Markup</b> is set to <i><font color="#800000">true</font></i> the
text contains 
			<a href="https://developer.gnome.org/pango/stable/PangoMarkupFormat.html">
			pango markup</a>.</p><blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Texts<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp; :
<font color="#0000FF">in out</font> Annotation_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Texts </b> &nbsp;: Gtk.Enums.String_List.GList;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Markup</b> : Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is abstract</font>;<br>
<font color="#0000FF">procedure</font> Set_Texts<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Annotation_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Texts</b>&nbsp;&nbsp;&nbsp;&nbsp; : UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Delimiter</b> : Character := ' ';<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Markup</b>&nbsp;&nbsp;&nbsp; : Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is abstract;</font></tt></p>
</blockquote>
<p>This procedure changes all texts of the annotation text. When <b>Markup</b> 
is set to <i><font color="#800000">true</font></i> the text contains 
			<a href="https://developer.gnome.org/pango/stable/PangoMarkupFormat.html">
			pango markup</a>.</p>
<p>The following operation is class-wide (internally dispatching):</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Texts<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp; :
<font color="#0000FF">in out</font> Annotation_Layer'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Texts</b>&nbsp; : Controlled_String_List;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Markup</b> : Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<h4><a name="2.5.5"></a>2.5.5. Needle interface</h4>
<p>Needle layers implement the interface:</p>

		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Layered.Gauge_Needle"></a>type</font> 
Gauge_Needle<font color="#0000FF"> is limited interface</font>;</tt></p>
</blockquote>
<p>The interface declares the abstract primitive operations:</p>

		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Adjustment (<b>Layer</b> : 
Gauge_Needle)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Gtk_Adjustment
<font color="#0000FF">is abstract</font>;</tt></p>
</blockquote>
<p>This function returns the adjustment object used by the needle. There result 
is <font color="#0000FF">null</font> when no adjustment object is used.</p>

		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Value (<b>Layer</b> :
Gauge_Needle)<br>
&nbsp; <font color="#0000FF">&nbsp;return</font> GDouble <font color="#0000FF">is 
abstract</font>;</tt></p>
</blockquote>
<p>This function returns value indicated by the needle. The result range is 
0.0..1.0. The implementation of this function shall be task-safe.</p>

		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b> :
<font color="#0000FF">in out</font> Gauge_Needle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b> : GDouble<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;is 
abstract</font>;</tt></p>
</blockquote>
<p>This procedure sets the needle's value. When <b>Value</b> is not in the range 
0.0..1.0 it is saturated to the nearest bound. The implementation of this 
procedure shall be task-safe. Note that changing the value does not cause layer 
redrawing. If necessary, this must be done explicitly.</p>
<h3><a name="2.6"></a>2.6. Other types declared</h3>
<h4><a name="2.6.1"></a>2.6.1. Closures of elliptic arcs</h4>

<p>The type <a href="#Gtk.Layered.Elliptic_Shape_Type">Elliptic_Shape_Type</a>
describes the way an elliptic arc is closed:</p>
		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Layered.Elliptic_Shape_Type"></a>
type</font> Elliptic_Shape_Type <font color="#0000FF">is</font> (Sector, Segment, Bagel);</tt></p>
</blockquote>
<p>The values are:</p>
<ul>
	<li><i>Sector</i> corresponds to an arc with the ends connected by two
	straight lines meeting in a point;</li>
	<li><i>Segment</i> corresponds to an arc with the ends connected by a straight line;</li>
	<li><i>Bagel</i> corresponds to an arc with the ends connected by straight lines 
	with the ends of another elliptic arc.</li>
</ul>
<blockquote>
	<p><img border="0" src="elliptic_backgrounds.png" width="369" height="282" alt="elliptic backgrounds"></p>
</blockquote>
<p>The type <a href="#Gtk.Layered.Elliptic_Arc_Closure">Elliptic_Arc_Closure</a> 
describes the closure of an elliptic arc:</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Layered.Elliptic_Arc_Closure"></a>type</font> 
Elliptic_Arc_Closure<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Shape : Elliptic_Shape_Type := Sector<br>
&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;is<br>
record<br>
&nbsp;&nbsp; case</font> Shape <font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when</font> Sector&nbsp; =&gt; Center : Cairo_Tuple;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> Bagel&nbsp;&nbsp; 
=&gt; Arc&nbsp;&nbsp;&nbsp; : Ellipse_Parameters;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> Segment =&gt;
<font color="#0000FF">null</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">end case</font>;<br>
<font color="#0000FF">end record</font>;</tt></p>
</blockquote>
<h4><a name="2.6.2"></a>2.6.2. Line parameters</h4>

		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Layered.Line_Parameters"></a>type</font> 
Line_Parameters <font color="#0000FF">is record</font><br>
&nbsp;&nbsp; Width&nbsp;&nbsp;&nbsp; : GDouble;<br>
&nbsp;&nbsp; Color&nbsp;&nbsp;&nbsp; : Gdk_Color;<br>
&nbsp;&nbsp; Line_Cap : Cairo_Line_Cap;<br>
<font color="#0000FF">end record</font>;</tt></p>
</blockquote>
<p>The type <a href="#Gtk.Layered.Line_Parameters">Line_Parameters</a> 
describes the parameters of a line:</p>
<ul>
	<li><i>Width</i> is the line width;</li>
	<li><i>Color</i> is the line color;</li>
	<li><i>Line_Cap</i> is the style used for the line ends.</li>
</ul>

<h4><a name="2.6.3"></a>2.6.3. Tick parameters</h4>

		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Layered.Tick_Parameters"></a>subtype </font>
Tick_Number <font color="#0000FF">is</font> Positive <font color="#0000FF">range</font>
<font color="#800000">1</font>..<font color="#800000">1_000_000</font>;<font color="#0000FF"><br>
type</font> 
Tick_Parameters <font color="#0000FF">is record</font><br>
&nbsp;&nbsp;
Step&nbsp;&nbsp;&nbsp; : GDouble;<br>
&nbsp;&nbsp;
First&nbsp;&nbsp; : Tick_Number;<br>
&nbsp;&nbsp;
Skipped : Tick_Number;<br>
<font color="#0000FF">end record</font>;</tt></p>
</blockquote>
<p>The type <a href="#Gtk.Layered.Tick_Parameters">Tick_Parameters</a> 
describes the parameters of a set of ticks:</p>
<ul>
	<li><i>Step</i> is the distance between two consequent ticks;</li>
	<li><i>First</i> is the number of the first tick. The ticks are numbered
	from 1 to Skipped;</li>
	<li><i>Skipped</i> is the number of skipped ticks.</li>
</ul>

<h4><a name="2.6.4"></a>2.6.4. Text transformation</h4>

		<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Layered.Text_Transformation"></a>type</font>
Text_Transformation <font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Moved_Inside,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Moved_Centered,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Moved_Outside,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Rotated,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Skewed<br>
&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>The type <a href="#Gtk.Layered.Text_Transformation">Text_Transformation</a> 
describes the way texts are aligned along a curve:</p>
<blockquote>
	<p>
	<img border="0" src="text_transformation_mode.png" width="706" height="584" alt="text transformation mode"></p>
</blockquote>
<p>The text is transformed and aligned in accordance to a curve. Here (<i>x</i>, <i>y</i>) 
are coordinates of a point at the curve where the text is to be shown and <i>R</i>
is the line going through (<i>x</i>, <i>y</i>) and the curve's center:</p>
<ul>
	<li><i>Moved_Inside</i> moves the text to (<i>x</i>, <i>y</i>) shifted 
	along <i>R</i> towards the center by halves of the projection lengths of the 
	text's height and width onto <i>R</i>;</li>
	<li><i>Moved_Centered</i> moves the text to (<i>x</i>, <i>y</i>) so that the 
	curve would cross the text's center;</li>
	<li><i>Moved_Outside</i> moves the text to (<i>x</i>, <i>y</i>) shifted
	along <i>R</i> away from the center by halves of the projection lengths of 
	the text's height and width onto <i>R</i>;</li>
	<li><i>Rotated</i> moves the text's center to (<i>x</i>, <i>y</i>) rotating 
	the text so that its vertical axis would be parallel to <i>R</i>;</li>
	<li><i>Skewed</i> moves the text's center to (<i>x</i>, <i>y</i>) skewing 
	and rotating the text so that the text vertical axis would become parallel 
	to <i>R</i>, and the text's horizontal axis would be parallel to some third vector 
	(e.g. the major axis of some ellipse). The height of the text's
	parallelogram is kept equal to the original height of the text.</li>
</ul>

<h3><a name="2.7"></a>2.7. Refresh engine</h3>

<p>There are two ways to implement a user interface application. One, used in
<a href="http://www.gtk.org">GTK+</a>, is event-driven. That is when the 
interface immediately responds to user action and other inputs, e.g. when the
values indicated by gauges are read from the sensors. This approach may 
become very resource consuming when the user interface must render highly 
dynamic data. The input events at millisecond rate would likely block the 
interface. It is also meaningless to refresh the user interface at such high 
rates because human eye cannot track such rapid changes anyway.</p>
<p>An alternative approach is time-driven, when the user interface is updated at 
fixed rate, usually at about 50Hz, independently on the input events. Any of the 
approaches can&nbsp;used with <a href="#Gtk.Layered.Gtk_Layered_Record">
Gtk_Layered_Record</a>. It is also possible to mix them. In order to use 
event-driven updates of a widget, there is nothing to care about. The
<a href="#Gtk.Layered.Gtk_Layered_Record">Gtk_Layered_Record</a> widget responds to the
<i>expose event</i> signal as any other widget. E.g. when the widget is resized 
or exposed it is redrawn automatically.</p>
<p><a name="Gtk.Layered.Refresh_Engine"></a>For time-driven refresh the package
<a href="#Gtk.Layered.Refresh_Engine">Gtk.Layered.Refresh_Engine</a> is 
provided. The package defines a refresh engine type, which redraws the widgets
connected to the engine object at the specified rate. The engine type is</p>

		<blockquote>
<p><tt><font color="#0000FF">type</font> 
Layered_Refresh_Engine <font color="#0000FF">is tagged limited private</font>;</tt></p>
</blockquote>
<p>The following operation are defined on the refresh engines:</p>

		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Add<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Engine</b> :
<font color="#0000FF">in out</font> Layered_Refresh_Engine;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Widget</b> : <font color="#0000FF">not null access</font> 
Gtk_Layered_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure adds <b>Widget</b> to the list of widgets refreshed by <b>
Engine</b>. Nothing happens if the widget is already in the list. The same 
widget may participate several lists. The refresh engine holds a weak reference 
to the widget. This means that the widget is automatically removed from the list 
when destructed. Use_Error is propagated when this procedure is called when the 
engine is refreshing the widgets from its list, i.e. when called from a handler 
triggered by the engine.</p>

		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Delete<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Engine</b> :
<font color="#0000FF">in out</font> Layered_Refresh_Engine;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Widget</b> : <font color="#0000FF">not null access</font> 
Gtk_Layered_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure removes <b>Widget</b> from the list of widgets refreshed by <b>
Engine</b>. Nothing happens if the widget is not in the list. Use_Error is 
propagated when this procedure is called when the engine is about to refresh the 
widgets from its list.</p>

		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Delete<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Engine</b> :
<font color="#0000FF">in out</font> Layered_Refresh_Engine;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Widget</b> : <font color="#0000FF">not null access</font> 
Gtk_Layered_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure removes <b>Widget</b> from the list of widgets refreshed by <b>
Engine</b>. Nothing happens if the widget is not in the list. Use_Error is 
propagated when this procedure is called when the engine is about to refresh the 
widgets from its list.</p>

		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Period (<b>Engine</b> : 
Layered_Refresh_Engine)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Duration;</tt></p>
</blockquote>
<p>This function returns the refresh period of the engine.</p>

		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Period<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Engine</b> :
<font color="#0000FF">in out</font> Layered_Refresh_Engine;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Period</b> : Duration<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets the refresh period of the engine. Initially the engine 
does not refresh, so this procedure should be called at least once. 
Constraint_Error is propagated when the period is out of range.</p>
<p><u><b>Implementation notes</b></u>. The refresh engine uses
<a href="http://www.gtk.org">GTK+</a> timeout functions. Current implementation 
of this feature may appear not real-time in the sense that the period set as the timeout 
is not absolute. In particular the effective period may be the sum of the specified period and the 
time required for drawing the widgets attached to the engine. If the drawing 
takes considerable time it must be taken into account when choosing the period. 
For example, to draw each 20ms widgets requiring 15ms to draw, the period should 
be set to 20-15ms = 5ms. See the function
<a href="#Gtk.Layered.Get_Drawing_Time">Get_Drawing_Time</a>, which can be used
in drawing time measurements.</p>

<hr>
<p align="right">
  <a name="3"></a><a href="#2"><IMG src="prev.gif" alt="[Back]" width="29" height="29"></a><a href="#16"
><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></a><a href="#4"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H2>3. Backgrounds</H2>Background layer is an opaque shape which can be used as a background of a
gauge.<H3><a name="3.1"></a>3.1. Elliptic background</H3>
<p><a name="Gtk.Layered.Elliptic_Background"></a>The package 
<a href="#Gtk.Layered.Elliptic_Background">Gtk.Layered.Elliptic_Background</a> provides background layer bound by elliptic 
curves:<blockquote>
<p><tt><font color="#0000FF">type</font> Elliptic_Background_Layer (&lt;&gt;)
<font color="#0000FF">is<br>
&nbsp;&nbsp; new</font> 
<a href="#Gtk.Layered.Abstract_Bordered.Abstract_Bordered_Layer">Abstract_Bordered_Layer</a> <font color="#0000FF">with
private</font>;</tt></p>
</blockquote>
<p>The following operations are defined in the package:</p>
		<blockquote>
	<p><tt><font color="#0000FF">procedure
	</font>Add_Elliptic_Background<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
	<b>Under</b> :
	<font color="#0000FF">not null access
	</font>Layer_Location'Class;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	<b>Outer</b> : Ellipse_Parameters := Unit_Circle;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ 
	<b>Inner</b> : 
	Ellipse_Parameters / <b>Center</b> : Cairo_Tuple; ]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	<b>From</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp; := <font color="#800000">0.0</font>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	<b>Length</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp; 
	:= <font color="#800000">2.0</font> * Pi;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	<b>Color</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Color := RGB 
	(<font color="#800000">0.0</font>, <font color="#800000">0.0</font>,
	<font color="#800000">0.0</font>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	<b>Border_Width</b>&nbsp; : GDouble&nbsp;&nbsp; := 
	<font color="#800000">0.0</font>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	<b>Border_Depth</b>&nbsp; : GDouble&nbsp;&nbsp; := 
	<font color="#800000">1.0</font>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	<b>Border_Color</b>&nbsp; : Border_Color_Type := Default_Color;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	<b>Border_Shadow</b> : Gtk_Shadow_Type&nbsp;&nbsp; := Shadow_In;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	<b>Deepened</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Boolean := False;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	<b>Scaled</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Boolean := False;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	<b>Widened</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Boolean := False<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>function
	</font>Add_Elliptic_Background<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
	<b>Under</b> :
	<font color="#0000FF">not null access
	</font>Layer_Location'Class;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	<b>Outer</b> 
	: Ellipse_Parameters := Unit_Circle;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ 
	<b>Inner</b> : 
	Ellipse_Parameters / <b>Center</b> : Cairo_Tuple; ]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	<b>From</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;:= <font color="#800000">0.0</font>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	<b>Length</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;:= <font color="#800000">2.0</font> * Pi;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	<b>Color</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Gdk_Color := RGB (<font color="#800000">0.0</font>, <font color="#800000">0.0</font>, 
	<font color="#800000">0.0</font>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	<b>Border_Width</b>&nbsp; : GDouble&nbsp;&nbsp; := 
	<font color="#800000">0.0</font>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	<b>Border_Depth</b>&nbsp; : GDouble&nbsp;&nbsp; := 
	<font color="#800000">1.0</font>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	<b>Border_Color</b>&nbsp; : Border_Color_Type := Default_Color;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	<b>Border_Shadow</b> : Gtk_Shadow_Type&nbsp;&nbsp; := Shadow_In;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	<b>Deepened</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Boolean := False;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	<b>Scaled</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Boolean := False;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	<b>Widened</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Boolean := False<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; 
	<font color="#0000FF">return not null access </font>Elliptic_Background_Layer;</tt></blockquote>
<p>These procedure and function create an elliptic background. The parameter <b>Under</b> 
specifies the layer location. The background layers outer bound is an elliptic 
arc of the ellipse specified by the parameter <b>Outer</b>. The arc starts at 
the angle <b>From</b> and goes to the angle <b>From</b> + <b>Length</b>. Note 
that both angles are in the <a href="http://cairographics.org/manual/index.html">cairo</a> coordinate system (absolute). The parameter 
<b>Length</b> can be negative.<ul>
	<li>The inner bound of the background can be another elliptic arc, of which 
	ellipse is specified by the parameter <b>Inner</b>. The inner arc absolute
	angles are <b>From</b> to <b>From</b> + <b>Length</b>. The ends of two arcs 
	are connected by straight lines;</li>
	<li>When the parameter <b>Center</b> is specified rather than <b>Inner</b>, 
	the ends of the elliptic arc are connected by two straight lines meeting in 
	the point defined by <b>Center</b>. In this case the layer has the shape of 
	an elliptic sector;</li>
	<li>When neither <b>Inner</b> or <b>Center</b> parameter is specified, the 
	ends of the elliptic arc are connected by a straight line. In this case
	shape is an elliptic sector.</li>
	</ul>
	<p>The parameter <b>Color</b> specifies the background color. The parameters
	<b>Border_Width</b>, <b>Border_Depth</b>, <b>Border_Color</b>, <b>
	Border_Shadow</b> are the parameters the background layer's border. See the 
	procedure <a href="#Gtk.Layered.Abstract_Bordered.Set">Set</a> for the 
	meaning of these parameters. The parameters <b>Deepened</b> and <b>Widened</b> 
	define the border's behavior upon the widget's layer sizing as described in
	<a href="#Gtk.Layered.Abstract_Bordered.Set_Deepened">Set_Deepened</a> and 
	<a href="#Gtk.Layered.Set_Widened">Set_Widened</a>. The 
	parameter <b>Scaled</b> controls the layer and border resizing (see
	<a href="#Gtk.Layered.Set_Scaled">Set_Scaled</a>). 
	Constraint_Error is propagated when some of the parameters are illegal.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Color (<b>Layer</b> : 
Elliptic_Background_Layer)<font color="#0000FF"> return</font> Gdk_Color;</tt></p>
</blockquote>
<p>This function returns the background color.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_From (<b>Layer</b> : 
Elliptic_Background_Layer) <font color="#0000FF">return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the angle at the starting point of the elliptic arc.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Inner (<b>Layer</b> : 
Elliptic_Background_Layer)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Elliptic_Arc_Closure;</tt></p>
</blockquote>
<p>This function returns the parameters of the inner bound of the background 
shape. The result has the type <a href="#Gtk.Layered.Elliptic_Arc_Closure">Elliptic_Arc_Closure</a>.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Length (<b>Layer</b> :
Elliptic_Background_Layer)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the angular length of the outer elliptic arc bounding 
the background layer.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Outer (<b>Layer</b> : 
Elliptic_Background_Layer)<br>
<font color="#0000FF">&nbsp;&nbsp; return</font> Ellipse_Parameters;</tt></p>
</blockquote>
<p>This function returns the <a href="#ellipse_parameters">parameters</a> of the outer elliptic arc bounding the 
background layer.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b> :
<font color="#0000FF">in out</font> Elliptic_Background_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Outer</b> : Ellipse_Parameters;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Inner</b> : Elliptic_Arc_Closure;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Length</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Color</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Color;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Border_Width</b>&nbsp; : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Border_Depth</b>&nbsp; : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Border_Color</b>&nbsp; : Border_Color_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Border_Shadow</b> : Gtk_Shadow_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure changes parameters of the layer. The meaning of the parameters 
is same as in the corresponding Gtk_New-subroutines.</p>
<H3><a name="3.2"></a>3.2. Rectangular background</H3>
<p><a name="Gtk.Layered.Rectangular_Background"></a>The package
<a href="#Gtk.Layered.Rectangular_Background">Gtk.Layered.Rectangular_Background</a> provides background layer bound by 
a rectangle with rounded corners:<blockquote>
<p><tt><font color="#0000FF">type</font> Rectangular_Background_Layer (&lt;&gt;)
<font color="#0000FF">is<br>
&nbsp;&nbsp; new</font> 
<a href="#Gtk.Layered.Abstract_Bordered.Abstract_Bordered_Layer">Abstract_Bordered_Layer</a>
<font color="#0000FF">with 
private</font>;</tt></p>
</blockquote>
<p>The following operations are defined in the package:</p>
		<blockquote>
	<p><tt><font color="#0000FF">procedure
	</font>Add_Rectangular_Background<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">
	not null access</font> Layer_Location'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Height</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; 
	:= <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Width</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; 
	:= <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Center</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Cairo_Tuple&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := 
	(<font color="#800000">0.0</font>, <font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Rotation_Angle</b> : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Corner_Radius</b>&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; :=
	<font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Color</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	:= RGB (<font color="#800000">0.0</font>, <font color="#800000">0.0</font>,
	<font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Border_Width</b>&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; :=
	<font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Border_Depth</b>&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Border_Color</b>&nbsp;&nbsp; : Border_Color_Type := Default_Color;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Border_Shadow</b>&nbsp; : Gtk_Shadow_Type&nbsp;&nbsp; := Shadow_In;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Deepened</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Scaled</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Widened</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
	function
	</font>Add_Elliptic_Background<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">
	not null access</font> Layer_Location'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Height</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; := <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Width</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; := <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Center</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Cairo_Tuple&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := (<font color="#800000">0.0</font>, <font color="#800000">
	0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Rotation_Angle</b> : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Corner_Radius</b>&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; :=
	<font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Color</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := RGB (<font color="#800000">0.0</font>,
	<font color="#800000">0.0</font>, <font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Border_Width</b>&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Border_Depth</b>&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Border_Color</b>&nbsp;&nbsp; : Border_Color_Type := Default_Color;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Border_Shadow</b>&nbsp; : Gtk_Shadow_Type&nbsp;&nbsp; := Shadow_In;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Deepened</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := 
	False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Scaled</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := 
	False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Widened</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return not null access </font>Rectangular_Background_Layer;</tt></blockquote>
<p>These procedure and function create a rectangular background. The parameter <b>Under</b> 
specifies the layer location. The rectangle height and width are specified by 
the parameters <b>Height</b> and <b>Width</b>. The parameter <b>Center</b> is 
the rectangle's center. The parameter <b>Rotation_Angle</b> is the angle between 
the horizontal axis of the rectangle and the <i>x</i>-axis of the
<a href="http://cairographics.org/manual/index.html">cairo</a> 
coordinate system. <b>Corner_Radius</b> is the radius of the curves rounding the 
rectangle corners. The parameter <b>Color</b> specifies the background color. The parameters
	<b>Border_Width</b>, <b>Border_Depth</b>, <b>Border_Color</b>, <b>
	Border_Shadow</b> are the parameters the background layer's border. See the 
	procedure <a href="#Gtk.Layered.Abstract_Bordered.Set">Set</a> for the
	meaning of these parameters. The parameters <b>Deepened</b> and <b>Widened</b> 
	define the border's behavior upon the widget's layer sizing as described in
	<a href="#Gtk.Layered.Abstract_Bordered.Set_Deepened">Set_Deepened</a> and 
	<a href="#Gtk.Layered.Set_Widened">Set_Widened</a>. The 
	parameter <b>Scaled</b> controls the layer and border resizing (see
	<a href="#Gtk.Layered.Set_Scaled">Set_Scaled</a>). 
Constraint_Error is propagated when some of the parameters are illegal.<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Center (<b>Layer</b> : 
Rectangular_Background_Layer)<br>
<font color="#0000FF">&nbsp;&nbsp; return</font> Cairo_Tuple;</tt></p>
</blockquote>
<p>This function returns the position of the background's rectangle.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Color (<b>Layer</b> : 
Rectangular_Background_Layer)<font color="#0000FF"> return</font> Gdk_Color;</tt></p>
</blockquote>
<p>This function returns the background color.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Corner_Radius (<b>Layer</b> : 
Rectangular_Background_Layer)<br>
<font color="#0000FF">&nbsp;&nbsp; return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the radius of the rectangle corners.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Height (<b>Layer</b> : 
Rectangular_Background_Layer)<font color="#0000FF"> return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the height of the rectangular border.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Rotation_Angle (<b>Layer</b> : 
Rectangular_Background_Layer)<br>
<font color="#0000FF">&nbsp;&nbsp; return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the angle between the width-axis of the rectangle and 
the <i>x</i>-axis of the <a href="http://cairographics.org/manual/index.html">cairo</a> coordinate system.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Width (<b>Layer</b> : 
Rectangular_Background_Layer)<br>
<font color="#0000FF">&nbsp;&nbsp; return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the width of the rectangular border.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Elliptic_Background_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Height</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Width</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Center</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Cairo_Tuple;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Rotation_Angle</b> : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Corner_Radius</b>&nbsp; : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Color</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Color;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Border_Width</b>&nbsp;&nbsp; : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Border_Depth</b>&nbsp;&nbsp; : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Border_Color</b>&nbsp;&nbsp; : Border_Color_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Border_Shadow</b>&nbsp; : Gtk_Shadow_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure changes parameters of the layer. The meaning of the parameters 
is same as in the corresponding Gtk_New-subroutines.</p>
<hr>
<p align="right">
  <a name="4"></a><a href="#2"><IMG src="prev.gif" alt="[Back]" width="29" height="29"></a><a href="#16"
><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></a><a href="#5"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H2>4. Scales</H2>
<p><a name="tick_parameters"></a>Scale is a set of ticks used to visually underline special values indicated 
by the instrument. A set of ticks is controlled by three parameters <b>Step</b>,
<b>First</b>, <b>Skipped</b>:</p>
<ul>
	<li>Step is the distance between two ticks;</li>
	<li>First is the number of the tick corresponding to the beginning of the
	scale;</li>
	<li>Skipped is the number of the tick to skip. E.g. when 5 then ticks with 
	the numbers 5, 10, 15 etc are not drawn.</li>
</ul>
<h3> <a name="4.1"></a>4.1. Elliptic scale</h3>
<p><a name="Gtk.Layered.Elliptic_Scale"></a>The package
<a href="#Gtk.Layered.Elliptic_Scale">Gtk.Layered.Elliptic_Scale</a> provides
scales bound by two elliptic curves:</p>
<blockquote>
	<p><img border="0" src="elliptic_scale.png" width="580" height="538" alt="elliptic scale"></p>
</blockquote>
<p>The ticks are drawn from inner to outer bounding ellipses. Both ellipses have 
the same center. On the figure above the inner <a href="#ellipse_parameters">
ellipse parameters</a> are (<i>r<sub>1</sub></i>, <i>k<sub>1</sub></i>, <i>&#945;<sub>1</sub></i>).
The outer <a href="#ellipse_parameters">ellipse parameters</a> are (<i>r<sub>2</sub></i>,
<i>k<sub>2</sub></i>, <i>&#945;<sub>2</sub></i>). The ticks start at the angle
<i>&#946;<sub>1</sub></i> and end at the angle <i>&#946;<sub>2</sub></i>. The ticks are 
numbered 1, 2, 3, 4 until the skipped tick, which is not drawn. On the figure 
the skipped tick has the number 5. The number of the first tick can be different 
from 1.<blockquote>
<p><tt><font color="#0000FF">type</font> Elliptic_Scale_Layer (&lt;&gt;)
<font color="#0000FF">is<br>
&nbsp;&nbsp; new</font> 
<a href="#Gtk.Layered.Abstract_Bordered.Abstract_Bordered_Layer">Abstract_Bordered_Layer</a><br>
&nbsp;&nbsp; <font color="#0000FF">and</font> 
<a href="#Gtk.Layered.Scalable_Layer">Scalable_Layer</a><br>
&nbsp;&nbsp; <font color="#0000FF">and</font> 
<a href="#Gtk.Layered.Widened_Layer">Widened_Layer</a> <font color="#0000FF">
with private</font>;</tt></p>
</blockquote>
<p>The following operations are defined in the package:</p>
		<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Add_Elliptic_Scale<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b>&nbsp;&nbsp;&nbsp;
	: <font color="#0000FF">not null access</font> Layer_Location'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Step</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	First</b>&nbsp;&nbsp;&nbsp; : Tick_Number&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= Tick_Number'Last;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Skipped</b>&nbsp; : Tick_Number&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := 
	Tick_Number'Last;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Outer</b>&nbsp;&nbsp;&nbsp; : Ellipse_Parameters := Unit_Circle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Inner</b>&nbsp;&nbsp;&nbsp; : Ellipse_Parameters := Unit_Circle /
	<font color="#800000">2.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Length</b>&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">2.0</font> * Pi;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Width</b>&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Color</b>&nbsp;&nbsp;&nbsp; : Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= RGB (<font color="#800000">0.0</font>, <font color="#800000">0.0</font>,
	<font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Line_Cap</b> : Cairo_Line_Cap&nbsp;&nbsp;&nbsp;&nbsp; := CAIRO_LINE_CAP_BUTT;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Scaled</b>&nbsp;&nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Widened</b>&nbsp;&nbsp;: Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
	function
	</font>Add_Elliptic_Scale<font color="#0000FF"><br>
	</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b>&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">not null access</font> Layer_Location'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Step</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>First</b>&nbsp;&nbsp;&nbsp; 
	: Tick_Number&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := Tick_Number'Last;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Skipped</b>&nbsp; 
	: Tick_Number&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := Tick_Number'Last;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Outer</b>&nbsp;&nbsp;&nbsp; 
	: Ellipse_Parameters := Unit_Circle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Inner</b>&nbsp;&nbsp;&nbsp; 
	: Ellipse_Parameters := Unit_Circle / <font color="#800000">2.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Length</b>&nbsp;&nbsp;
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">2.0</font> * Pi;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Width</b>&nbsp;&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Color</b>&nbsp;&nbsp;&nbsp;
	: Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := RGB (<font color="#800000">0.0</font>,
	<font color="#800000">0.0</font>, <font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Line_Cap</b> 
	: Cairo_Line_Cap&nbsp;&nbsp;&nbsp;&nbsp; := CAIRO_LINE_CAP_BUTT;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Scaled</b>&nbsp;&nbsp; 
	: Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	:= False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Widened</b>&nbsp;&nbsp;: 
	Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := 
	False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return 
	not null access
	</font>Elliptic_Scale_Layer;</tt></blockquote>
<p>These procedure and function create a scale with the ticks bound by two 
ellipses. The parameter <b>Under</b> 
specifies the layer location. The parameter <b>Step</b> is the angular distance 
between two ticks. The angle is in the 
<a href="http://cairographics.org/manual/index.html">cairo</a> coordinates. The parameters <b>Step</b>, <b>
First</b> and <b>
Skipped</b> describe the <a href="#tick_parameters">set of ticks</a>. The 
parameters <b>Outer</b> and <b>Inner</b> are the outer and inner bounds of the 
ticks. The center of the inner ellipse is ignored and considered same as the 
center of the outer ellipse. The parameter <b>From</b> 
is the angular value corresponding to the first tick of the scale. The parameter
<b>Length</b> is the angular length of the scale. Both angles are absolute in 
the <a href="http://cairographics.org/manual/index.html">cairo</a> coordinates. <b>Length</b> can be negative when ticks go 
counterclockwise. The parameters <b>Width</b>, <b>Color</b>, <b>Line_Cap</b> 
describe the tick line. <b>Width</b> is the tick line width. When <b>Widened</b> 
is <i><font color="#800000">true</font></i>, the effective tick width is <b>
Width</b>
multiplied by the widget's size as returned by <a href="#Gtk.Layered.Get_Size">
Get_Size</a>. <b>Color</b> is the line color. <b>Line_Cap</b> is the style used 
for the line ends. The parameter <b>Scaled</b> when <i><font color="#800000">
true</font></i> resizes the layer when the widget is resized:<ul>
	<li>The curvatures of <b>Inner</b> and <b>Outer</b> are divided by the 
	widget's size (as returned by <a href="#Gtk.Layered.Get_Size">Get_Size</a>);</li>
	<li>The radiuses&nbsp;of <b>Inner</b> and <b>Outer</b> are multiplied by 
	the size;</li>
	<li>The coordinates of the ellipses center are multiplied by the size and 
	the result is used as the center's coordinates relatively to the widget's 
	center as returned by <a href="#Gtk.Layered.Get_Center">Get_Center</a>.</li>
	</ul>
	<p>Constraint_Error is propagated when some of the parameters are illegal.<blockquote>
<p><tt><font color="#0000FF">function</font> Get_From (<b>Layer</b> : 
Elliptic_Scale_Layer) <font color="#0000FF">return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the angle of the first tick in 
<a href="http://cairographics.org/manual/index.html">cairo</a> coordinates.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Inner (<b>Layer</b> : 
Elliptic_Scale_Layer)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Ellipse_Parameters;</tt></p>
</blockquote>
<p>This function returns the <a href="#ellipse_parameters">parameters</a> of the
inner ellipse bounding the scale ticks.</p><blockquote>
<p><tt><font color="#0000FF">function</font> Get_Length (<b>Layer</b> : 
Elliptic_Scale_Layer) <font color="#0000FF">return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the angular length of the scale.</p><blockquote>
<p><tt><font color="#0000FF">function</font> Get_Line (<b>Layer</b> :
Elliptic_Scale_Layer)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Line_Parameters;</tt></p>
</blockquote>
<p>This function returns <a href="#Gtk.Layered.Line_Parameters">line parameters</a> 
of the scale ticks.</p><blockquote>
<p><tt><font color="#0000FF">function</font> Get_Outer (<b>Layer</b> :
Elliptic_Scale_Layer)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Ellipse_Parameters;</tt></p>
</blockquote>
<p>This function returns the <a href="#ellipse_parameters">parameters</a> of the 
outer ellipse bounding the scale ticks.</p><blockquote>
<p><tt><font color="#0000FF">function</font> Get_Ticks (<b>Layer</b> :
Elliptic_Scale_Layer)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Tick_Parameters;</tt></p>
</blockquote>
<p>This function returns the scale <a href="#Gtk.Layered.Tick_Parameters">ticks 
parameters</a>.</p><blockquote>
<p><tt><font color="#0000FF">procedure</font> Set<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp; 
: <font color="#0000FF">in out</font> Elliptic_Scale_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Outer</b>&nbsp; : Ellipse_Parameters;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Inner</b>&nbsp; : Ellipse_Parameters;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Line</b>&nbsp;&nbsp; 
: Line_Parameters;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Ticks</b>&nbsp; : Tick_Parameters;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp; 
: GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Length</b> : GDouble<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure changes parameters of the layer. The meaning of the parameters 
is same as in the corresponding Gtk_New-subroutines. Constraint_Error is propagated when 
some of the parameters are illegal.</p><h3> <a name="4.2"></a>4.2. 
Flat scale</h3>
<p><a name="Gtk.Layered.Flat_Scale"></a>The package
<a href="#Gtk.Layered.Flat_Scale">Gtk.Layered.Flat_Scale</a> provides 
scales with the ticks arranged along a straight line. The ticks are drawn 
perpendicularly to the line. The tick centers lie on the line. The 
ticks are numbered 1, 2, 3, 4 until the skipped tick, which is not drawn. The number of the first tick can be 
different from 1.</p><blockquote>
<p><tt><font color="#0000FF">type</font> Flat_Scale_Layer (&lt;&gt;)<font color="#0000FF"> 
is<br>
&nbsp;&nbsp; new </font><a href="#Gtk.Layered.Abstract_Layer">Abstract_Layer</a><br>
&nbsp;&nbsp; <font color="#0000FF">and</font>
<a href="#Gtk.Layered.Scalable_Layer">Scalable_Layer</a><br>
&nbsp;&nbsp; <font color="#0000FF">and</font>
<a href="#Gtk.Layered.Widened_Layer">Widened_Layer</a> <font color="#0000FF">with 
private</font>;</tt></p>
</blockquote>
<p>The following operations are defined in the package:</p>
		<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Add_Flat_Scale<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b>&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">not null access</font> Layer_Location'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Step</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	First</b>&nbsp;&nbsp;&nbsp; : Natural&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Skipped</b>&nbsp; : Positive&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := 
	Positive'Last;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: Cairo_Tuple&nbsp;&nbsp;&nbsp; := (<font color="#800000">0.0</font>,
	<font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Length</b>&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Breadth</b>&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Angle</b>&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Width</b>&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Color</b>&nbsp;&nbsp;&nbsp; : Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := RGB 
	(<font color="#800000">0.0</font>, <font color="#800000">0.0</font>,
	<font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Line_Cap</b> : Cairo_Line_Cap := CAIRO_LINE_CAP_BUTT;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Scaled</b>&nbsp;&nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Widened</b>&nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := 
	False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
	function
	</font>Add_Elliptic_Scale<font color="#0000FF"><br>
	</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b>&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">not null access</font> Layer_Location'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Step</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>First</b>&nbsp;&nbsp;&nbsp; 
	: Natural&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := <font color="#800000">
	0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Skipped</b>&nbsp; 
	: Positive&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := Positive'Last;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: Cairo_Tuple&nbsp;&nbsp;&nbsp; := (<font color="#800000">0.0</font>,
	<font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Length</b>&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Breadth</b>&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Angle</b>&nbsp;&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Width</b>&nbsp;&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Color</b>&nbsp;&nbsp;&nbsp; 
	: Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := RGB (<font color="#800000">0.0</font>,
	<font color="#800000">0.0</font>, <font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Line_Cap</b> 
	: Cairo_Line_Cap := CAIRO_LINE_CAP_BUTT;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Scaled</b>&nbsp;&nbsp; 
	: Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Widened</b>&nbsp; 
	: Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return 
	not null access
	</font>Flat_Scale_Layer;</tt></blockquote>
<p>These procedure and function create a scale with the ticks arranged along a 
straight line. The parameter <b>Under</b> 
specifies the layer location. The 
parameter <b>Step</b> is the distance between two ticks. The parameters <b>Step</b>, <b>First</b> and <b>
Skipped</b> describe the <a href="#tick_parameters">set of ticks</a>. The parameter <b>From</b> 
is the coordinates of the first tick center. The parameter
<b>Length</b> is the length of the scale. <b>Breadth</b> is the length of a 
tick. <b>Angle</b> is the angle between the <i>x</i>-axis of 
<a href="http://cairographics.org/manual/index.html">cairo</a> coordinate 
system and the scale. The parameters <b>Width</b>, <b>Color</b>, <b>Line_Cap</b> 
describe the tick line. <b>Width</b> is the tick line width. When <b>Widened</b> 
is <i><font color="#800000">true</font></i>, the effective tick width is <b>Width</b> 
multiplied by the widget's size as returned by <a href="#Gtk.Layered.Get_Size">
Get_Size</a>. <b>Color</b> is the line color. <b>Line_Cap</b> is the style used 
for the line ends. The parameter <b>Scaled</b> when <i><font color="#800000">
true</font></i> resizes the layer when the widget is resized:<ul>
	<li>The first tick position <i>x</i> is multiplied by the widget's size (see <a href="#Gtk.Layered.Get_Size">
Get_Size</a>) and placed in the coordinate system centered in the widget's 
	center (see <a href="#Gtk.Layered.Get_Center">Get_Center</a>);</li>
	<li>The first tick position <i>y</i> is multiplied by the widget's size and 
	placed in the coordinate system centered in the widget's center;</li>
	<li>Length, width, step are multiplied by the widget's size.</li>
	</ul>
	<p>Constraint_Error is propagated when some of the parameters are illegal.<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Angle (<b>Layer</b> : 
Flat_Scale_Layer) <font color="#0000FF">return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the angle between the scale and <i>x</i>-axis of 
<a href="http://cairographics.org/manual/index.html">cairo</a> coordinates.</p><blockquote>
<p><tt><font color="#0000FF">function</font> Get_Breadth (<b>Layer</b> : 
Flat_Scale_Layer) <font color="#0000FF">return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the tick length.</p><blockquote>
<p><tt><font color="#0000FF">function</font> Get_From (<b>Layer</b> : 
Flat_Scale_Layer) <font color="#0000FF">return</font> Cairo_Tuple;</tt></p>
</blockquote>
<p>This function returns the first tick's center in 
<a href="http://cairographics.org/manual/index.html">cairo</a> coordinates.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Length (<b>Layer</b> : 
Flat_Scale_Layer) <font color="#0000FF">return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the length of the scale.</p><blockquote>
<p><tt><font color="#0000FF">function</font> Get_Line (<b>Layer</b> : 
Flat_Scale_Layer) <font color="#0000FF">return</font> Line_Parameters;</tt></p>
</blockquote>
<p>This function returns <a href="#Gtk.Layered.Line_Parameters">line parameters</a> of the scale ticks.</p><blockquote>
<p><tt><font color="#0000FF">function</font> Get_Ticks (<b>Layer</b> : 
Flat_Scale_Layer) <font color="#0000FF">return</font> Tick_Parameters;</tt></p>
</blockquote>
<p>This function returns the scale <a href="#Gtk.Layered.Tick_Parameters">ticks parameters</a>.</p><blockquote>
<p><tt><font color="#0000FF">procedure</font> Set<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Flat_Scale_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Line</b>&nbsp;&nbsp;&nbsp; 
: Line_Parameters;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Ticks</b>&nbsp;&nbsp; : Tick_Parameters;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp; 
: Cairo_Tuple;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Length</b>&nbsp; : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Breadth</b> : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Angle</b>&nbsp;&nbsp; : GDouble<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure changes parameters of the layer. The meaning of the parameters 
is same as in the corresponding Gtk_New-subroutines. Constraint_Error is propagated when some of the parameters are illegal.</p>
<hr>
<p align="right">
  <a name="5"></a><a href="#4"><IMG src="prev.gif" alt="[Back]" width="29" height="29"></a><a href="#16"
><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></a><a href="#6"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H2>5. Annotations</H2>
<p> Annotation is a set of texts usually placed nearby corresponding scale 
ticks. Similarly to scales annotations can be elliptic and flat.</p>
<h3><a name="5.1"></a>5.1. Elliptic annotation</h3>
<p><a name="Gtk.Layered.Elliptic_Annotation"></a>The package
<a href="#Gtk.Layered.Elliptic_Annotation">Gtk.Layered.Elliptic_Annotation</a> 
provides annotations for elliptic scales:</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Elliptic_Annotation_Layer (&lt;&gt;)
<font color="#0000FF">is<br>
&nbsp;&nbsp; new</font> <a href="#Gtk.Layered.Abstract_Layer">Abstract_Layer</a>
<font color="#0000FF">and</font> 
<a href="#Gtk.Layered.Scalable_Layer">Scalable_Layer</a> <font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p>The following operations are defined in the package:</p>
		<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Add_Elliptic_Annotation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">not null access</font> Layer_Location'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Texts</b>&nbsp;&nbsp;&nbsp;&nbsp; : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Step</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	First</b>&nbsp;&nbsp;&nbsp;&nbsp; : Tick_Number&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := Tick_Number'Last;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Skipped</b>&nbsp;&nbsp; : Tick_Number&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := Tick_Number'Last;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Ellipse</b>&nbsp;&nbsp; : Ellipse_Parameters&nbsp; := Unit_Circle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := <font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Length</b>&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := <font color="#800000">2.0</font> * Pi;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Face</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Pango_Cairo_Font :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	Create_Toy<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	(&nbsp; Family =&gt; &quot;<font color="#FF0000">arial</font>&quot;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	Slant&nbsp; =&gt; CAIRO_FONT_SLANT_NORMAL,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	Weight =&gt; CAIRO_FONT_WEIGHT_NORMAL<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Height</b>&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">12.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Stretch</b>&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Mode</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Text_Transformation := Moved_Centered;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Color</b>&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= RGB (<font color="#800000">0.0</font>, <font color="#800000">0.0</font>,
	<font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Delimiter</b> 
	: Character&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := ' 
	'; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Markup</b>&nbsp;&nbsp;&nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Scaled</b>&nbsp;&nbsp;&nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
	function
	</font>Add_Elliptic_Annotation<font color="#0000FF"><br>
	</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">not null access</font> Layer_Location'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Texts</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: <i><a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Step</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Double;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>First</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: Tick_Number&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := Tick_Number'Last;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Skipped</b>&nbsp;&nbsp; 
	: Tick_Number&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := Tick_Number'Last;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Ellipse</b>&nbsp;&nbsp; 
	: Ellipse_Parameters&nbsp; := Unit_Circle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;:= <font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Length</b>&nbsp;&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;:= <font color="#800000">2.0</font> * Pi;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Face</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Pango_Cairo_Font :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	Create_Toy<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	(&nbsp; Family =&gt; &quot;<font color="#FF0000">arial</font>&quot;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	Slant&nbsp; =&gt; CAIRO_FONT_SLANT_NORMAL,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	Weight =&gt; CAIRO_FONT_WEIGHT_NORMAL<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Height&nbsp;
	</b>&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">12.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Stretch</b>&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Mode</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Text_Transformation := Moved_Centered;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Color</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := 
	RGB (<font color="#800000">0.0</font>, <font color="#800000">0.0</font>,
	<font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Delimiter</b> : 
	Character&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := ' 
	'; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Markup</b>&nbsp;&nbsp;&nbsp; 
	: Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Scaled</b>&nbsp;&nbsp;&nbsp; 
	: Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return 
	not null access
	</font>Elliptic_Annotation_Layer;</tt></blockquote>
<p>These procedure and function create annotation arranged along an elliptic 
arc. The parameter <b>Under</b> 
specifies the layer location. <a name="annotation_texts_specification"></a>The 
parameter <b>Texts</b> defines the set of texts used for the annotation. It may 
take one of three forms:<ul>
	<li>A list of strings:</li>
	</ul>
	<blockquote>
		<blockquote>
			<p><tt><b>Texts</b> : Gtk.Enums.String_List.GList;</tt></blockquote>
	</blockquote>
	<ul>
		<li>A controlled list of strings:</li>
		</ul>
		<blockquote>
			<blockquote>
				<p><tt><b>Texts</b> : Controlled_String_List;</tt></blockquote>
			<p>The list can be created using expressions like <tt>&quot;<font color="#ff0000">A</font>&quot;/&quot;<font color="#ff0000">B</font>&quot;/&quot;<font color="#ff0000">C</font>&quot;</tt>.</blockquote>
		<ul>
			<li>A string of annotation texts separated using the delimiter 
			character:</li>
			</ul>
			<blockquote>
				<blockquote>
					<p><tt><b>Texts</b> : UTF8_String;</tt></blockquote>
			</blockquote>
			<p>Missing texts cause no error, they are not indicated. The 
			parameter <b>Markup</b> is <font color="#800000"><i>false</i></font> 
			for plain texts. Otherwise, text are assumed containing
			<a href="https://developer.gnome.org/pango/stable/PangoMarkupFormat.html">
			pango markup</a>. The 
			parameter <b>Step</b> is the angular distance between two ticks at 
			which annotation texts to be shown. The 
			angle is in the <a href="http://cairographics.org/manual/index.html">cairo</a> coordinates. The parameters <b>Step</b>, <b>
			First</b> and <b>
			Skipped</b> describe the <a href="#tick_parameters">set of ticks</a>. 
			The parameter <b>Ellipse</b> is specifies the ellipse of the arc 
			where annotation texts are placed. The parameter <b>From</b> 
			is the angular value corresponding to the first annotation text. The 
			parameter
<b>Length</b> is the angular length of the annotation. Both angles are absolute 
			in the <a href="http://cairographics.org/manual/index.html">cairo</a> coordinates. <b>Length</b> can be negative when 
			annotation texts go counterclockwise. <b>Face</b> is the font used 
			for annotation texts. <b>Height</b> is the height of the annotation 
			texts. <b>Stretch</b> is the factor by which the original text width 
			is stretched. When <b>Stretch</b> is 1.0, the text's height to width 
			relation is not changed. <b>Mode</b> is annotation <a href="#Gtk.Layered.Text_Transformation">text transformation mode</a>.<b> Color</b> is the 
			text color. The parameter <b>Scaled</b> when <i><font color="#800000">
			true</font></i> resizes the layer when the widget is 
			resized:<ul>
	<li>The curvature of <b>Ellipse</b> is divided by the 
	widget's size (as returned by <a href="#Gtk.Layered.Get_Size">Get_Size</a>);</li>
	<li>The radius of <b>Ellipse</b> is multiplied by 
	the size;</li>
	<li>The coordinates of the ellipse center are multiplied by the size and 
	the result is used as the center's coordinates relatively to the widget's 
	center as returned by <a href="#Gtk.Layered.Get_Center">Get_Center</a>;</li>
	<li>The text size is multiplied by the widget's size.</li>
	</ul>
	<p>Constraint_Error is propagated when some of the parameters are illegal.<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Color (<b>Layer</b> : 
Elliptic_Annotation_Layer)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Gdk_Color;</tt></p>
</blockquote>
<p>This function returns the text color.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Ellipse (<b>Layer</b> : 
Elliptic_Annotation_Layer)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Ellipse_Parameters;</tt></p>
</blockquote>
<p>This function returns the <a href="#ellipse_parameters">parameters</a> of the 
ellipse where the annotation texts are placed.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_From (<b>Layer</b> : 
Elliptic_Annotation_Layer) <font color="#0000FF">return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the angle of the first annotation text.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Length (<b>Layer</b> : 
Elliptic_Annotation_Layer)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the angular length of the annotation.</p><blockquote>
<p><tt><font color="#0000FF">function</font> Get_Mode (<b>Layer</b> : 
Elliptic_Annotation_Layer)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Text_Transformation;</tt></p>
</blockquote>
<p>This function returns the annotation
<a href="#Gtk.Layered.Text_Transformation">texts transformation mode</a>.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Elliptic_Annotation_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Ellipse</b> : Ellipse_Parameters;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Ticks</b>&nbsp;&nbsp; : Tick_Parameters;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp; 
: GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Length</b>&nbsp; : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Face</b>&nbsp;&nbsp;&nbsp; 
: Pango_Cairo_Font;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Mode</b>&nbsp;&nbsp;&nbsp; 
: Text_Transformation;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Height</b>&nbsp; : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Stretch</b> : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Color</b>&nbsp;&nbsp; : Gdk_Color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure changes parameters of the layer. The meaning of the parameters 
is same as in the corresponding Gtk_New-subroutines. Constraint_Error is propagated when 
some of the parameters are illegal.</p>
<h3><a name="5.2"></a>5.2. Flat annotation</h3>
<p><a name="Gtk.Layered.Flat_Annotation"></a>The package
<a href="#Gtk.Layered.Flat_Annotation">Gtk.Layered.Flat_Annotation</a> 
provides annotations for flat scales:</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Flat_Annotation_Layer (&lt;&gt;)
<font color="#0000FF">is<br>
&nbsp;&nbsp; new</font> <a href="#Gtk.Layered.Abstract_Layer">Abstract_Layer</a>
<font color="#0000FF">and</font> 
<a href="#Gtk.Layered.Scalable_Layer">Scalable_Layer</a> <font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p>The following operations are defined in the package:</p>
		<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Add_Flat_Annotation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">not null access</font> Layer_Location'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Texts</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Step</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	First</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Tick_Number := 
	Tick_Number'Last;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Skipped</b>&nbsp;&nbsp;&nbsp;&nbsp; : Tick_Number := Tick_Number'Last;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Cairo_Tuple := (<font color="#800000">0.0</font>, <font color="#800000">
	0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Length</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:= <font color="#800000">2.0</font> * Pi;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Scale_Angle</b> : GDouble&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Face</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 
	Pango_Cairo_Font :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; 
	Create_Toy<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	(&nbsp; Family =&gt; &quot;<font color="#FF0000">arial</font>&quot;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; 
	Slant&nbsp; =&gt; CAIRO_FONT_SLANT_NORMAL,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Weight =&gt; CAIRO_FONT_WEIGHT_NORMAL<br>
&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Height</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp; 
	:= <font color="#800000">12.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Stretch</b>&nbsp;&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp; 
	:= <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Color</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Color&nbsp;:= RGB (<font color="#800000">0.0</font>, <font color="#800000">0.0</font>,
	<font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Text_Angle</b>&nbsp; : GDouble&nbsp;&nbsp; := <font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Justify</b>&nbsp;&nbsp;&nbsp;&nbsp; : Alignment := Center;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Delimiter</b>&nbsp;&nbsp; 
	: Character := ' 
	'; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Markup</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Boolean&nbsp;&nbsp; := False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Scaled</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Boolean&nbsp;&nbsp; 
	:= False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
	function
	</font>Add_Flat_Annotation<font color="#0000FF"><br>
	</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">not null access</font> Layer_Location'Class;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Texts</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Step</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Double;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>First</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Tick_Number := Tick_Number'Last;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Skipped</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: Tick_Number := Tick_Number'Last;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; 
	: Cairo_Tuple := (<font color="#800000">0.0</font>, <font color="#800000">
	0.0</font>);<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Length</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp; := <font color="#800000">2.0</font> * Pi;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Scale_Angle</b> : GDouble&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">0.0</font>;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Face</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 
	Pango_Cairo_Font :=<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; 
	Create_Toy<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	(&nbsp; Family =&gt; &quot;<font color="#FF0000">arial</font>&quot;,<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; 
	Slant&nbsp; =&gt; CAIRO_FONT_SLANT_NORMAL,<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Weight =&gt; CAIRO_FONT_WEIGHT_NORMAL<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	);<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Height</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp; 
	:= <font color="#800000">12.0</font>;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Stretch</b>&nbsp;&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp; 
	:= <font color="#800000">1.0</font>;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Color</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Color&nbsp;:= RGB (<font color="#800000">0.0</font>, <font color="#800000">0.0</font>,
	<font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Text_Angle</b>&nbsp; 
	: GDouble&nbsp;&nbsp; := <font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Justify</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: Alignment := Center;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Delimiter</b>&nbsp;&nbsp; 
	: Character := ' 
	'; ]<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Markup</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Boolean&nbsp;&nbsp; := False;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Scaled</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Boolean&nbsp;&nbsp; 
	:= False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return 
	not null access
	</font>Flat_Annotation_Layer;</tt></blockquote>
<p>These procedure and function create annotation arranged along a straight line. The parameter <b>Under</b> 
specifies the layer location. The 
parameter <b>Texts</b> defines the <a href="#annotation_texts_specification">set of 
annotation texts</a>. Missing texts cause no error, they are not indicated. The 
parameter <b>Markup</b> is <font color="#800000"><i>false</i></font> for plain 
texts. Otherwise, text are assumed containing
<a href="https://developer.gnome.org/pango/stable/PangoMarkupFormat.html">pango 
markup</a>. The 
			parameter <b>Step</b> is the distance between two ticks annotation 
texts to be shown. The parameters <b>Step</b>, <b>
			First</b> and <b>
			Skipped</b> describe the <a href="#tick_parameters">set of ticks</a>. The parameter <b>From</b> 
			is the position of the first annotation text. The 
			parameter
<b>Length</b> is the length of the annotation. <b>Scale_Angle</b> is the angle 
between the <i>x</i>-axis of 
<a href="http://cairographics.org/manual/index.html">cairo</a> coordinate system and the line along which 
			annotation texts are placed. <b>Face</b> is the font used 
			for annotation texts. <b>Height</b> is the height of the annotation 
			texts. <b>Stretch</b> is the factor by which the original text width 
is stretched. When <b>Stretch</b> is 1.0, the text's height to width relation is 
not changed. <b> Color</b> is the 
			text color. <b>Text_Angle</b> is the angle between the <i>x</i>-axis 
of
<a href="http://cairographics.org/manual/index.html">cairo</a> coordinate system 
and horizontal axis of the annotation texts. <b>Justify</b> 
specifies the way the annotation texts are aligned:<ul>
	<li><i>Left</i>, the text's right margin is the text location;</li>
	<li><i>Center</i>, the text's center is the text location;</li>
	<li><i>Right</i>, the text's left margin is the text location.</li>
	</ul>
	<p>The parameter <b>Scaled</b> when <i><font color="#800000">
			true</font></i> resizes the layer when the widget is resized:<ul>
	<li>The coordinates of the annotation beginning (<b>From</b>) are multiplied 
	by the size as returned by <a href="#Gtk.Layered.Get_Size">Get_Size</a> and 
	the result is used as the center's coordinates relatively to the widget's 
	center as returned by <a href="#Gtk.Layered.Get_Center">Get_Center</a>;</li>
	<li>The annotation length (<b>Length</b>) is multiplied by the widget's 
	size;</li>
	<li>The text size is multiplied by the widget's size.</li>
	</ul>
	<p>Constraint_Error is propagated when some of the parameters are illegal.<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Color (<b>Layer</b> : 
Flat_Annotation_Layer) <font color="#0000FF">return</font> Gdk_Color;</tt></p>
</blockquote>
<p>This function returns the text color.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_From (<b>Layer</b> : 
Flat_Annotation_Layer) <font color="#0000FF">return</font> Cairo_Tuple;</tt></p>
</blockquote>
<p>This function returns the coordinates of the first annotation text.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Justify (<b>Layer</b> : 
Flat_Annotation_Layer)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Alignment;</tt></p>
</blockquote>
<p>This function returns the way the annotation texts are aligned.</p><blockquote>
<p><tt><font color="#0000FF">function</font> Get_Length (<b>Layer</b> : 
Flat_Annotation_Layer) <font color="#0000FF">return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the angular length of the annotation.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Scale_Angle (<b>Layer</b> : 
Flat_Annotation_Layer)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the angle of the straight line along which the 
annotation texts are arranged.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Flat_Annotation_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Ticks</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Tick_Parameters;<br>
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; From</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Cairo_Tuple;<br>
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Length</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GDouble;<br>
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Scale_Angle</b> : GDouble;<br>
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Face</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Pango_Cairo_Font;<br>
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Height</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GDouble;<br>
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Stretch</b>&nbsp;&nbsp;&nbsp;&nbsp; : GDouble;<br>
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Color</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Color;<br>
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Text_Angle</b>&nbsp; : GDouble;<br>
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Justify</b>&nbsp;&nbsp;&nbsp;&nbsp; : Alignment<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure changes parameters of the layer. The meaning of the parameters 
is same as in the corresponding Gtk_New-subroutines. Constraint_Error is propagated when 
some of the parameters are illegal.</p>
<hr>
<p align="right">
  <a name="6"></a><a href="#5"><IMG src="prev.gif" alt="[Back]" width="29" height="29"></a><a href="#16"
><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></a><a href="#7"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H2>6. Needles</H2>
<p>The needle layers draw a shape which location reflect some changing value. 
The value may be set explicitly using the needle interface. It also can be set 
using an
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.adjustment.html">adjustment object</a>.</p>
<h3><a name="6.1"></a>6.1. Needle</h3>
<p> 
<a name="Gtk.Layered.Needle"></a>The package <a href="#Gtk.Layered.Needle">
Gtk.Layered.Needle</a> provides gauge a needle rotating around its center:</p>
<blockquote>
	<p><img border="0" src="gauge_needle.png" width="463" height="159" alt="gauge needle"></p>
</blockquote>
<p>The needle tip indicates the value on a circular scale with the center in the 
needle's center. The layer type is:</p>
<blockquote>
<p><tt><font color="#0000FF">type </font>Needle_Layer (&lt;&gt;) <font color="#0000FF">
is<br>
&nbsp;&nbsp; new </font><a href="#Gtk.Layered.Abstract_Layer">Abstract_Layer</a><font color="#0000FF"><br>
&nbsp;&nbsp; and </font><a href="#Gtk.Layered.Gauge_Needle">Gauge_Needle</a><font color="#0000FF"><br>
&nbsp;&nbsp; and </font><a href="#Gtk.Layered.Scalable_Layer">Scalable_Layer</a>
<font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p align="left">The type implements the <a href="#Gtk.Layered.Gauge_Needle">
Gauge_Needle</a> interface, which can be used to get and set the indicated 
value. Another way to do this is to use an
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.adjustment.html">adjustment object</a>. The following operations are defined in the package:</p>
		<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Add_Needle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">not null access</font> Layer_Location'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Center</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Cairo_Tuple&nbsp;&nbsp;&nbsp; := 
	(<font color="#800000">0.0</font>, <font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">3.0</font> * Pi / <font color="#800000">4.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Length</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">3.0</font> * Pi / <font color="#800000">2.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Tip_Length</b>&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">20.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Tip_Width</b>&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">2.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Tip_Cap</b>&nbsp;&nbsp;&nbsp;&nbsp; : Cairo_Line_Cap := CAIRO_LINE_CAP_BUTT;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Rear_Length</b> : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">3.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Rear_Width</b>&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">3.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Rear_Cap</b>&nbsp;&nbsp;&nbsp; : Cairo_Line_Cap := CAIRO_LINE_CAP_BUTT;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Color</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= RGB (<font color="#800000">1.0</font>, <font color="#800000">0.0</font>,
	<font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Adjustment</b>&nbsp; : <font color="#0000FF">access</font> Gtk_Adjustment_Record'Class := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Scaled</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
	function
	</font>Add_Needle<font color="#0000FF"><br>
	</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">not null access</font> Layer_Location'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Center</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Cairo_Tuple&nbsp;&nbsp;&nbsp; := (<font color="#800000">0.0</font>,
	<font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">3.0</font> * Pi / <font color="#800000">4.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Length</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">3.0</font> * Pi / <font color="#800000">2.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Tip_Length</b>&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">20.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Tip_Width</b>&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">2.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Tip_Cap</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: Cairo_Line_Cap := CAIRO_LINE_CAP_BUTT;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Rear_Length</b> : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">3.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Rear_Width</b>&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">3.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Rear_Cap</b>&nbsp;&nbsp;&nbsp; 
	: Cairo_Line_Cap := CAIRO_LINE_CAP_BUTT;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Color</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := RGB (<font color="#800000">1.0</font>,
	<font color="#800000">0.0</font>, <font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Adjustment</b>&nbsp; 
	: <font color="#0000FF">access</font> Gtk_Adjustment_Record'Class := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Scaled</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return 
	not null access
	</font>Needle_Layer;</tt></blockquote>
<p>These procedure and function create a needle. The parameter <b>Under</b> 
specifies the layer location. The 
parameter <b>Center</b> specifies the position of the needle's center in 
<a href="http://cairographics.org/manual/index.html">cairo</a> 
coordinates. The 
			parameter <b>From</b> is the angle corresponding to the value 0.0. The 
			parameter
<b>Length</b> is the angular length of the value 1.0. The needle moves between
<b>From</b> and <b>From</b> + <b>Length</b>. When the
value of
<b>Length</b> is negative the needle moves counterclockwise. The parameter <b>
Tip_Length</b> is the distance between the needle's center and its tip. <b>Tip_Width</b> is the width of the needle at its tip. <b>Tip_Cap</b> is the 
style of the needle tip. The parameters <b>Rear_Length</b>, <b>Rear_Width</b>,
<b>Rear_Cap</b> specify the needle rear end. <b>Rear_Length </b>can be negative.<b> Color</b> is 
needle's color. <b>Adjustment</b> is the adjustment object, which state needle 
would reflect. The lower adjustment's value corresponds to <b>From</b>. The 
upper adjustment's value corresponds to <b>From</b> + <b>Length</b>. When <b>
Adjustment</b> is <font color="#0000FF">null</font>, no adjustment is used. The parameter <b>Scaled</b> when <i><font color="#800000">
			true</font></i> resizes the layer when the widget is 
			resized:<ul>
	<li>The coordinates of the needle's center are multiplied by the size 
	as returned by <a href="#Gtk.Layered.Get_Size">Get_Size</a> and 
	the result is used as the center's coordinates relatively to the widget's 
	center as returned by <a href="#Gtk.Layered.Get_Center">Get_Center</a>;</li>
	<li>The needle's lengths and widths are multiplied by the widget's 
	size.</li>
	</ul>
	<p>Constraint_Error is propagated when some of the parameters are illegal.<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Center (<b>Layer</b> : 
Needle_Layer) <font color="#0000FF">return</font> Cairo_Tuple;</tt></p>
</blockquote>
<p>This function returns the needle's center.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Color (<b>Layer</b> : 
Needle_Layer) <font color="#0000FF">return</font> Gdk_Color;</tt></p>
</blockquote>
<p>This function returns the needle's color.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_From (<b>Layer</b> : 
Needle_Layer) <font color="#0000FF">return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the angle of the value 0.0.</p><blockquote>
<p><tt><font color="#0000FF">function</font> Get_Length (<b>Layer</b> : 
Needle_Layer) <font color="#0000FF">return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the angular length of the needle values range 
[0.0..1.0].</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Rear (<b>Layer</b> : 
Needle_Layer) <font color="#0000FF">return</font> End_Parameters;</tt></p>
</blockquote>
<p>This function returns the <a href="#Gtk.Layered.Line_Parameters">line 
parameters</a> of the needle's rear end.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Tip (<b>Layer</b> : 
Needle_Layer) <font color="#0000FF">return</font> End_Parameters;</tt></p>
</blockquote>
<p>This function returns the <a href="#Gtk.Layered.Line_Parameters">line 
parameters</a> of the needle's tip.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Needle_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Center</b>&nbsp; : Cairo_Tuple;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp; 
: GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Length</b>&nbsp; : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Tip</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: End_Parameters;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Rear</b>&nbsp;&nbsp;&nbsp; 
: End_Parameters;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Color</b>&nbsp;&nbsp; : Gdk_Color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure changes parameters of the layer. The meaning of the parameters 
is same as in the corresponding Gtk_New-subroutines. Constraint_Error is propagated when 
some of the parameters are illegal.</p>
<h3><a name="6.2"></a>6.2. Clock hand
</h3>
<p> 
<a name="Gtk.Layered.Clock_Hand"></a>The package
<a href="#Gtk.Layered.Clock_Hand">Gtk.Layered.Clock_Hand
</a> provides 
a needle shaped as a clock hand:</p>
<blockquote>
	<p><img border="0" src="gauge_clock_hand.png" alt="clock hand"></p>
</blockquote>
<p>The hand's tip indicates the time on a circular dial with the center in the 
hand's center. The layer type is:</p>
<blockquote>
<p><tt><font color="#0000FF">type </font>Clock_Hand_Layer (&lt;&gt;) <font color="#0000FF">
is<br>
&nbsp;&nbsp; new </font><a href="#Gtk.Layered.Abstract_Layer">Abstract_Layer</a><font color="#0000FF"><br>
&nbsp;&nbsp; and </font><a href="#Gtk.Layered.Gauge_Needle">Gauge_Needle</a><font color="#0000FF"><br>
&nbsp;&nbsp; and </font><a href="#Gtk.Layered.Scalable_Layer">Scalable_Layer</a>
<font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p align="left">The type implements the <a href="#Gtk.Layered.Gauge_Needle">
Gauge_Needle</a> interface, which can be used to get and set the indicated 
time. Another way to do this is to use an
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.adjustment.html">adjustment object</a>. The following operations are defined in the package:</p>
		<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Add_Clock_Hand
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">not null access</font> Layer_Location'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Center</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Cairo_Tuple&nbsp;&nbsp;&nbsp; := 
	(<font color="#800000">0.0</font>, <font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 
	GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">3.0</font> * Pi / <font color="#800000">4.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Length</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">3.0</font> * Pi / <font color="#800000">2.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Tip_Length</b>&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">20.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Tip_Width</b>&nbsp;&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">2.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Tip_Cap</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Cairo_Line_Cap := CAIRO_LINE_CAP_BUTT;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Rear_Length</b>&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">3.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Rear_Width</b>&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">3.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Rear_Cap</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Cairo_Line_Cap := CAIRO_LINE_CAP_BUTT;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Bulb_Position</b> : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">13.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Bulb_Radius</b>&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">5.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Bulb_Width</b>&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">2.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Color</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= RGB (<font color="#800000">1.0</font>, <font color="#800000">0.0</font>,
	<font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Adjustment</b>&nbsp;&nbsp;&nbsp; : <font color="#0000FF">access</font> Gtk_Adjustment_Record'Class := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Scaled</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
	function
	</font>Add_Clock_Hand
<font color="#0000FF"><br>
	</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">not null access</font> Layer_Location'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Center</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Cairo_Tuple&nbsp;&nbsp;&nbsp; := (<font color="#800000">0.0</font>,
	<font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">3.0</font> * Pi / <font color="#800000">4.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Length</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">3.0</font> * Pi / <font color="#800000">2.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Tip_Length</b>&nbsp;&nbsp;&nbsp; : 
	GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">20.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Tip_Width</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">2.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Tip_Cap</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Cairo_Line_Cap := CAIRO_LINE_CAP_BUTT;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Rear_Length&nbsp; </b> &nbsp;: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">3.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Rear_Width</b>&nbsp;&nbsp;&nbsp; : 
	GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">3.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Rear_Cap</b>&nbsp;&nbsp;&nbsp; &nbsp; 
	: Cairo_Line_Cap := CAIRO_LINE_CAP_BUTT;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Bulb_Position</b> : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">13.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Bulb_Radius</b>&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">5.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Bulb_Width</b>&nbsp;&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">2.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Color</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := RGB (<font color="#800000">1.0</font>,
	<font color="#800000">0.0</font>, <font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Adjustment</b>&nbsp;&nbsp;&nbsp; : 
	<font color="#0000FF">access</font> Gtk_Adjustment_Record'Class := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Scaled</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return 
	not null access
	</font>Clock_Hand
_Layer;</tt></blockquote>
<p>These procedure and function create a hand. The parameter <b>Under</b> 
specifies the layer location. The 
parameter <b>Center</b> specifies the position of the hand's center in 
<a href="http://cairographics.org/manual/index.html">cairo</a> 
coordinates. The 
			parameter <b>From</b> is the angle corresponding to the value 0.0. The 
			parameter
<b>Length</b> is the angular length of the value 1.0. The hand moves between
<b>From</b> and <b>From</b> + <b>Length</b>. When the
value of
<b>Length</b> is negative the hand moves counterclockwise. The parameter <b>
Tip_Length</b> is the distance between the center and the hand's tip. <b>Tip_Width</b> is the width of the 
hand at its tip. <b>Tip_Cap</b> is the 
style of the hand tip. The parameters <b>Rear_Length</b>, <b>Rear_Width</b>,
<b>Rear_Cap</b> specify the hand rear end. <b>Rear_Length </b>can be negative.<b> 
Bulb_Position</b> is the distance from the hand's center to the bulb's center.
<b>Bulb_Radius</b> is the radius of the bulb. <b>Bulb_Width</b> is the width of 
the bulb's line. <b> Color</b> is 
hand's color. <b>Adjustment</b> is the adjustment object, which state hand would reflect. The lower adjustment's value corresponds to <b>From</b>. The 
upper adjustment's value corresponds to <b>From</b> + <b>Length</b>. When <b>
Adjustment</b> is <font color="#0000FF">null</font>, no adjustment is used. The parameter <b>Scaled</b> when <i><font color="#800000">
			true</font></i> resizes the layer when the widget is 
			resized:<ul>
	<li>The coordinates of the hand's center are multiplied by the size 
	as returned by <a href="#Gtk.Layered.Get_Size">Get_Size</a> and 
	the result is used as the center's coordinates relatively to the widget's 
	center as returned by <a href="#Gtk.Layered.Get_Center">Get_Center</a>;</li>
	<li>The needle's lengths and widths are multiplied by the widget's 
	size.</li>
	</ul>
	<p>Constraint_Error is propagated when some of the parameters are illegal.<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Bulb_Position (<b>Layer</b> : 
Clock_Hand_Layer)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Cairo_Tuple;</tt></p>
</blockquote>
<p>This function returns the hand bulb's position.</p><blockquote>
<p><tt><font color="#0000FF">function</font> Get_Bulb_Radius (<b>Layer</b> : 
Clock_Hand_Layer)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Cairo_Tuple;</tt></p>
</blockquote>
<p>This function returns the hand bulb's radius.</p><blockquote>
<p><tt><font color="#0000FF">function</font> Get_Bulb_Width (<b>Layer</b> : 
Clock_Hand_Layer) <font color="#0000FF">return</font> Cairo_Tuple;</tt></p>
</blockquote>
<p>This function returns the bulb's line width.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Center (<b>Layer</b> : 
Clock_Hand_Layer) <font color="#0000FF">return</font> Cairo_Tuple;</tt></p>
</blockquote>
<p>This function returns the hand's center.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Color (<b>Layer</b> : 
Clock_Hand_Layer) <font color="#0000FF">return</font> Gdk_Color;</tt></p>
</blockquote>
<p>This function returns the hand's color.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_From (<b>Layer</b> : 
Clock_Hand_Layer) <font color="#0000FF">return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the angle of the value 0.0.</p><blockquote>
<p><tt><font color="#0000FF">function</font> Get_Length (<b>Layer</b> : 
Clock_Hand_Layer) <font color="#0000FF">return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the angular length of the hand values range 
[0.0..1.0].</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Rear (<b>Layer</b> : 
Clock_Hand_Layer) <font color="#0000FF">return</font> End_Parameters;</tt></p>
</blockquote>
<p>This function returns the <a href="#Gtk.Layered.Line_Parameters">line 
parameters</a> of the hand's rear end.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Tip (<b>Layer</b> : 
Clock_Hand_Layer) <font color="#0000FF">return</font> End_Parameters;</tt></p>
</blockquote>
<p>This function returns the <a href="#Gtk.Layered.Line_Parameters">line 
parameters</a> of the hand's tip.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; 
: <font color="#0000FF">in out</font> Clock_Hand_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Center</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; : Cairo_Tuple;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; 
: GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Length</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Tip</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; 
: End_Parameters;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Rear</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; 
: End_Parameters;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Bulb_Position</b> : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Bulb_Radius</b>&nbsp;&nbsp; : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Bulb_Width</b>&nbsp;&nbsp;&nbsp; : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Color</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure changes parameters of the layer. The meaning of the parameters 
is same as in the corresponding Gtk_New-subroutines. Constraint_Error is propagated when 
some of the parameters are illegal.</p>
<h3><a name="6.3"></a>6.3. Elliptic bar needle</h3>
<p> 
<a name="Gtk.Layered.Elliptic_Bar"></a>The package 
<a href="#Gtk.Layered.Elliptic_Bar">Gtk.Layered.Elliptic_Bar</a> 
provides needles shaped as an elliptic arc from some starting angle to the angle 
indicating the value:</p>
<blockquote>
	<p><img border="0" src="elliptic_bar.png" width="251" height="157" alt="elliptic bar"></p>
</blockquote>
<p>The needle tip indicates the value on a circular scale with the center in the 
needle's center. The layer type is:</p>
<blockquote>
<p><tt><font color="#0000FF">type </font>Elliptic_Bar_Layer (&lt;&gt;)<font color="#0000FF"> 
is<br>
&nbsp;&nbsp; new </font><a href="#Gtk.Layered.Abstract_Layer">Abstract_Layer</a><font color="#0000FF"><br>
&nbsp;&nbsp; and </font><a href="#Gtk.Layered.Gauge_Needle">Gauge_Needle</a><font color="#0000FF"><br>
&nbsp;&nbsp; and </font><a href="#Gtk.Layered.Scalable_Layer">Scalable_Layer</a><font color="#0000FF"><br>
&nbsp;&nbsp; and </font><a href="#Gtk.Layered.Widened_Layer">Widened_Layer</a>
<font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p align="left">The type implements the <a href="#Gtk.Layered.Gauge_Needle">
Gauge_Needle</a> interface, which can be used to get and set the indicated 
value. Another way to do this is to use an
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.adjustment.html">adjustment object</a>. The following operations are defined in the package:</p>
		<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Add_Elliptic_Bar<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">not null access</font> Layer_Location'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Ellipse</b>&nbsp;&nbsp;&nbsp; : Ellipse_Parameters := Unit_Circle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">3.0</font> * Pi / <font color="#800000">4.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Length</b>&nbsp;&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">3.0</font> * Pi / <font color="#800000">2.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Width</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Color</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= RGB (<font color="#800000">1.0</font>, <font color="#800000">0.0</font>,
	<font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Line_Cap</b>&nbsp;&nbsp; : Cairo_Line_Cap := CAIRO_LINE_CAP_BUTT;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Adjustment</b> : <font color="#0000FF">access</font> Gtk_Adjustment_Record'Class := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Scaled</b>&nbsp;&nbsp;&nbsp;&nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Widened</b>&nbsp;&nbsp;&nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
	function
	</font>Add_Elliptic_Bar<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">not null access</font> Layer_Location'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Ellipse</b>&nbsp;&nbsp;&nbsp; 
	: Ellipse_Parameters := Unit_Circle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">3.0</font> * Pi / <font color="#800000">4.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Length</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">3.0</font> * Pi / <font color="#800000">2.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Width</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Color</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := RGB (<font color="#800000">1.0</font>,
	<font color="#800000">0.0</font>, <font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Line_Cap</b>&nbsp;&nbsp; 
	: Cairo_Line_Cap := CAIRO_LINE_CAP_BUTT;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Adjustment</b> 
	: <font color="#0000FF">access</font> Gtk_Adjustment_Record'Class := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Scaled</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Widened</b>&nbsp;&nbsp;&nbsp; 
	: Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return 
	not null access</font> Elliptic_Bar_Layer;</tt></blockquote>
<p>These procedure and function create an elliptic bar. The parameter <b>Under</b> 
specifies the layer location. <b>Ellipse</b> is the
<a href="#ellipse_parameters">parameters of the ellipse</a> to which the bar 
belongs. <b>From</b> is the angle (between the <i>x</i>-axis and the ellipse 
point) corresponding to the value 0.0. The 
			parameter
<b>Length</b> is the angular length of the value 1.0. The bar is an arc
<b>From</b> and <b>From</b> + <b>Length</b>. When the
value of
<b>Length</b> is negative the needle moves counterclockwise. <b>Width</b> is the width of the 
bar line. <b> Color</b> is 
bar's color. <b>Line_Cap</b> is the style of the bar line ends. <b>Adjustment</b> is the adjustment object, which state needle 
would reflect. The lower adjustment's value corresponds to <b>From</b>. The 
upper adjustment's value corresponds to <b>From</b> + <b>Length</b>. When <b>
Adjustment</b> is <font color="#0000FF">null</font>, no adjustment is used. The parameter <b>Scaled</b> when <i><font color="#800000">
			true</font></i> resizes the layer when the widget is 
			resized:<ul>
	<li>The curvature of <b>Ellipse</b> is divided by the 
	widget's size (as returned by <a href="#Gtk.Layered.Get_Size">Get_Size</a>);</li>
	<li>The radius of <b>Ellipse</b> is multiplied by 
	the size;</li>
	<li>The coordinates of the ellipse center are multiplied by the size and 
	the result is used as the center's coordinates relatively to the widget's 
	center as returned by <a href="#Gtk.Layered.Get_Center">Get_Center</a>.</li>
	</ul>
	<p>When <b>Widened</b> is <i><font color="#800000">true</font></i> the line 
	width is the value of <b>Width</b> multiplied by the widget's size. Constraint_Error is propagated when some of the parameters are illegal.<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Ellipse (<b>Layer</b> : 
Elliptic_Bar_Layer)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Ellipse_Parameters;</tt></p>
</blockquote>
<p>This function returns the <a href="#ellipse_parameters">ellipse parameters</a> 
of the bar's line.</p><blockquote>
<p><tt><font color="#0000FF">function</font> Get_From (<b>Layer</b> : 
Elliptic_Bar_Layer) <font color="#0000FF">return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the angle corresponding to the value 0.0.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Length (<b>Layer</b> : 
Elliptic_Bar_Layer) <font color="#0000FF">return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the angular length of the values range 
[0.0..1.0].</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Line (<b>Layer</b> : 
Elliptic_Bar_Layer) <font color="#0000FF">return</font> Line_Parameters;</tt></p>
</blockquote>
<p>This function returns the <a href="#Gtk.Layered.Line_Parameters">line 
parameters</a> of the bar.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Elliptic_Bar_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Ellipse</b> : Ellipse_Parameters;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp; 
: GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Length</b>&nbsp; : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Line</b>&nbsp;&nbsp;&nbsp; 
: Line_Parameters<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure changes parameters of the layer. The meaning of the parameters 
is same as in the corresponding Gtk_New-subroutines. Constraint_Error is propagated when 
some of the parameters are illegal.</p>
<h3><a name="6.4"></a>6.4. Filled shape needle</h3>
<p> 
<a name="Gtk.Layered.Sector_Needle"></a>The package 
<a href="#Gtk.Layered.Sector_Needle">Gtk.Layered.Sector_Needle</a> provides 
needles shaped as elliptic bagels, sectors and segments:</p>
<blockquote>
	<p><img border="0" src="gauge_sector_needle.png" width="719" height="181" alt="gauge sector needle"></p>
</blockquote>
<p>The layer type is:</p>
<blockquote>
<p><tt><font color="#0000FF">type </font>Sector_Needle_Layer (&lt;&gt;)<font color="#0000FF"> 
is<br>
&nbsp;&nbsp; new </font><a href="#Gtk.Layered.Abstract_Layer">Abstract_Layer</a><font color="#0000FF"><br>
&nbsp;&nbsp; and </font><a href="#Gtk.Layered.Gauge_Needle">Gauge_Needle</a><font color="#0000FF"><br>
&nbsp;&nbsp; and </font><a href="#Gtk.Layered.Scalable_Layer">Scalable_Layer</a>
<font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p align="left">The type implements the <a href="#Gtk.Layered.Gauge_Needle">
Gauge_Needle</a> interface, which can be used to get and set the indicated 
value. Another way to do this is to use an
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.adjustment.html">adjustment object</a>. The following operations are defined in the package:</p>
		<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Add_Sector_Needle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
	<b>Under</b> :
	<font color="#0000FF">not null access
	</font>Layer_Location'Class;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	<b>Outer</b> : Ellipse_Parameters&nbsp; := Unit_Circle;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ 
	<b>Inner</b> : 
	Ellipse_Parameters / <b>Center</b> : Cairo_Tuple; ]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	<b>From</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp; 
	:= <font color="#800000">3.0</font> * Pi / <font color="#800000">4.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Length</b>&nbsp;&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;:= <font color="#800000">3.0</font> * Pi / <font color="#800000">2.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Color</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Color 
	:= RGB (<font color="#800000">1.0</font>, <font color="#800000">0.0</font>,
	<font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Adjustment</b> : <font color="#0000FF">access</font> Gtk_Adjustment_Record'Class := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Scaled</b>&nbsp;&nbsp;&nbsp;&nbsp; : Boolean&nbsp;&nbsp; 
	:= False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
	function
	</font>Add_Sector_Needle<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b> :
	<font color="#0000FF">not null access</font> Layer_Location'Class;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	<b>Outer</b> : Ellipse_Parameters&nbsp; := Unit_Circle;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ 
	<b>Inner</b> : 
	Ellipse_Parameters / <b>Center</b> : Cairo_Tuple; ]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
	<b>From</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;:= <font color="#800000">3.0</font> * Pi / <font color="#800000">4.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Length</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;:=
	<font color="#800000">3.0</font> * Pi / <font color="#800000">2.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Color</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Gdk_Color&nbsp;:= RGB (<font color="#800000">1.0</font>,
	<font color="#800000">0.0</font>, <font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Adjustment</b> 
	: <font color="#0000FF">access</font> Gtk_Adjustment_Record'Class := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Scaled</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: Boolean&nbsp;&nbsp;&nbsp;:= False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return 
	not null access</font> Sector_Needle_Layer;</tt></blockquote>
<p>These procedures and functions create an sector needle. The parameter <b>Under</b> 
specifies the layer location. The outer bound of the shape is an elliptic 
arc of the ellipse specified by the parameter <b>Outer</b>. The arc starts at 
the angle <b>From</b> and goes to the angle corresponding to the current value. 
The value 0.0 corresponds to the angle <b>From</b>. The value 1.0 corresponds to 
the angle <b>From</b> + <b>Length</b>. Note 
that both angles are in the <a href="http://cairographics.org/manual/index.html">cairo</a> coordinate system (absolute). The parameter 
<b>Length</b> can be negative.<ul>
	<li>The inner bound of the background can be another elliptic arc, of which 
	ellipse is specified by the parameter <b>Inner</b>. The inner arc absolute 
	angles are <b>From</b> to <b>From</b> + <b>Length</b>. The ends of two arcs 
	are connected by straight lines;</li>
	<li>When the parameter <b>Center</b> is specified rather than <b>Inner</b>, 
	the ends of the elliptic arc are connected by two straight lines meeting in 
	the point defined by <b>Center</b>. In this case the layer has the shape of 
	an elliptic sector;</li>
	<li>When neither <b>Inner</b> or <b>Center</b> parameter is specified, the 
	ends of the elliptic arc are connected by a straight line. In this case 
	shape is an elliptic sector.</li>
	</ul>
	<p><b> Color</b> is 
	the color used to fill the shape. <b>Adjustment</b> is the adjustment object, which state needle 
would reflect. The lower adjustment's value corresponds to <b>From</b>. The 
upper adjustment's value corresponds to <b>From</b> + <b>Length</b>. When <b>
Adjustment</b> is <font color="#0000FF">null</font>, no adjustment is used. The parameter <b>Scaled</b> when <i><font color="#800000">
			true</font></i> resizes the layer when the widget is 
			resized:<ul>
	<li>The curvature of <b>Ellipse</b> is divided by the 
	widget's size (as returned by <a href="#Gtk.Layered.Get_Size">Get_Size</a>);</li>
	<li>The radius of <b>Ellipse</b> is multiplied by 
	the size;</li>
	<li>The coordinates of the ellipse center are multiplied by the size and 
	the result is used as the center's coordinates relatively to the widget's 
	center as returned by <a href="#Gtk.Layered.Get_Center">Get_Center</a>.</li>
	</ul>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Color (<b>Layer</b> : 
Sector_Needle_Layer) <font color="#0000FF">return</font> Gdk_Color;</tt></p>
</blockquote>
<p>This function returns the fill color.</p><blockquote>
<p><tt><font color="#0000FF">function</font> Get_From (<b>Layer</b> : 
Sector_Needle_Layer) <font color="#0000FF">return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the angle corresponding to the value 0.0.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Inner (<b>Layer</b> : 
Sector_Needle_Layer)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Elliptic_Arc_Closure;</tt></p>
</blockquote>
<p>This function returns the parameters of the inner bound of the background 
shape. The result has the type <a href="#Gtk.Layered.Elliptic_Arc_Closure">Elliptic_Arc_Closure</a>.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Length (<b>Layer</b> : 
Sector_Needle_Layer) <font color="#0000FF">return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the angular length of the values range 
[0.0..1.0].</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Outer (<b>Layer</b> : 
Sector_Needle_Layer)<br>
<font color="#0000FF">&nbsp;&nbsp; return</font> Ellipse_Parameters;</tt></p>
</blockquote>
<p>This function returns the <a href="#ellipse_parameters">parameters</a> of the outer elliptic arc bounding the 
background layer.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp; :
<font color="#0000FF">in out</font> Elliptic_Background_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Outer</b>&nbsp; : Ellipse_Parameters;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Inner</b>&nbsp; : Elliptic_Arc_Closure;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;: 
GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Length</b>&nbsp;: GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Color</b>&nbsp;&nbsp;: Gdk_Color;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure changes parameters of the layer. The meaning of the parameters 
is same as in the corresponding Gtk_New-subroutines. Constraint_Error is propagated when 
some of the parameters are illegal.</p>
<h3><a name="6.5"></a>6.5. Flat needle</h3>
<p> 
<a name="Gtk.Layered.Flat_Needle"></a>The package 
<a href="#Gtk.Layered.Flat_Needle">Gtk.Layered.Flat_Needle</a> provides 
needles for flat scales. The needle moves along a straight line going through 
the needle's center:</p>
<blockquote>
	<p><img border="0" src="gauge_flat_needle.png" width="460" height="220" alt="gauge flat needle"></p>
</blockquote>
<blockquote>
<p><tt><font color="#0000FF">type</font> Flat_Needle_Layer (&lt;&gt;)
<font color="#0000FF">is<br>
&nbsp;&nbsp; new</font> <a href="#Gtk.Layered.Abstract_Layer">Abstract_Layer</a><br>
&nbsp;&nbsp; <font color="#0000FF">and</font> 
<a href="#Gtk.Layered.Gauge_Needle">Gauge_Needle</a><br>
&nbsp;&nbsp; <font color="#0000FF">and</font> 
<a href="#Gtk.Layered.Scalable_Layer">Scalable_Layer</a> <font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p align="left">The type implements the <a href="#Gtk.Layered.Gauge_Needle">
Gauge_Needle</a> interface, which can be used to get and set the indicated 
value. Another way to do this is to use an
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.adjustment.html">adjustment object</a>. The following operations are defined in the package:</p>
		<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Add_Flat_Needle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">not null access</font> Layer_Location'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Cairo_Tuple&nbsp;&nbsp;&nbsp; := 
	(<font color="#800000">0.0</font>, <font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>To</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Cairo_Tuple&nbsp;&nbsp;&nbsp; := (<font color="#800000">0.0</font>,
	<font color="#800000">1.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Tip_Length</b>&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">20.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Tip_Width</b>&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">2.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Tip_Cap</b>&nbsp;&nbsp;&nbsp;&nbsp; : Cairo_Line_Cap := CAIRO_LINE_CAP_BUTT;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Rear_Length</b> : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">3.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Rear_Width</b>&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">3.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Rear_Cap</b>&nbsp;&nbsp;&nbsp; : Cairo_Line_Cap := CAIRO_LINE_CAP_BUTT;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Color</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= RGB (<font color="#800000">1.0</font>, <font color="#800000">0.0</font>,
	<font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Adjustment</b>&nbsp; : <font color="#0000FF">access</font> Gtk_Adjustment_Record'Class := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Scaled</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
	function
	</font>Add_Flat_Needle<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">not null access</font> Layer_Location'Class;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Cairo_Tuple&nbsp;&nbsp;&nbsp; := 
	(<font color="#800000">0.0</font>, <font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>To</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Cairo_Tuple&nbsp;&nbsp;&nbsp; := (<font color="#800000">0.0</font>,
	<font color="#800000">1.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Tip_Length</b>&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">20.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Tip_Width</b>&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">2.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Tip_Cap</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: Cairo_Line_Cap := CAIRO_LINE_CAP_BUTT;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Rear_Length</b> : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">3.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Rear_Width</b>&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">3.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Rear_Cap</b>&nbsp;&nbsp;&nbsp; 
	: Cairo_Line_Cap := CAIRO_LINE_CAP_BUTT;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Color</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := RGB (<font color="#800000">1.0</font>,
	<font color="#800000">0.0</font>, <font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Adjustment</b>&nbsp; 
	: <font color="#0000FF">access</font> Gtk_Adjustment_Record'Class := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Scaled</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return 
	not null access</font> Flat_Needle_Layer;</tt></blockquote>
<p>These procedure and function create a needle. The parameter <b>Under</b> 
specifies the layer location. The needle's center moves between the points
<b>From</b> and <b>To</b>. The value 0.0 corresponds to <b>From</b>. The value 
1.0 corresponds to <b>To</b>. The parameter <b>
Tip_Length</b> is the distance between the center and the needle tip. <b>Tip_Width</b> is the width of the needle at its tip. <b>Tip_Cap</b> is the 
style of the needle tip. The parameters <b>Rear_Length</b>, <b>Rear_Width</b>,
<b>Rear_Cap</b> specify the needle rear end. <b>Rear_Length </b>can be negative.<b> Color</b> is 
needle's color. <b>Adjustment</b> is the adjustment object, which state needle 
would reflect. The lower adjustment's value corresponds to <b>From</b>. The 
upper adjustment's value corresponds to <b>To</b>. When <b>
Adjustment</b> is <font color="#0000FF">null</font>, no adjustment is used. The parameter <b>Scaled</b> when <i><font color="#800000">
			true</font></i> resizes the layer when the widget is 
			resized:<ul>
	<li>The coordinates of the line along which the needle's moves are multiplied by the size 
	as returned by <a href="#Gtk.Layered.Get_Size">Get_Size</a> and 
	the result is used as the center's coordinates relatively to the widget's 
	center as returned by <a href="#Gtk.Layered.Get_Center">Get_Center</a>;</li>
	<li>The needle's lengths and widths are multiplied by the widget's 
	size.</li>
	</ul>
	<p>Constraint_Error is propagated when some of the parameters are illegal. 
	There exist two alternative subroutines to create a flat needle:<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Add_Flat_Needle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">not null access</font> Layer_Location'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Cairo_Tuple&nbsp;&nbsp;&nbsp; := 
	(<font color="#800000">0.0</font>, <font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Angle</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Length</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Tip_Length</b>&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">20.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Tip_Width</b>&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">2.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Tip_Cap</b>&nbsp;&nbsp;&nbsp;&nbsp; : Cairo_Line_Cap := CAIRO_LINE_CAP_BUTT;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Rear_Length</b> : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">3.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Rear_Width</b>&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">3.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Rear_Cap</b>&nbsp;&nbsp;&nbsp; : Cairo_Line_Cap := CAIRO_LINE_CAP_BUTT;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Color</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= RGB (<font color="#800000">1.0</font>, <font color="#800000">0.0</font>,
	<font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Adjustment</b>&nbsp; : <font color="#0000FF">access</font> Gtk_Adjustment_Record'Class := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Scaled</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
	function
	</font>Add_Flat_Needle<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">not null access</font> Layer_Location'Class;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Cairo_Tuple&nbsp;&nbsp;&nbsp; := 
	(<font color="#800000">0.0</font>, <font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Angle</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Length</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Tip_Length</b>&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">20.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Tip_Width</b>&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">2.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Tip_Cap</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: Cairo_Line_Cap := CAIRO_LINE_CAP_BUTT;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Rear_Length</b> : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">3.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Rear_Width</b>&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">3.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Rear_Cap</b>&nbsp;&nbsp;&nbsp; 
	: Cairo_Line_Cap := CAIRO_LINE_CAP_BUTT;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Color</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := RGB (<font color="#800000">1.0</font>,
	<font color="#800000">0.0</font>, <font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Adjustment</b>&nbsp; 
	: <font color="#0000FF">access</font> Gtk_Adjustment_Record'Class := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Scaled</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return 
	not null access</font> Flat_Needle_Layer;</tt></blockquote>
<p>Here instead of the parameter <b>To</b> the point corresponding to the value 
1.0 is specified by <b>Angle</b> and <b>Length</b>.<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Angle (<b>Layer</b> : 
Flat_Needle_Layer) <font color="#0000FF">return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the angle of the line along which needle's center moves.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Color (<b>Layer</b> : 
Flat_Needle_Layer) <font color="#0000FF">return</font> Gdk_Color;</tt></p>
</blockquote>
<p>This function returns the needle's color.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_From (<b>Layer</b> : 
Flat_Needle_Layer) <font color="#0000FF">return</font> Cairo_Tuple;</tt></p>
</blockquote>
<p>This function returns the point corresponding to the value 0.0.</p><blockquote>
<p><tt><font color="#0000FF">function</font> Get_Length (<b>Layer</b> : 
Flat_Needle_Layer) <font color="#0000FF">return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the distance between the points corresponding to the 
values 0.0 and 1.0.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Rear (<b>Layer</b> : 
Flat_Needle_Layer) <font color="#0000FF">return</font> End_Parameters;</tt></p>
</blockquote>
<p>This function returns the <a href="#Gtk.Layered.Line_Parameters">line 
parameters</a> of the needle's rear end.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Tip (<b>Layer</b> : 
Flat_Needle_Layer) <font color="#0000FF">return</font> End_Parameters;</tt></p>
</blockquote>
<p>This function returns the <a href="#Gtk.Layered.Line_Parameters">line 
parameters</a> of the needle's tip.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_To (<b>Layer</b> : 
Flat_Needle_Layer) <font color="#0000FF">return</font> Cairo_Tuple;</tt></p>
</blockquote>
<p>This function returns the point corresponding to the value 1.0.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;: <font color="#0000FF">in out</font> 
Flat_Needle_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;: Cairo_Tuple;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
To&nbsp;&nbsp;&nbsp; </b>: Cairo_Tuple;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Tip</b>&nbsp;&nbsp;&nbsp;: End_Parameters;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Rear</b>&nbsp;&nbsp;: End_Parameters;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Color</b>&nbsp;: Gdk_Color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure</font> Set<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp; 
: <font color="#0000FF">in out</font> Flat_Needle_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp; 
: Cairo_Tuple;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Angle&nbsp; </b>: GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Length </b>: GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Tip</b>&nbsp;&nbsp;&nbsp; 
: End_Parameters;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Rear</b>&nbsp;&nbsp; 
: End_Parameters;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Color</b>&nbsp; : Gdk_Color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures change parameters of the layer. The meaning of the parameters 
is same as in the corresponding Gtk_New-subroutines. Constraint_Error is propagated when 
some of the parameters are illegal.</p>
<h3><a name="6.6"></a>6.6. Bar needle</h3>
<p> 
<a name="Gtk.Layered.Bar"></a>The package <a href="#Gtk.Layered.Bar">Gtk.Layered.Bar</a> provides needles for 
flat scales shaped as a bar:</p>
		<blockquote>
<p><img border="0" src="gauge_bar.png" width="138" height="269" alt="gauge bar"></p>
</blockquote>
<p>The layer type is:</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Bar_Layer (&lt;&gt;)<font color="#0000FF"> is<br>
&nbsp;&nbsp; new </font><a href="#Gtk.Layered.Abstract_Layer">Abstract_Layer</a><br>
&nbsp;&nbsp; <font color="#0000FF">and</font> 
<a href="#Gtk.Layered.Gauge_Needle">Gauge_Needle</a><br>
&nbsp;&nbsp; <font color="#0000FF">and</font> 
<a href="#Gtk.Layered.Scalable_Layer">Scalable_Layer</a><br>
&nbsp;&nbsp; <font color="#0000FF">and</font> 
<a href="#Gtk.Layered.Widened_Layer">Widened_Layer</a> <font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p align="left">The type implements the <a href="#Gtk.Layered.Gauge_Needle">
Gauge_Needle</a> interface, which can be used to get and set the indicated 
value. Another way to do this is to use an
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.adjustment.html">adjustment object</a>. The following operations are defined in the package:</p>
		<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Add_Bar<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: <font color="#0000FF">not null access</font> Layer_Location'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Cairo_Tuple&nbsp;&nbsp;&nbsp; := 
	(<font color="#800000">0.0</font>, <font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>To</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Cairo_Tuple&nbsp;&nbsp;&nbsp; := (<font color="#800000">0.0</font>,
	<font color="#800000">1.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Width</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Color</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= RGB (<font color="#800000">1.0</font>, <font color="#800000">0.0</font>,
	<font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Line_Cap</b>&nbsp;&nbsp; : Cairo_Line_Cap := CAIRO_LINE_CAP_BUTT;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Adjustment</b> : <font color="#0000FF">access</font> Gtk_Adjustment_Record'Class := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Scaled</b>&nbsp;&nbsp;&nbsp;&nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Widened</b>&nbsp;&nbsp;&nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
	function
	</font>Add_Bar<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: <font color="#0000FF">not null access</font> Layer_Location'Class;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Cairo_Tuple&nbsp;&nbsp;&nbsp; := 
	(<font color="#800000">0.0</font>, <font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>To</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Cairo_Tuple&nbsp;&nbsp;&nbsp; := (<font color="#800000">0.0</font>,
	<font color="#800000">1.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Width</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Color</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := RGB (<font color="#800000">1.0</font>,
	<font color="#800000">0.0</font>, <font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Line_Cap</b>&nbsp;&nbsp; 
	: Cairo_Line_Cap := CAIRO_LINE_CAP_BUTT;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Adjustment</b> 
	: <font color="#0000FF">access</font> Gtk_Adjustment_Record'Class := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Scaled</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Widened</b>&nbsp;&nbsp;&nbsp; 
	: Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return 
	not null access
	</font>Bar_Layer;</tt></blockquote>
<p>These procedure and function create a needle. The parameter <b>Under</b> 
specifies the layer location. The needle's center moves between the points
<b>From</b> and <b>To</b>. The value 0.0 corresponds to <b>From</b>. The value 
1.0 corresponds to <b>To</b>. <b>Width</b> is the width of the needle's line. <b>Cap</b> is the 
style of the line ends. <b> Color</b> is 
needle's color. <b>Adjustment</b> is the adjustment object, which state needle 
would reflect. The lower adjustment's value corresponds to <b>From</b>. The 
upper adjustment's value corresponds to <b>To</b>. When <b>
Adjustment</b> is <font color="#0000FF">null</font>, no adjustment is used. The parameter <b>Scaled</b> when <i><font color="#800000">
			true</font></i> resizes the layer when the widget is 
			resized:<ul>
	<li>The coordinates of the line along which the needle's moves are multiplied by the size 
	as returned by <a href="#Gtk.Layered.Get_Size">Get_Size</a> and 
	the result is used as the center's coordinates relatively to the widget's 
	center as returned by <a href="#Gtk.Layered.Get_Center">Get_Center</a>;</li>
	<li>The needle's lengths and widths are multiplied by the widget's 
	size.</li>
	</ul>
	<p>When <b>Widened</b> is <i><font color="#800000">true</font></i> the line 
	width is the value of <b>Width</b> multiplied by the widget's size. Constraint_Error is propagated when some of the parameters are illegal. 
	There exist two alternative subroutines to create a flat needle:<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Add_Bar<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: <font color="#0000FF">not null access</font> Layer_Location'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Cairo_Tuple&nbsp;&nbsp;&nbsp; := 
	(<font color="#800000">0.0</font>, <font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Angle</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Length</b>&nbsp;&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Width</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Color</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= RGB (<font color="#800000">1.0</font>, <font color="#800000">0.0</font>,
	<font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Line_Cap</b>&nbsp;&nbsp; : Cairo_Line_Cap := CAIRO_LINE_CAP_BUTT;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Adjustment</b> : <font color="#0000FF">access</font> Gtk_Adjustment_Record'Class := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Scaled</b>&nbsp;&nbsp;&nbsp;&nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Widened</b>&nbsp;&nbsp;&nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
	function
	</font>Add_Bar<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: <font color="#0000FF">not null access</font> Layer_Location'Class;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Cairo_Tuple&nbsp;&nbsp;&nbsp; := 
	(<font color="#800000">0.0</font>, <font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Angle</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Length</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Width</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Color</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := RGB (<font color="#800000">1.0</font>,
	<font color="#800000">0.0</font>, <font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Line_Cap</b>&nbsp;&nbsp; 
	: Cairo_Line_Cap := CAIRO_LINE_CAP_BUTT;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Adjustment</b> 
	: <font color="#0000FF">access</font> Gtk_Adjustment_Record'Class := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Scaled</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Widened</b>&nbsp;&nbsp;&nbsp; 
	: Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return 
	not null access</font> Bar_Layer;</tt></blockquote>
<p>Here instead of the parameter <b>To</b> the point corresponding to the value 
1.0 is specified by <b>Angle</b> and <b>Length</b>.<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Angle (<b>Layer</b> : 
Bar_Layer) <font color="#0000FF">return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the angle of the line along which needle's center moves.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_From (<b>Layer</b> : 
Bar_Layer) <font color="#0000FF">return</font> Cairo_Tuple;</tt></p>
</blockquote>
<p>This function returns the point corresponding to the value 0.0.</p><blockquote>
<p><tt><font color="#0000FF">function</font> Get_Length (<b>Layer</b> : 
Bar_Layer) <font color="#0000FF">return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the distance between the points corresponding to the 
values 0.0 and 1.0.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Line (<b>Layer</b> : 
Bar_Layer) <font color="#0000FF">return</font> Line_Parameters;</tt></p>
</blockquote>
<p>This function returns the <a href="#Gtk.Layered.Line_Parameters">line 
parameters</a> of the bar.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_To (<b>Layer</b> : 
Bar_Layer) <font color="#0000FF">return</font> Cairo_Tuple;</tt></p>
</blockquote>
<p>This function returns the point corresponding to the value 1.0.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;: <font color="#0000FF">in out</font> 
Flat_Needle_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;: Cairo_Tuple;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
To&nbsp;&nbsp;&nbsp; </b>: Cairo_Tuple;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Line</b>&nbsp;&nbsp;: 
Line_Parameters<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure</font> Set<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp; 
: <font color="#0000FF">in out</font> Flat_Needle_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp; 
: Cairo_Tuple;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Angle&nbsp; </b>: GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Length </b>: GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Line</b>&nbsp; &nbsp;: 
Line_Parameters<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures change parameters of the layer. The meaning of the parameters 
is same as in the corresponding Gtk_New-subroutines. Constraint_Error is propagated when 
some of the parameters are illegal.</p>
<h3><a name="6.7"></a>6.7. Digital value</h3>
<p> 
<a name="Gtk.Layered.Digital"></a>The package <a href="#Gtk.Layered.Label">
Gtk.Layered.Digital</a> provides a layer indicating a value as a text:</p>
<blockquote>
<p><tt><font color="#0000FF">
<img border="0" src="digital_layer.png" width="25" height="53" alt="digital layer"></font></tt></p>
</blockquote>
<p>Here the value 13.5 is indicated in 1<font face="Times New Roman">&frac12;</font> 
&#960; rotated text. The layer is basically <a href="#Gtk.Layered.Label">Label_Layer</a> 
which text is determined by the indicated value. Value to text conversion is 
performed by a primitive operation <a href="#Gtk.Layered.Digital.Render">Render</a> 
which can be overridden when necessary. The layer type is declared as follows:</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Digital_Layer (&lt;&gt;)<font color="#0000FF"> is new
<a href="#Gtk.Layered.Label">Label</a></font><a href="#Gtk.Layered.Label">_Layer</a>
<font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p align="left">The following operations are defined in the package:</p>
		<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Add_Digital<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;: <font color="#0000FF">not null access</font> Layer_Location'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Text</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : UTF8_String := &quot;&quot;;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Location</b>&nbsp;&nbsp; : Cairo_Tuple := (<font color="#800000">0.0</font>,
	<font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Face</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 
	Pango_Cairo_Font :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; Create_Toy<br>
&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	(&nbsp; Family =&gt; &quot;<font color="#FF0000">sans</font>&quot;,<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	Slant&nbsp; =&gt; CAIRO_FONT_SLANT_NORMAL,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	Weight =&gt; CAIRO_FONT_WEIGHT_NORMAL<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Height</b>&nbsp;&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">12.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Stretch</b>&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Mode</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Text_Transformation := 
	Rotated;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Color</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= RGB (<font color="#800000">0.0</font>, <font color="#800000">0.0</font>,
	<font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Angle</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Skew</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 
	GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Base</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: NumberBase&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">10</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Precision</b>&nbsp; : Integer&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Absolute</b>&nbsp;&nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= True;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Put_Plus</b>&nbsp;&nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Adjustment</b> : <font color="#0000FF">access</font> 
	Gtk_Adjustment_Record'Class := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Scaled</b>&nbsp;&nbsp;&nbsp;&nbsp; : Boolean&nbsp;:= False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
	function
	</font>Add_Digital<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;: <font color="#0000FF">not null access</font> Layer_Location'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Text</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: UTF8_String := &quot;&quot;;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Location</b>&nbsp;&nbsp; 
	: Cairo_Tuple := (<font color="#800000">0.0</font>, <font color="#800000">
	0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Face</b>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; 
	: Pango_Cairo_Font :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Create_Toy<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; 
	(&nbsp; Family =&gt; &quot;<font color="#FF0000">sans</font>&quot;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; 
	Slant&nbsp; =&gt; CAIRO_FONT_SLANT_NORMAL,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	Weight =&gt; CAIRO_FONT_WEIGHT_NORMAL<br>
&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Height</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">12.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Stretch</b>&nbsp;&nbsp;&nbsp; : 
	GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Mode</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Text_Transformation := 
	Rotated;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Color</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := 
	RGB (<font color="#800000">0.0</font>, <font color="#800000">0.0</font>,
	<font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Angle</b>&nbsp;&nbsp;&nbsp; &nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Skew</b>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Base</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: NumberBase&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">10</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Precision</b>&nbsp; 
	: Integer&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Absolute</b>&nbsp;&nbsp; 
	: Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= True;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Put_Plus</b>&nbsp;&nbsp; 
	: Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Adjustment</b> 
	: <font color="#0000FF">access</font> Gtk_Adjustment_Record'Class :=
	<font color="#0000FF">null</font>;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Scaled</b>&nbsp;&nbsp;&nbsp;&nbsp; : Boolean&nbsp;:= False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return 
	not null access
	</font>Digital_Layer;</tt></blockquote>
<p>These procedure and function create a layer representing a changing value as a text. The parameter <b>Under</b> 
specifies the layer location. <b>Text</b> is the text to draw. <b>Location</b> 
is the point where the text should be placed. <b>Face</b> is the font used 
			for annotation texts. <b>Height</b> is the height of the annotation 
			texts. <b>Stretch</b> is the factor by which the original text width 
			is stretched. When <b>Stretch</b> is 1.0, the text's height to width 
			relation is not changed. <b>Mode</b> is text transformation mode:<ul>
	<li><i>Move_Centered</i>, <i>Move_Inside</i>, <i>Move_Outside</i> use the 
	line which angle is specified by the parameter <b>Angle</b> to align the 
	text as defined for these <a href="#Gtk.Layered.Text_Transformation">text transformation modes</a>, 
	the parameter <b>Skew</b> is ignored. Note that the text itself is not 
	rotated;</li>
	<li><i>Rotated</i> uses <b>Angle</b> as the angle of the horizontal text 
	axis, the parameter <b>Skew</b> is ignored;</li>
	<li><i>Skewed</i> uses <b>Angle</b> as the angle of the horizontal text axis 
	and does <b>Skew</b> as the angle between the horizontal text axis and the 
	vertical text axis of the text origin.</li>
	</ul>
	<p><b> Color</b> is the text color. The parameter <b>Scaled</b> when <i><font color="#800000">
			true</font></i> resizes the layer when the widget is 
			resized:<ul>
	<li>The coordinates of the text location are multiplied by the widget's size 
	(as returned by <a href="#Gtk.Layered.Get_Size">Get_Size</a>), and 
	the result is used as the center's coordinates relatively to the widget's 
	center (as returned by <a href="#Gtk.Layered.Get_Center">Get_Center</a>);</li>
	<li>The text height is multiplied by the widget's size.</li>
	</ul>
	<p><b>Base</b> is the base used for the value representation: 2..16. <b>
	Precision</b> and <b>Absolute</b> specify the precision of the value in the 
	digits specified by <b>Base</b>. When <b>Absolute</b> is
	<font color="#800000"><i>true</i></font>, <b>Precision</b> is absolute, e.g.
	<b>Precision</b> = -3 specifies that all digits of the value are valid up to 
	third digit after the point. When <b>Absolute</b> is <font color="#800000">
	<i>false</i></font>, Precision is relative and specifies the total number of 
	valid digits starting from the most significant digit. The parameter <b>
	Put_Plus</b> when <font color="#800000"><i>true</i></font> forces sign for 
	positive values.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Absolute (<b>Layer</b> : 
Digital_Layer) <font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <font color="#800000"><i>true</i></font> if the 
absolute precision is used.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Adjustment (<b>Layer</b> : 
Digital_Layer)<br>
&nbsp;<font color="#0000FF">&nbsp; return</font> Gtk_Adjustment;</tt></p>
</blockquote>
<p>This function returns the adjustment object which state is indicated by the 
layer. The result is <font color="#0000FF">null</font> when no adjustment is 
used.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Angle (<b>Layer</b> : 
Digital_Layer) <font color="#0000FF">return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the text angle.</p><blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Layered.Digital.Get_Base"></a>function</font> 
Get_Base (<b>Layer</b> : 
Digital_Layer) <font color="#0000FF">return</font> NumberBase;</tt></p>
</blockquote>
<p>This function returns the base used for conversion indicated value to text.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Color (<b>Layer</b> : 
Digital_Layer) <font color="#0000FF">return</font> Gdk_Color;</tt></p>
</blockquote>
<p>This function returns the text color.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Face (<b>Layer</b> : 
Digital_Layer) <font color="#0000FF">return</font> Pango_Cairo_Font;</tt></p>
</blockquote>
<p>This function returns a handle to the text font.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Height (<b>Layer</b> : 
Digital_Layer) <font color="#0000FF">return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the text height.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Location (<b>Layer</b> : 
Digital_Layer) <font color="#0000FF">return</font> Cairo_Tuple;</tt></p>
</blockquote>
<p>This function returns the text position.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Mode (<b>Layer</b> : 
Digital_Layer) <font color="#0000FF">return</font> Text_Transformation;</tt></p>
</blockquote>
<p>This function returns the <a href="#Gtk.Layered.Text_Transformation">texts transformation mode</a>.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Precision (<b>Layer</b> : 
Digital_Layer) <font color="#0000FF">return</font> Integer;</tt></p>
</blockquote>
<p>This function returns the precision used for conversion indicated values to 
text. The precision is specified in valid digits of the current base as returned by
<a href="#Gtk.Layered.Digital.Get_Base">Get_Base</a>.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Put_Plus (<b>Layer</b> : 
Digital_Layer) <font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <font color="#800000"><i>true</i></font> if sign is 
used for positive values.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Stretch (<b>Layer</b> : 
Digital_Layer) <font color="#0000FF">return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the factor by which the text original width is 
stretched.</p><blockquote>
<p><tt><font color="#0000FF">function</font> Get_Skew (<b>Layer</b> : 
Digital_Layer) <font color="#0000FF">return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the angle between the horizontal text axis and the 
vertical text axis of the text origin.</p><blockquote>
<p><tt><font color="#0000FF">function</font> Get_Text (<b>Layer</b> 
: Digital_Layer) <font color="#0000FF">
return</font> UTF8_String;</tt></p>
</blockquote>
<p>This function returns the text.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Value (<b>Layer</b> 
: Digital_Layer) <font color="#0000FF">
return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns currently indicated value. The implementation is 
task-safe, callable on the context of a task different from the GTK loop task.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Layered.Digital.Render"></a>function</font> 
Render (<b>Layer</b> : 
Digital_Layer; <b>Value</b> : GDouble)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> UTF8_String;</tt></p>
</blockquote>
<p>This function is used to obtain the text indicated by the layer. The function 
can be overridden to change the layer's behavior.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out</font> 
Digital_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Location</b>&nbsp; : Cairo_Tuple;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Face</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 
Pango_Cairo_Font;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Height</b>&nbsp;&nbsp;&nbsp; : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Stretch</b>&nbsp;&nbsp; : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Mode</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Text_Transformation;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Color</b>&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Color;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Angle</b>&nbsp;&nbsp;&nbsp;&nbsp; : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Skew</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 
GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Base&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: NumberBase;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Precision : Integer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Absolute&nbsp; : Boolean;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Put_Plus&nbsp; : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure changes parameters of the layer. The meaning of the parameters 
is same as in the corresponding Gtk_New-subroutines. Constraint_Error is propagated when 
some of the parameters are illegal.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Value (<b>Layer</b> :
<font color="#0000FF">in out</font> Digital_Layer; <b>Value</b> : GDouble);</tt></p>
</blockquote>
<p>This procedure changes the indicated value. It is task-safe, it can be called on the 
context of a task different from the main loop task.</p>
<hr>
<p align="right">
<a name="7"></a><a href="#6"><IMG src="prev.gif" alt="[Back]" width="29" height="29"></a><a href="#16"
><IMG src="index.gif" alt="[TOC]" width="29" height="29"></a><a href="#8"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H2>7. Shapes</H2>
<p>Layers described in this chapter represent various shapes.</p>
<h3><a name="7.1"></a>7.1. Arc</h3>
<p> 
<a name="Gtk.Layered.Arc"></a>The package <a href="#Gtk.Layered.Arc">
Gtk.Layered.Arc</a> provides an elliptic arc.</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Arc_Layer (&lt;&gt;)<font color="#0000FF"> is<br>
&nbsp;&nbsp; new </font><a href="#Gtk.Layered.Abstract_Layer">Abstract_Layer</a><br>
&nbsp;&nbsp; <font color="#0000FF">and</font> 
<a href="#Gtk.Layered.Scalable_Layer">Scalable_Layer</a><br>
&nbsp;&nbsp; <font color="#0000FF">and</font> 
<a href="#Gtk.Layered.Widened_Layer">Widened_Layer</a> <font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p align="left">The following operations are defined in the package:</p>
		<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Add_Arc<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b>&nbsp;&nbsp;&nbsp;&nbsp;: <font color="#0000FF">not null access</font> Layer_Location'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Ellipse</b>&nbsp; : Ellipse_Parameters := Unit_Circle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Length</b>&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">2.0</font> * Pi;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Width</b>&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Color</b>&nbsp;&nbsp;&nbsp; : Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= RGB (<font color="#800000">0.0</font>, <font color="#800000">0.0</font>,
	<font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Line_Cap</b> : Cairo_Line_Cap&nbsp;&nbsp;&nbsp;&nbsp; := CAIRO_LINE_CAP_BUTT;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Scaled</b>&nbsp;&nbsp;&nbsp;: Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Widened</b>&nbsp;&nbsp;: Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
	function
	</font>Add_Bar<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b>&nbsp;&nbsp;&nbsp;&nbsp;: <font color="#0000FF">not null access</font> Layer_Location'Class;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Ellipse</b>&nbsp; : Ellipse_Parameters := Unit_Circle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Length</b>&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">2.0</font> * Pi;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Width</b>&nbsp;&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Color</b>&nbsp;&nbsp;&nbsp; 
	: Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := RGB (<font color="#800000">0.0</font>,
	<font color="#800000">0.0</font>, <font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Line_Cap</b> 
	: Cairo_Line_Cap&nbsp;&nbsp;&nbsp;&nbsp; := CAIRO_LINE_CAP_BUTT;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Scaled</b>&nbsp;&nbsp;&nbsp;: Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := False;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Widened</b>&nbsp;&nbsp;: Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return 
	not null access
	</font>Arc_Layer;</tt></blockquote>
<p>These procedure and function create a layer drawing an elliptic arc. The parameter <b>Under</b> 
specifies the layer location. <b>Ellipse</b> is the
<a href="#ellipse_parameters">parameters of the ellipse</a> to which the arc 
belongs. <b>From</b> is the angle (between the <i>x</i>-axis and the ellipse 
point) of the first point of the arc. The 
			parameter
<b>Length</b> is the angular length of the arc. When the value of <b>Length</b> is negative the 
arc is drawn counterclockwise. <b>Width</b> is the width of the 
line. <b> Color</b> is 
line color. <b>Line_Cap</b> is the style of the line ends. The parameter <b>Scaled</b> when <i><font color="#800000">
			true</font></i> resizes the layer when the widget is 
			resized:<ul>
	<li>The curvature of <b>Ellipse</b> is divided by the 
	widget's size (as returned by <a href="#Gtk.Layered.Get_Size">Get_Size</a>);</li>
	<li>The radius of <b>Ellipse</b> is multiplied by 
	the size;</li>
	<li>The coordinates of the ellipse center are multiplied by the size and 
	the result is used as the center's coordinates relatively to the widget's 
	center as returned by <a href="#Gtk.Layered.Get_Center">Get_Center</a>.</li>
	</ul>
	<p>When <b>Widened</b> is <i><font color="#800000">true</font></i> the line 
	width is the value of <b>Width</b> multiplied by the widget's size. Constraint_Error is propagated when some of the parameters are illegal.<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Ellipse (<b>Layer</b> : 
Arc_Layer) <font color="#0000FF">return</font> Ellipse_Parameters;</tt></p>
</blockquote>
<p>This function returns the <a href="#ellipse_parameters">ellipse parameters</a> 
of the bar's line.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_From (<b>Layer</b> : 
Arc_Layer) <font color="#0000FF">return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the angle of the first point of the arc.</p><blockquote>
<p><tt><font color="#0000FF">function</font> Get_Length (<b>Layer</b> : 
Arc_Layer) <font color="#0000FF">return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the angular length of the arc.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Line (<b>Layer</b> : 
Arc_Layer) <font color="#0000FF">return</font> Line_Parameters;</tt></p>
</blockquote>
<p>This function returns the <a href="#Gtk.Layered.Line_Parameters">line 
parameters</a> of the bar.</p>
		<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;&nbsp; 
: <font color="#0000FF">in out </font>Arc_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Ellipse</b> : Ellipse_Parameters;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp; 
: GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Length</b>&nbsp; : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Line</b>&nbsp;&nbsp;&nbsp; 
: Line_Parameters<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures change parameters of the layer. The meaning of the parameters 
is same as in the corresponding Gtk_New-subroutines. Constraint_Error is propagated when 
some of the parameters are illegal.</p>
<h3><a name="7.2"></a>7.2. Cap</h3>
<p> 
<a name="Gtk.Layered.Cap"></a>The package <a href="#Gtk.Layered.Cap">
Gtk.Layered.Cap</a> provides round caps having a 3-D look:</p>
<blockquote>
	<p><img border="0" src="gauge_cap.png" width="125" height="125" alt="gauge cap"></p>
	<p><tt><font color="#0000FF">type</font> Cap_Layer (&lt;&gt;)<font color="#0000FF"> is new
	</font><a href="#Gtk.Layered.Abstract_Bordered.Abstract_Bordered_Layer">Abstract_Bordered_Layer</a>
	<font color="#0000FF"> with private</font>;</tt></p>
</blockquote>
<p align="left">The following operations are defined in the package:</p>
		<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Add_Cap<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">not null access</font> Layer_Location'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Center</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Cairo_Tuple&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= (<font color="#800000">0.0</font>, <font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Radius</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := RGB (<font color="#800000">1.0</font>,
	<font color="#800000">1.0</font>, <font color="#800000">1.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>To</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := RGB (<font color="#800000">0.5</font>,
	<font color="#800000">0.5</font>, <font color="#800000">0.5</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Border_Width</b>&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Border_Depth</b>&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Border_Color</b>&nbsp; : Border_Color_Type := Default_Color;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Border_Shadow</b> : Gtk_Shadow_Type&nbsp;&nbsp; := Shadow_Out;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Deepened</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Scaled</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Widened</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
	function
	</font>Add_Cap<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: <font color="#0000FF">not null access</font> Layer_Location'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Center</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Cairo_Tuple&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := (<font color="#800000">0.0</font>,
	<font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Radius</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := RGB (<font color="#800000">1.0</font>,
	<font color="#800000">1.0</font>, <font color="#800000">1.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>To</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := RGB (<font color="#800000">0.5</font>,
	<font color="#800000">0.5</font>, <font color="#800000">0.5</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Border_Width</b>&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Border_Depth</b>&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Border_Color</b>&nbsp; : Border_Color_Type := Default_Color;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Border_Shadow</b> : Gtk_Shadow_Type&nbsp;&nbsp; := Shadow_Out;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Deepened</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := 
	False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Scaled</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := 
	False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Widened</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := 
	False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return 
	not null access
	</font>Cap_Layer;</tt></blockquote>
<p>These procedure and function create a cap. The parameter <b>Under</b> 
specifies the layer location. <b>Center</b> is the cap's center. <b>Radius</b> 
is the cap's radius. <b>From</b>..<b>To</b> is the range of colors the cap has 
on its diagonal. The parameters
	<b>Border_Width</b>, <b>Border_Depth</b>, <b>Border_Color</b>, <b>
	Border_Shadow</b> are the parameters the cap's border. See the 
	procedure <a href="#Gtk.Layered.Abstract_Bordered.Set">Set</a> for the 
	meaning of these parameters. The parameters <b>Deepened</b> and <b>Widened</b> 
	define the border's behavior upon the widget's layer sizing as described in
	<a href="#Gtk.Layered.Abstract_Bordered.Set_Deepened">Set_Deepened</a> and 
	<a href="#Gtk.Layered.Set_Widened">Set_Widened</a>. The 
	parameter <b>Scaled</b> controls the layer and border resizing (see
	<a href="#Gtk.Layered.Set_Scaled">Set_Scaled</a>). 
	Constraint_Error is propagated when some of the parameters are illegal.<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Center (<b>Layer</b> : 
Cap_Layer) <font color="#0000FF">return</font> Cairo_Tuple;</tt></p>
</blockquote>
<p>This function returns the cap's center.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_From (<b>Layer</b> : 
Cap_Layer) <font color="#0000FF">return</font> Gdk_Color;</tt></p>
</blockquote>
<p>This function returns the first color of the cap.</p><blockquote>
<p><tt><font color="#0000FF">function</font> Get_Radius (<b>Layer</b> : 
Cap_Layer) <font color="#0000FF">return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the cap's radius.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_To (<b>Layer</b> : 
Cap_Layer) <font color="#0000FF">return</font> Gdk_Color;</tt></p>
</blockquote>
<p>This function returns the last color of the cap.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Cap_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Center</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Cairo_Tuple;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Radius</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Gdk_Color;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>To</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Gdk_Color;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Border_Width</b>&nbsp; : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Border_Depth</b>&nbsp; : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Border_Color</b>&nbsp; : Border_Color_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Border_Shadow</b> : Gtk_Shadow_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures change parameters of the layer. The meaning of the parameters 
is same as in the corresponding Gtk_New-subroutines. Constraint_Error is propagated when 
some of the parameters are illegal.</p>
<h3><a name="7.3"></a>7.3. Line</h3>
<p> 
<a name="Gtk.Layered.Line"></a>The package <a href="#Gtk.Layered.Line">
Gtk.Layered.Line</a> provides an elliptic arc.</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Line_Layer (&lt;&gt;)<font color="#0000FF"> is<br>
&nbsp;&nbsp; new </font><a href="#Gtk.Layered.Abstract_Layer">Abstract_Layer</a><br>
&nbsp;&nbsp; <font color="#0000FF">and</font> 
<a href="#Gtk.Layered.Scalable_Layer">Scalable_Layer</a><br>
&nbsp;&nbsp; <font color="#0000FF">and</font> 
<a href="#Gtk.Layered.Widened_Layer">Widened_Layer</a> <font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p align="left">The following operations are defined in the package:</p>
		<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Add_Line<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b>&nbsp;&nbsp;&nbsp;&nbsp;: <font color="#0000FF">not null access</font> Layer_Location'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From&nbsp;&nbsp;
	</b>&nbsp; : Cairo_Tuple&nbsp;&nbsp;&nbsp; := (<font color="#800000">0.0</font>,
	<font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>To</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Cairo_Tuple&nbsp;&nbsp;&nbsp; := (<font color="#800000">0.0</font>,
	<font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Width</b>&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Color</b>&nbsp;&nbsp;&nbsp; : Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := RGB 
	(<font color="#800000">0.0</font>, <font color="#800000">0.0</font>,
	<font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Line_Cap</b> : Cairo_Line_Cap := CAIRO_LINE_CAP_BUTT;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Scaled</b>&nbsp;&nbsp;&nbsp;: Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Widened</b>&nbsp;&nbsp;: Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
	function
	</font>Add_Line<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b>&nbsp;&nbsp;&nbsp;&nbsp;: <font color="#0000FF">not null access</font> Layer_Location'Class;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From&nbsp;&nbsp;
	</b>&nbsp; : Cairo_Tuple&nbsp;&nbsp;&nbsp; := (<font color="#800000">0.0</font>,
	<font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>To</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Cairo_Tuple&nbsp;&nbsp;&nbsp; := (<font color="#800000">0.0</font>,
	<font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Width</b>&nbsp;&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Color</b>&nbsp;&nbsp;&nbsp; 
	: Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := RGB (<font color="#800000">0.0</font>,
	<font color="#800000">0.0</font>, <font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Line_Cap</b> 
	: Cairo_Line_Cap := CAIRO_LINE_CAP_BUTT;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Scaled</b>&nbsp;&nbsp;&nbsp;: Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= False;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Widened</b>&nbsp;&nbsp;: Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return 
	not null access
	</font>Line_Layer;</tt></blockquote>
<p>These procedure and function create a layer drawing a straight line. The parameter <b>Under</b> 
specifies the layer location. <b>From</b> and <b>To</b> are the line starting 
and end points.<b> Width</b> is the width of the 
line. <b> Color</b> is 
line color. <b>Line_Cap</b> is the style of the line ends. The parameter <b>Scaled</b> when <i><font color="#800000">
			true</font></i> resizes the layer resizing when the widget is 
resized. The coordinates of the line are multiplied by the size 
	as returned by <a href="#Gtk.Layered.Get_Size">Get_Size</a> and 
	the result is used as the center's coordinates relatively to the widget's 
	center as returned by <a href="#Gtk.Layered.Get_Center">Get_Center</a>. When <b>Widened</b> is <i><font color="#800000">true</font></i> the line 
	width is the value of <b>Width</b> multiplied by the widget's size. Constraint_Error is propagated when some of the parameters are illegal. 
	There exist two alternative subroutines to create a line:<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Add_Line<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b>&nbsp;&nbsp;&nbsp;&nbsp;: <font color="#0000FF">not null access</font> Layer_Location'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From&nbsp;&nbsp;
	</b>&nbsp; : Cairo_Tuple&nbsp;&nbsp;&nbsp; := (<font color="#800000">0.0</font>,
	<font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Angle</b>&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Length</b>&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Width</b>&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Color</b>&nbsp;&nbsp;&nbsp; : Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := RGB 
	(<font color="#800000">0.0</font>, <font color="#800000">0.0</font>,
	<font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Line_Cap</b> : Cairo_Line_Cap := CAIRO_LINE_CAP_BUTT;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Scaled</b>&nbsp;&nbsp;&nbsp;: Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Widened</b>&nbsp;&nbsp;: Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
	function
	</font>Add_Line<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b>&nbsp;&nbsp;&nbsp;&nbsp;: <font color="#0000FF">not null access</font> Layer_Location'Class;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From&nbsp;&nbsp;
	</b>&nbsp; : Cairo_Tuple&nbsp;&nbsp;&nbsp; := (<font color="#800000">0.0</font>,
	<font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Angle</b>&nbsp;&nbsp;&nbsp;&nbsp;: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Length</b>&nbsp;&nbsp;&nbsp;: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Width</b>&nbsp;&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Color</b>&nbsp;&nbsp;&nbsp; 
	: Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := RGB (<font color="#800000">0.0</font>,
	<font color="#800000">0.0</font>, <font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Line_Cap</b> 
	: Cairo_Line_Cap := CAIRO_LINE_CAP_BUTT;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Scaled</b>&nbsp;&nbsp;&nbsp;: Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= False;<br>
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Widened</b>&nbsp;&nbsp;: Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return 
	not null access
	</font>Line_Layer;</tt></blockquote>
<p>Here instead of the parameter <b>To</b> the end point is specified by <b>Angle</b> and <b>Length</b>.<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Angle (<b>Layer</b> : 
Line_Layer) <font color="#0000FF">return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the angle of the line.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_From (<b>Layer</b> : 
Line_Layer) <font color="#0000FF">return</font> Cairo_Tuple;</tt></p>
</blockquote>
<p>This function returns the first point of the line.</p><blockquote>
<p><tt><font color="#0000FF">function</font> Get_Length (<b>Layer</b> : 
Line_Layer) <font color="#0000FF">return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the distance between the points corresponding to the 
values 0.0 and 1.0.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Line (<b>Layer</b> : 
Line_Layer) <font color="#0000FF">return</font> Line_Parameters;</tt></p>
</blockquote>
<p>This function returns the <a href="#Gtk.Layered.Line_Parameters">line 
parameters</a> of the bar.</p>
		<blockquote>
<p><tt><font color="#0000FF">function</font> Get_To (<b>Layer</b> : 
Line_Layer) <font color="#0000FF">return</font> Cairo_Tuple;</tt></p>
</blockquote>
<p>This function returns the last point of the line.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;: <font color="#0000FF">in out</font> 
Line_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;: Cairo_Tuple;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
To&nbsp;&nbsp;&nbsp; </b>: Cairo_Tuple;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Line</b>&nbsp;&nbsp;: 
Line_Parameters<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure</font> Set<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp; 
: <font color="#0000FF">in out</font> Line_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp; 
: Cairo_Tuple;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Angle&nbsp; </b>: GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Length </b>: GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Line</b>&nbsp; &nbsp;: 
Line_Parameters<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>These procedures change parameters of the layer. The meaning of the parameters 
is same as in the corresponding Gtk_New-subroutines. Constraint_Error is propagated when 
some of the parameters are illegal.</p>
<h3><a name="7.4"></a>7.4. Text (label)</h3>
<p> 
<a name="Gtk.Layered.Label"></a>The package <a href="#Gtk.Layered.Label">
Gtk.Layered.Label</a> provides a layer drawing a text:</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Label_Layer (&lt;&gt;)<font color="#0000FF"> is<br>
&nbsp;&nbsp; new </font><a href="#Gtk.Layered.Abstract_Layer">Abstract_Layer</a>
<font color="#0000FF"> and</font> <a href="#Gtk.Layered.Scalable_Layer">Scalable_Layer</a>
<font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p align="left">The following operations are defined in the package:</p>
		<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Add_Label<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b>&nbsp;&nbsp;&nbsp;&nbsp;: <font color="#0000FF">not null access</font> Layer_Location'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Text</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: UTF8_String := &quot;&quot;;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Location</b> : Cairo_Tuple := (<font color="#800000">0.0</font>,
	<font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Face</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: Pango_Cairo_Font :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	Create_Toy<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	(&nbsp; Family =&gt; &quot;<font color="#FF0000">sans</font>&quot;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	Slant&nbsp; =&gt; CAIRO_FONT_SLANT_NORMAL,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	Weight =&gt; CAIRO_FONT_WEIGHT_NORMAL<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Height</b>&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">12.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Stretch</b>&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Mode</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: Text_Transformation := Moved_Centered;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Color</b>&nbsp;&nbsp;&nbsp; : Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= RGB (<font color="#800000">0.0</font>, <font color="#800000">0.0</font>,
	<font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Angle</b>&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">3.0</font> * Pi / <font color="#800000">2.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Skew</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Markup</b>&nbsp;&nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Scaled</b>&nbsp;&nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
	function
	</font>Add_Label<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b>&nbsp;&nbsp;&nbsp;&nbsp;: <font color="#0000FF">not null access</font> Layer_Location'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Text</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: UTF8_String := &quot;&quot;;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Location</b> 
	: Cairo_Tuple := (<font color="#800000">0.0</font>, <font color="#800000">
	0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Face</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: Pango_Cairo_Font :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	Create_Toy<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	(&nbsp; Family =&gt; &quot;<font color="#FF0000">sans</font>&quot;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	Slant&nbsp; =&gt; CAIRO_FONT_SLANT_NORMAL,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	Weight =&gt; CAIRO_FONT_WEIGHT_NORMAL<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Height</b>&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">12.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Stretch</b>&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Mode</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: Text_Transformation := Moved_Centered;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Color</b>&nbsp;&nbsp;&nbsp; 
	: Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := 
	RGB (<font color="#800000">0.0</font>, <font color="#800000">0.0</font>,
	<font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Angle</b>&nbsp;&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">3.0</font> * Pi / <font color="#800000">2.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Skew</b>&nbsp;&nbsp;&nbsp;&nbsp; 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= <font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Markup</b>&nbsp;&nbsp; 
	: Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Scaled</b>&nbsp;&nbsp; 
	: Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	:= False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return 
	not null access
	</font>Label_Layer;</tt></blockquote>
<p>These procedure and function create a layer drawing a text. The parameter <b>Under</b> 
specifies the layer location. <b>Text</b> is the text to draw. When the text 
uses
			<a href="https://developer.gnome.org/pango/stable/PangoMarkupFormat.html">
			pango markup</a> the parameter <b>Markup</b> is <i>
<font color="#800000">true</font></i>. <b>Location</b> 
is the point where the text should be placed. <b>Face</b> is the font used 
			for annotation texts. <b>Height</b> is the height of the annotation 
			texts. <b>Stretch</b> is the factor by which the original text width 
			is stretched. When <b>Stretch</b> is 1.0, the text's height to width 
			relation is not changed. <b>Mode</b> is text transformation mode:<ul>
	<li><i>Move_Centered</i>, <i>Move_Inside</i>, <i>Move_Outside</i> use the 
	line which angle is specified by the parameter <b>Angle</b> to align the 
	text as defined for these <a href="#Gtk.Layered.Text_Transformation">text transformation modes</a>, 
	the parameter <b>Skew</b> is ignored. Note that the text itself is not 
	rotated;</li>
	<li><i>Rotated</i> uses <b>Angle</b> as the angle of the horizontal text 
	axis, the parameter <b>Skew</b> is ignored;</li>
	<li><i>Skewed</i> uses <b>Angle</b> as the angle of the horizontal text axis 
	and does <b>Skew</b> as the angle between the horizontal text axis and the 
	vertical text axis of the text origin.</li>
	</ul>
	<p><b> Color</b> is the text color. The parameter <b>Scaled</b> when <i><font color="#800000">
			true</font></i> resizes the layer when the widget is 
			resized:<ul>
	<li>The coordinates of the text location are multiplied by the widget's size 
	(as returned by <a href="#Gtk.Layered.Get_Size">Get_Size</a>), and 
	the result is used as the center's coordinates relatively to the widget's 
	center (as returned by <a href="#Gtk.Layered.Get_Center">Get_Center</a>);</li>
	<li>The text height is multiplied by the widget's size.</li>
	</ul>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Angle (<b>Layer</b> : 
Label_Layer) <font color="#0000FF">return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the text angle.</p><blockquote>
<p><tt><font color="#0000FF">function</font> Get_Color (<b>Layer</b> : 
Label_Layer) <font color="#0000FF">return</font> Gdk_Color;</tt></p>
</blockquote>
<p>This function returns the text color.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Face (<b>Layer</b> : 
Label_Layer) <font color="#0000FF">return</font> Pango_Cairo_Font;</tt></p>
</blockquote>
<p>This function returns a handle to the text font.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Height (<b>Layer</b> : 
Label_Layer) <font color="#0000FF">return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the text height.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Location (<b>Layer</b> : 
Label_Layer) <font color="#0000FF">return</font> Cairo_Tuple;</tt></p>
</blockquote>
<p>This function returns the text position.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Location (<b>Layer</b> : 
Label_Layer) <font color="#0000FF">return</font> Cairo_Tuple;</tt></p>
</blockquote>
<p>This function returns the text position.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Markup (Layer : Label_Layer)
<font color="#0000FF">return</font> Boolean;</tt></p>
</blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if the label 
text uses
			<a href="https://developer.gnome.org/pango/stable/PangoMarkupFormat.html">
			pango markup</a>.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Stretch (<b>Layer</b> : 
Label_Layer) <font color="#0000FF">return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the factor by which the text original width is 
stretched.</p><blockquote>
<p><tt><font color="#0000FF">function</font> Get_Skew (<b>Layer</b> : 
Label_Layer) <font color="#0000FF">return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the angle between the horizontal text axis and the 
vertical text axis of the text origin.</p><blockquote>
<p><tt><font color="#0000FF">function</font> Get_Text (<b>Layer</b> 
: Label_Layer) <font color="#0000FF">
return</font> UTF8_String;</tt></p>
</blockquote>
<p>This function returns the text.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out</font> 
Label_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Location</b> : Cairo_Tuple;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Face</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Pango_Cairo_Font;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Height</b>&nbsp;&nbsp; : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Stretch</b>&nbsp; : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Mode</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Text_Transformation;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Color</b>&nbsp;&nbsp;&nbsp; : Gdk_Color;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Angle</b>&nbsp;&nbsp;&nbsp; : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Skew</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: GDouble<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure changes parameters of the layer. The meaning of the parameters 
is same as in the corresponding Gtk_New-subroutines. Constraint_Error is propagated when 
some of the parameters are illegal.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Text<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Layer</b>&nbsp; :
<font color="#0000FF">in out</font> Label_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Text</b>&nbsp;&nbsp; : UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Markup</b> : Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure changes the text. It is task-safe, it can be called on the 
context of a task different from the main loop task.</p>
<h3><a name="7.5"></a>7.5. Rectangle</h3>
<p> 
<a name="Gtk.Layered.Rectangle"></a>The package <a href="#Gtk.Layered.Rectangle">Gtk.Layered.Rectangle</a> provides a layer drawing a 
colored rectangle:</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Rectangle_Layer(&lt;&gt;)<font color="#0000FF"> is<br>
&nbsp;&nbsp; new </font><a href="#Gtk.Layered.Abstract_Layer">Abstract_Layer</a><br>
&nbsp;&nbsp; <font color="#0000FF">and</font> 
<a href="#Gtk.Layered.Scalable_Layer">Scalable_Layer</a><br>
&nbsp;&nbsp; <font color="#0000FF">and</font> 
<a href="#Gtk.Layered.Widened_Layer">Widened_Layer</a> <font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p align="left">The following operations are defined in the package:</p>
		<blockquote>
	<p><tt><font color="#0000FF">procedure</font> Add_Rectangle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">not null access</font> Layer_Location'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Box</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Cairo_Box;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Color</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Gdk_Color&nbsp;&nbsp;&nbsp; := RGB (<font color="#800000">0.0</font>,
	<font color="#800000">0.0</font>, <font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Line_Width</b> : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
	<font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Opacity</b>&nbsp;&nbsp;&nbsp; 
	: Fill_Opacity := <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Scaled</b>&nbsp;&nbsp;&nbsp;&nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Widened</b>&nbsp;&nbsp;&nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := 
	False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
	function
	</font>Add_Rectangle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">
	not null access
	</font>Layer_Location'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Box</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Cairo_Box;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Color</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	: Gdk_Color&nbsp;&nbsp;&nbsp; := RGB (<font color="#800000">0.0</font>,
	<font color="#800000">0.0</font>, <font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Line_Width</b> 
	: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := <font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Opacity&nbsp;&nbsp; </b> &nbsp;: Fill_Opacity := <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Scaled</b>&nbsp;&nbsp;&nbsp;&nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Widened</b>&nbsp;&nbsp;&nbsp; 
	: Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
	return not null access</font> Rectangle_Layer;</tt></blockquote>
<p>These procedure and function create a layer drawing a rectangle. The parameter <b>Under</b> 
specifies the layer location. <b>Box</b> is the rectangle box. <b>Color</b> 
is the rectangle color. <b>Line_Width</b> is the width of the line drawn around 
the rectangle's box. When 0, no line is drawn. <b>Opacity</b> is the opacity <b>
Color</b> when used to fill the rectangle. When <b>
Opacity</b> is 1 the rectangle is opaque. When 0, the rectangle is not filled. The parameter <b>Scaled</b> when <i><font color="#800000">
			true</font></i> resizes the layer when the widget is 
			resized:<ul>
	<li>The horizontal rectangle coordinates are multiplied by the widget width 
	then horizontal coordinate of the widget's center (as returned by <a href="#Gtk.Layered.Get_Center">Get_Center</a>) 
	is added;</li>
	<li>The horizontal rectangle coordinates are multiplied by the widget width 
	then horizontal coordinate of the widget's center is added.</li>
	</ul>
<p>When <b>Widened</b> is <i><font color="#800000">true</font></i> the line 
	width is the value of <b>Width</b> multiplied by the widget's size.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Box (<b>Layer</b> : 
Rectangle_Layer) <font color="#0000FF">return</font> Cairo_Box;</tt></p>
</blockquote>
<p>This function returns the rectangle's box.</p><blockquote>
<p><tt><font color="#0000FF">function</font> Get_Color (<b>Layer</b> : 
Rectangle_Layer) <font color="#0000FF">return</font> Gdk_Color;</tt></p>
</blockquote>
<p>This function returns the rectangle's color.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Line_Width (<b>Layer</b> : 
Rectangle_Layer) <font color="#0000FF">return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the rectangle's line width.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Opacity (<b>Layer</b> : 
Rectangle_Layer) <font color="#0000FF">return</font> Fill_Opacity;</tt></p>
</blockquote>
<p>This function returns the filling opacity.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Rectangle_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Box</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Cairo_Box;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Color</b>&nbsp;&nbsp;&nbsp; &nbsp; : Gdk_Color;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Line_Width</b> : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Opacity</b>&nbsp;&nbsp;&nbsp; : Fill_Opacity<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure changes parameters of the layer. The meaning of the parameters 
is same as in the corresponding Gtk_New-subroutines. Constraint_Error is propagated when 
some of the parameters are illegal.</p>
<hr>
<p align="right">
  <a name="8"></a><a href="#7"><IMG src="prev.gif" alt="[Back]" width="29" height="29"></a><a href="#16"
><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></a><a href="#10"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H2>8. Special layers</H2>
<h3><a name="8.1"></a>8.1. Rectangular clip region</h3>
<p> 
<a name="Gtk.Layered.Rectangular_Clip_Region"></a>The package 
<a href="#Gtk.Layered.Rectangular_Clip_Region">
Gtk.Layered.Rectangular_Clip_Region</a> provides means to clip drawing of other 
layers to a rectangular area. The package declares two types:</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Layered.Rectangular_Clip_Region.Rectangular_Clip_Region_On_Layer">
</a>type</font> Rectangular_Clip_Region_On_Layer (&lt;&gt;)<font color="#0000FF"> is<br>
&nbsp;&nbsp; new </font><a href="#Gtk.Layered.Abstract_Layer">Abstract_Layer</a>
<font color="#0000FF"> and</font> <a href="#Gtk.Layered.Scalable_Layer">Scalable_Layer</a>
<font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p align="left">This layer add a rectangular area to the clipping region of the 
upper layers. This action remains in effect until the layer:</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Layered.Rectangular_Clip_Region.Rectangular_Clip_Region_Off_Layer">
</a>type</font> Rectangular_Clip_Region_Off_Layer (&lt;&gt;)<font color="#0000FF"> is<br>
&nbsp;&nbsp; new </font><a href="#Gtk.Layered.Abstract_Layer">Abstract_Layer</a>
<font color="#0000FF"> with private</font>;</tt></p>
</blockquote>
<p align="left">The package provides the following operations:</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Add_Rectangular_Clip_Region<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b> :
<font color="#0000FF">not null access</font> Layer_Location'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Height</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp; 
:= <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Width</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp; 
:= <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Center</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Cairo_Tuple := (<font color="#800000">0.0</font>,
<font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Rotation_Angle</b> : GDouble&nbsp;&nbsp;&nbsp;&nbsp; :=
<font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Corner_Radius</b>&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp; :=
<font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Scaled</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp; 
:= False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<font color="#0000FF">function</font> Add_Rectangular_Clip_Region<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b> :
<font color="#0000FF">not null access</font> Layer_Location'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Height</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: GDouble&nbsp;&nbsp;&nbsp;&nbsp; := <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Width</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: GDouble&nbsp;&nbsp;&nbsp;&nbsp; := <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Center</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Cairo_Tuple := (<font color="#800000">0.0</font>, <font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Rotation_Angle</b> : GDouble&nbsp;&nbsp;&nbsp;&nbsp; :=
<font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Corner_Radius</b>&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp; :=
<font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Scaled</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Boolean&nbsp;&nbsp;&nbsp;&nbsp; := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Rectangular_Clip_Region_On_Layer;</tt></p>
</blockquote>
<p>These procedure and function create two layers a clipping layer
<a href="#Gtk.Layered.Rectangular_Clip_Region.Rectangular_Clip_Region_On_Layer">
Rectangular_Clip_Region_On_Layer</a> and restoring layer
<a href="#Gtk.Layered.Rectangular_Clip_Region.Rectangular_Clip_Region_Off_Layer">
Rectangular_Clip_Region_Off_Layer</a> above it. The parameter <b>Under</b> 
specifies the layers location. <b>Height</b> is the height of the clipping 
rectangle. <b>Width</b> is the rectangle's width. <b>Center</b> is the 
rectangle's center. <b>Rotation_Angle</b> is the angle between the <i>x</i>-axis 
of the 
<a href="http://cairographics.org/manual/index.html">cairo</a> cooredinate 
system and the rectangle's bottom. <b>Corner_Radius</b> is the radius of the 
circles rounding the rectangle's corners. The parameter <b>Scaled</b> when <i><font color="#800000">
			true</font></i> resizes the layer when the widget is 
			resized:<ul>
	<li>The coordinates of the rectangle's center are multiplied by the widget's size 
	as returned (by <a href="#Gtk.Layered.Get_Size">Get_Size</a>), and added to the widget's 
	center as returned (by <a href="#Gtk.Layered.Get_Center">Get_Center</a>);</li>
	<li>The widget's width and height are multiplied by the widget's size.</li>
	</ul>
	<p>The location of the
	<a href="#Gtk.Layered.Rectangular_Clip_Region.Rectangular_Clip_Region_Off_Layer">
	Rectangular_Clip_Region_Off_Layer</a> layer corresponding to the result 
	returned by this function can be obtaining by calling
	<a href="#Gtk.Layered.Above">Above</a> on the result.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Center (<b>Layer</b> : 
Rectangular_Clip_Region_On_Layer)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Cairo_Tuple;</tt></p>
</blockquote>
<p>This function returns the rectangle's center.</p><blockquote>
<p><tt><font color="#0000FF">function</font> Get_Corner_Radius (<b>Layer</b> : 
Rectangular_Clip_Region_On_Layer)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the corner's radius.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Height (<b>Layer</b> : 
Rectangular_Clip_Region_On_Layer)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the rectangle's height.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Rotation_Angle (<b>Layer</b> : 
Rectangular_Clip_Region_On_Layer)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the rectangle's angle.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Width (<b>Layer</b> : 
Rectangular_Clip_Region_On_Layer)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> GDouble;</tt></p>
</blockquote>
<p>This function returns the rectangle's width.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp; 
: <font color="#0000FF">in out</font> Rectangular_Clip_Region_On_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Height</b> : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Width</b>&nbsp; : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Center</b> : Cairo_Tuple;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Rotation_Angle</b> : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Corner_Radius</b>&nbsp; : GDouble<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure changes parameters of the layer. The meaning of the parameters 
is same as in the corresponding Gtk_New-subroutines. Constraint_Error is propagated when 
some of the parameters are illegal.</p>
<h3><a name="8.2"></a>8.2. Caching layer</h3>
<p> 
Drawing the gauge at full each time its needle moves might be unnecessary 
expensive. The caching layer provides a way to eliminate unnecessary drawing. 
The layer can be put between the lower layers, like the background, scale, 
annotation, which do not change and the needle which should be redrawn each time 
its value is changed. The layer caches the state of the underlying layers making 
a snapshot of them. When the widget is redrawn and the layers do not report them 
updated (see <a href="#Gtk.Layered.Is_Updated">Is_Updated</a>), they are not 
drawn again, instead the snapshot is taken from the caching layer. The upper 
layers are drawn upon the snapshot.</p>
<p> 
<a name="Gtk.Layered.Cache"></a>The package <a href="#Gtk.Layered.Cache">
Gtk.Layered.Cache</a> provides an implementation of caching layer:</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Cache_Layer (&lt;&gt;)<font color="#0000FF"> is new </font>
<a href="#Gtk.Layered.Abstract_Layer">Abstract_Layer</a> <font color="#0000FF"> with private</font>;</tt></p>
</blockquote>
<p align="left">The package provides the following operations:</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Add_Cache (<b>Under</b> :
<font color="#0000FF">not null access</font> Layer_Location'Class);<br>
<font color="#0000FF">function</font> Add_Cache (<b>Under</b> :
<font color="#0000FF">not null access</font> Layer_Location'Class)<br>
&nbsp;&nbsp; <font color="#0000FF">return not null access</font> Cache_Layer;</tt></p>
</blockquote>
<p>These procedure and function create a caching layer. The parameter <b>Under</b> 
specifies the layers location. Note that the cache layer should not be placed 
between
<a href="#Gtk.Layered.Rectangular_Clip_Region.Rectangular_Clip_Region_On_Layer">
Rectangular_Clip_Region_On_Layer</a> and
	<a href="#Gtk.Layered.Rectangular_Clip_Region.Rectangular_Clip_Region_Off_Layer">
	Rectangular_Clip_Region_Off_Layer</a>, because clipping cannot be cached. So 
in effect it will be disabled when cache is used.<hr>
<p align="right">
  <a name="9"></a><a href="#8"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><a href="#16"
><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></a><a href="#10"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H2>9. Waveforms</H2>
<p><a name="Gtk.Layered.Waveform"></a>Waveform represents a function, usually of time, in 
the form of a running curve. A waveform consists of multiple points (<i>t</i>, <i>v</i>) 
connected by a line. The points are stored externally from the waveform and held 
by an object implementing the 
<a href="#Gtk.Layered.Waveform.Waveform_Data_Source">Waveform_Data_Source</a> interface declared in the 
package <a href="#Gtk.Layered.Waveform">Gtk.Layered.Waveform</a>. The following 
figure illustrates interaction of a waveform layer with its data source:</p>
<blockquote>
	<p><img border="0" src="waveform_objects.png" width="664" height="652" alt="waveform objects"></p>
</blockquote>
<p>The data source usually is designed to maintain a highly frequent massive 
input. It sends notifications to the waveform object upon source changes, but 
that does not cause any immediate visual effect. Usually it is a
<a href="#Gtk.Layered.Refresh_Engine">refresh engine</a> which causes the layer to 
be actually redrawn with a frequency much lower than the source frequency. E.g. the 
waveform may render 10kHz source data rendered at 50Hz by the engine.</p>
<p>Two
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.adjustment.html">adjustment object</a>s are used to amplify the source values at the y-axis and 
sweep them along the x-axis. Though it is possible to use the standard objects, 
the package <a href="#Gtk.Layered.Waveform">Gtk.Layered.Waveform</a> defines 
specialized interfaces for the amplifier and sweeper. The amplifier interface 
Waveform_Amplifier supports the auto-scaling mode to making the waveform fit the 
vertical range of the box. The sweeper interface Waveform_Sweeper supports 
freezing/running mode and setting the adjustment using time stamps directly.</p>
<p><b><u>Quick reference</u></b>:</p>
<ul>
	<li><a href="#data_source">Data sources and scanners</a></li>
	<li><a href="#amplifier">Waveform amplifiers</a></li>
	<li><a href="#sweeper">Waveform sweepers</a></li>
	<li><a href="#Gtk.Layered.Waveform.Gtk_Waveform_Layer">Waveform layer</a></li>
	<li><a href="#Gtk.Layered.Graph_Paper">Graph paper</a></li>
	<li><a href="#graph_paper_annotation">Graph paper annotation</a></li>
</ul>
<p>The waveform layer is used by a ready-to-use multichannel
<a href="#oscilloscope">oscilloscope widget</a>.</p>
<h3><a name="9.1"></a>9.1. Data sources and scanners</h3>
<p><a name="data_source"></a>The package <a href="#Gtk.Layered.Waveform">Gtk.Layered.Waveform</a> 
declares the types of the components (<i>t</i>, <i>v</i>) used in the data 
source interface:</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> X_Axis <font color="#0000FF">is new</font> 
GDouble;<br>
<font color="#0000FF">type</font> Y_Axis <font color="#0000FF">is new</font> 
GDouble;</tt></p></blockquote>
<p>These types are compatible with the types used in the
<a href="http://www.gtk.org">GTK+</a> 
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.adjustment.html">adjustment objects</a>.</p>
<p><u><b>Massive data flows and/or slow data origin interfaces, implementation considerations</b></u>. 
When implementing a data source and scanner to interface by some slow external 
store, e.g. a data base, file, network connection etc holding a massive amount 
of data, consider the following schema. The data source is a front end to the 
corresponding store. The data source has no cache, rather the scanners have it. 
Scanning the source would likely be too slow to complete in one piece. Since scanning is done upon rendering, that 
would block the waveform and the whole UI. Instead of that the scanner completes signaling End_Error after reading 
a few items of data into its cache. In the 
background, the scanner keeps on reading the data up to the requested 
position and probably ahead. As the cache gets filled the scanner periodically notifies the connected waveforms that 
the data source is changed by calling <a href="#Gtk.Layered.Waveform.Changed">
Changed</a>. The waveforms rescan the data source showing more and more 
data as they get cached.</p>
<h4><a name="9.1.1"></a>9.1.1. Data source interface</h4>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Layered.Waveform.Waveform_Data_Source"></a>type </font>
Waveform_Data_Source<font color="#0000FF">
is limited interface</font>;</tt></p></blockquote>
<p>The following primitive operations are defined for a data source:</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Connected<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Source</b> :
<font color="#0000FF">in out</font> Waveform_Data_Source;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Layer</b>&nbsp; : <font color="#0000FF">in out</font> Waveform_Layer'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is abstract</font>;</tt></p></blockquote>
<p>This procedure is called to notify a data source that a waveform was 
connected to it. A data source can serve many waveforms.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Layered.Waveform.Create"></a>function</font> Create<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Source</b> :
<font color="#0000FF">not null access</font> Waveform_Data_Source<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Waveform_Data_Scanner'Class <font color="#0000FF">is abstract</font>;</tt></p></blockquote>
<p>This function is a factory of the scanner suitable for the source. When a 
waveform connects to a source it calls this function to create a scanner object, 
which is then used to access the data from the source.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Disconnected<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Source</b> :
<font color="#0000FF">in out</font> Waveform_Data_Source;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Layer</b>&nbsp; : <font color="#0000FF">in out</font> Waveform_Layer'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;is 
abstract</font>;</tt></p></blockquote>
<p>This procedure is called to notify a data source that a waveform was 
disconnected from it.</p>
<h4><a name="9.1.2"></a>9.1.2. Data scanner interface</h4>
<p>The package <a href="#Gtk.Layered.Waveform">Gtk.Layered.Waveform</a> declares 
the data scanner interface:</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Layered.Waveform.Waveform_Data_Scanner"></a>type </font>
Waveform_Data_Scanner<font color="#0000FF">
is interface</font>;</tt></p></blockquote>
<p>The following primitive operations are defined for a data scanner:</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Backward<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Source</b> :
<font color="#0000FF">in out</font> Waveform_Data_Scanner;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>T</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> X_Axis;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>V</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Y_Axis;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ <b>Got_It</b> 
: <font color="#0000FF">out</font> Boolean ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is abstract</font>;</tt></p></blockquote>
<p>These procedures scan the source backwards. They decrease <b>T</b> to the 
nearest available point in the data source of the scanner. <b>T</b> is then set 
to the position of the point, <b>V</b> is to the point's value. <b>Got_It</b> is 
returned <font color="#800000"><i>false</i></font> or else End_Error is 
propagated when the data source beginning is reached.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> First<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Source</b> :
<font color="#0000FF">in out</font> Waveform_Data_Scanner;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>T&nbsp;&nbsp;
</b>&nbsp;&nbsp; : <font color="#0000FF">out</font> X_Axis;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>V&nbsp;&nbsp;&nbsp;
</b>&nbsp; : <font color="#0000FF">out</font> Y_Axis;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ <b>Got_It</b> 
: <font color="#0000FF">out</font> Boolean ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is abstract</font>;</tt></p></blockquote>
<p>This procedure returns the first point in the data source. <b>Got_It</b> is 
returned <font color="#800000"><i>false</i></font> or else End_Error is propagated 
when the data source is empty.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Forward<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Source</b> :
<font color="#0000FF">in out</font> Waveform_Data_Scanner;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>T</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> X_Axis;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>V</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Y_Axis;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ <b>Got_It</b> 
: <font color="#0000FF">out</font> Boolean ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is abstract</font>;</tt></p></blockquote>
<p>These procedures scan the source forward. They increase <b>T</b> to the nearest 
available point in the data source of the scanner. <b>T</b> is then set to the 
position of the point, <b>V</b> is to the point's value. <b>Got_It</b> is 
returned <font color="#800000"><i>false</i></font> or else End_Error is propagated 
when the data source beginning is reached.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Is_In<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Source</b> : 
Source_Scanner;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>T </b>&nbsp;&nbsp;&nbsp;&nbsp; 
: X_Axis<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean
<font color="#0000FF">is abstract</font>;</tt></p></blockquote>
<p>This function returns true if <b>T</b> is within the bounds of the data 
source.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Last<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Source</b> :
<font color="#0000FF">in out</font> Waveform_Data_Scanner;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>T&nbsp;&nbsp;
</b>&nbsp;&nbsp; : <font color="#0000FF">out</font> X_Axis;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>V&nbsp;&nbsp;&nbsp;
</b>&nbsp; : <font color="#0000FF">out</font> Y_Axis;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ <b>Got_It</b> 
: <font color="#0000FF">out</font> Boolean ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is abstract</font>;</tt></p></blockquote>
<p>This procedure returns the last point in the data source. <b>Got_It</b> is 
returned <font color="#800000"><i>false</i></font> or else End_Error is propagated 
when the data source is empty.</p>
<p>The class-wide operation defined on the scanner:</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Source</b> :
<font color="#0000FF">in out</font> Waveform_Data_Scanner'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>T</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: X_Axis;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Mode</b>&nbsp;&nbsp; 
: Interpolation_Mode;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>V
</b>&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">out</font> Y_Axis;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ <b>Got_It</b> 
: <font color="#0000FF">out</font> Boolean ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure searches the source connected to the scanner <b>Source</b> for 
the value <b>V </b>corresponding to the parameter <b>T</b>. The
<a href="#Gtk.Layered.Interpolation_Mode">
interpolation mode</a> is specified by the parameter <b>Mode</b>. The procedure 
does not extrapolate the data source values, <b>Got_It</b> is 
returned <font color="#800000"><i>false</i></font> or else End_Error is propagated when there 
is no defined values around <b>T</b>. </p>
<h4><a name="9.1.3"></a>9.1.3. Data source feed interface</h4>
<p>The package <a href="#Gtk.Layered.Waveform">Gtk.Layered.Waveform</a> declares 
the data source feed interface:</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Layered.Waveform.Waveform_Data_Feed"></a>type 
</font>Waveform_Data_Feed<font color="#0000FF">
is limited interface<br>
&nbsp;&nbsp; and </font>
<a href="#Gtk.Layered.Waveform.Waveform_Data_Source">Waveform_Data_Source</a>;</tt></p></blockquote>
<p>The following primitive operations are defined:</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Erase (<b>Source</b> :
<font color="#0000FF">in out</font> Waveform_Data_Feed)
<font color="#0000FF">is abstract</font>;</tt></p></blockquote>
<p>This procedure erases the contents of <b>Source</b>.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Layered.Waveform.Put"></a>procedure</font> Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Source</b> :
<font color="#0000FF">in out</font> Waveform_Data_Feed;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>T</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: X_Axis;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>V</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Y_Axis<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is abstract</font>;</tt></p></blockquote>
<p>This procedure is used to put a new point (<b>T</b>, <b>V</b>) into the 
buffer <b>Source</b>. When the 
buffer contains a value with same <b>T</b>, the value in the buffer is replaced. 
When the buffer is full, the value with the least <b>T</b> is dropped, unless 
the new value has a lesser <b>T</b>, in which case the operation is void.</p>
<h4><a name="9.1.4"></a>9.1.4. Ring buffer implementation</h4>
<p><a name="Gtk_Waveform_Ring_Data_Buffer"></a>The package
<a href="#Gtk_Waveform_Ring_Data_Buffer">
Gtk_Waveform_Ring_Data_Buffer</a> provides an implementation of
<a href="#Gtk.Layered.Waveform.Waveform_Data_Source">waveform data source 
interface</a>:</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk_Waveform_Ring_Data_Buffer_Record"></a>type </font>
Gtk_Waveform_Ring_Data_Buffer_Record<font color="#0000FF">
</font>(<b>Size</b> : Positive)<font color="#0000FF">
is<br>
&nbsp;&nbsp; new </font>
GObject_Record<font color="#0000FF"><br>
&nbsp;&nbsp; and </font>
<a href="#Gtk.Layered.Waveform.Waveform_Data_Feed">Waveform_Data_Feed</a><font color="#0000FF">
with private</font>;<br>
<font color="#0000FF">type</font> Gtk_Waveform_Ring_Data_Buffer
<font color="#0000FF">is<br>
&nbsp;&nbsp; access all</font> Gtk_Waveform_Ring_Data_Buffer_Record'Class;</tt></p></blockquote>
<p>The discriminant <b>Size</b> specifies the maximal number of points in the 
buffer. The buffer can be written from one task and scanned from several other 
tasks without interlocking. When more than two tasks write the buffer it must be 
protected from concurrent access. The implementation of
<a href="#Gtk.Layered.Waveform.Put">Put</a> must be called from only one task at 
a time. 
<a href="#Gtk_Waveform_Ring_Data_Buffer_Record">Gtk_Waveform_Ring_Data_Buffer_Record</a> is a proper
<a href="http://www.gtk.org">GTK+</a> object, subject of reference counting. It 
is created using typical means:</p>
<blockquote>
<p><tt><font color="#0000FF">procedure </font>Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Source</b> :
<font color="#0000FF">out</font> Gtk_Waveform_Ring_Data_Buffer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Size</b>&nbsp;&nbsp; 
: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure creates a new buffer object <b>Source</b>.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure </font>Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Source</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Waveform_Ring_Data_Buffer_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>When a custom type is derived from 
<a href="#Gtk_Waveform_Ring_Data_Buffer_Record">Gtk_Waveform_Ring_Data_Buffer_Record</a> it must call this procedure from its 
implementation of Initialize.</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Layered.Waveform.Source_Scanner"></a>type </font>
Source_Scanner<font color="#0000FF">
is new </font>
Waveform_Data_Scanner<font color="#0000FF">
with private</font>;</tt></p></blockquote>
<p>This type is an implementation of
<a href="#Gtk.Layered.Waveform.Waveform_Data_Scanner">Waveform_Data_Scanner</a> 
returned by <a href="#Gtk.Layered.Waveform.Create">Create</a> of <a href="#Gtk_Waveform_Ring_Data_Buffer">
Ring_Data_Buffer</a>.</p>
<h3><a name="9.2"></a>9.2. Waveform amplifiers</h3>
<p><a name="amplifier"></a>An amplifier is used to adjust the vertical axis of the waveform. Several 
waveforms may share one amplifier in order to have the same vertical axis scale.</p>
<h4><a name="9.2.1"></a>9.2.1. Amplifier interface</h4>
<p>The package <a href="#Gtk.Layered.Waveform">Gtk.Layered.Waveform</a> declares 
the data amplifier adjustment interface:</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Layered.Waveform.Waveform_Amplifier"></a>type </font>
Waveform_Amplifier<font color="#0000FF">
is interface</font>;</tt></p></blockquote>
<p>The following primitive operations are defined for an amplifier:</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Add_Range<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Amplifier</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Waveform_Amplifier;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Layer</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Waveform_Layer'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>,&nbsp;
<b>To</b>&nbsp;&nbsp;&nbsp; : X_Axis;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Lower</b>,
<b>Upper</b> : Y_Axis<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is abstract</font>;</tt></p></blockquote>
<p>The procedure is called upon sampling the waveform source. The amplifier may 
change its parameters, for example in order to make the whole range visible on 
the y-axis. The parameters <b>From</b>..<b>To</b> specify the range of values on 
the horizontal axis. The parameters <b>Lower</b>..<b>Upper</b> specify the range of 
values on the vertical axis. Note that the amplifier can be shared between several layers sharing 
same y-axis. Therefore an implementation should prepare itself to multiple calls 
to this procedure.</p>
<h4><a name="9.2.2"></a>9.2.2. Amplifier implementation</h4>
<p><a name="Gtk.Layered.Waveform.Amplifier"></a>The package 
<a href="#Gtk.Layered.Waveform.Amplifier">Gtk.Layered.Waveform.Amplifier</a> 
provides an implementation of the waveform amplifier interface. The 
implementation supports automatic scaling. The object is a descendant of the 
standard
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.adjustment.html">adjustment object</a>:</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Layered.Waveform.Amplifier.Gtk_Waveform_Amplifier"></a>type </font>
Gtk_Waveform_Amplifier_Record<font color="#0000FF">
is<br>
&nbsp;&nbsp; new </font>Gtk_Adjustment_Record<font color="#0000FF"><br>
&nbsp;&nbsp; and </font><a href="#Gtk.Layered.Waveform.Waveform_Amplifier">Waveform_Amplifier</a><font color="#0000FF">
with private</font>;<font color="#0000FF"><br>
type </font>Gtk_Waveform_Amplifier<font color="#0000FF">
is<br>
&nbsp;&nbsp; access all </font>Gtk_Waveform_Amplifier_Record'Class;</tt></p></blockquote>
<p>The following primitive operations are defined for the amplifier:</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Auto_Scaling<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Amplifier</b> :
<font color="#0000FF">not null access constant</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Waveform_Amplifier_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p></blockquote>
<p>This function returns the current scaling mode as set by the procedure
<a href="#Gtk.Layered.Waveform.Amplifier.Set_Auto_Scaling">Set_Auto_Scaling</a>.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Raster_Scaling<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Amplifier</b> :
<font color="#0000FF">not null access constant</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Waveform_Amplifier_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p></blockquote>
<p>This function returns the current raster scaling mode as set by the procedure
<a href="#Gtk.Layered.Waveform.Amplifier.Set_Raster_Scaling">Set_Raster_Scaling</a>.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Scaling<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Amplifier</b> :
<font color="#0000FF">not null access constant</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Waveform_Amplifier_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Waveform_Scaling;</tt></p></blockquote>
<p>This function returns the scaling factor as set by the procedure
<a href="#Gtk.Layered.Waveform.Amplifier.Set_Scaling">Set_Scaling</a>.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Tick_Length<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Amplifier</b> :
<font color="#0000FF">not null access constant</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Waveform_Amplifier_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Positive;</tt></p></blockquote>
<p>This function returns the value set by
<a href="#Gtk.Layered.Waveform.Amplifier.Set_Tick_Length">Set_Tick_Length</a>.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Gtk_New (<b>Amplifier</b> :
<font color="#0000FF">out</font> Gtk_Waveform_Amplifier);</tt></p></blockquote>
<p>This procedure creates a new amplifier object.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Amplifier</b> 
: <font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Waveform_Amplifier_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure must be called from the Initialize procedure of a type 
derived from this one.</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Layered.Waveform.Amplifier.Set_Auto_Scaling"></a>procedure</font> 
Set_Auto_Scaling<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Amplifier</b> 
: <font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Gtk_Waveform_Amplifier_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Auto</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>When <b>Auto</b> is <i>
<font color="#800000">true</font></i> the amplifier automatically adjusts its 
upper and lower bounds to 
fit the vertical range of its waveforms. When <b>Auto</b> is <i>
<font color="#800000">false</font></i> the amplifier retains its parameters. 
Initially auto-scaling is active.</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Layered.Waveform.Amplifier.Set_Raster_Scaling"></a>procedure</font> 
Set_Raster_Scaling<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Amplifier</b> 
: <font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Waveform_Amplifier_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Raster</b>&nbsp;&nbsp;&nbsp; : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure sets raster fitting mode. When auto-scaling mode is active 
(see <a href="#Gtk.Layered.Waveform.Amplifier.Set_Auto_Scaling">Set_Auto_Scaling</a>), 
the <b>Amplifier</b> adjusts its upper and lower bounds so that they values 
would have &quot;good-looking&quot; decimal representations.</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Layered.Waveform.Amplifier.Set_Scaling"></a>procedure</font> 
Set_Scaling<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Amplifier</b> 
: <font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Waveform_Amplifier_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Scaling</b>&nbsp;&nbsp; : Waveform_Scaling<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This function sets the amount of in advance scaling when the waveform is in 
auto-scaling mode. The following figure illustrates the behavior when the 
waveform leaves the range and must be scaled to a larger range:</p>
<blockquote>
	<p><img border="0" src="waveform-upscaling.png" width="346" height="208" alt="waveform upscaling"></p>
</blockquote>
<p>The new range is calculated as shown above. Larger values of the <b>Scaling</b> 
parameter prevent too frequent change of the range when the curve is ascending. 
Similarly when the curve is descending staying within a narrower range defined 
by <b>Scaling</b> as shown on the figure below:</p>
<blockquote>
	<p><img border="0" src="waveform-downscaling.png" width="324" height="214" alt="waveform downscaling"></p>
</blockquote>
<p>it scaled down to that range. The default value is 0.2.</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Layered.Waveform.Amplifier.Set_Tick_Length"></a>procedure</font> 
Set_Tick_Length<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Amplifier</b> 
: <font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Waveform_Amplifier_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Length</b>&nbsp;&nbsp;&nbsp; : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure sets the approximate length of the major tick when the scaling 
is fitted at the raster. The raster is selected so that the waveform box would 
contain approximately</p>
<blockquote>
	<table border="0" cellspacing="0">
		<tr>
			<td align="center">the box's height </td>
		</tr>
		<tr>
			<td align="center" style="border-top-style: solid; border-top-width: 1px">
			<b>Length</b></td>
		</tr>
	</table>
</blockquote>
<p>ticks corresponding to &quot;good&quot; values. The default value is 50.</p>
<p>The following additional signals are emitted by the object:</p>
<ul>
	<li><i>autoscaling-changed</i> is emitted when automatic scaling is turned 
	on or off (see <a href="#Gtk.Layered.Waveform.Amplifier.Set_Auto_Scaling">
	Set_Auto_Scaling</a>);</li>
	<li><i>raster-mode-changed</i> is emitted when raster scaling mode is turned 
	on or off (see <a href="#Gtk.Layered.Waveform.Amplifier.Set_Raster_Scaling">
	Set_Raster_Scaling</a>).</li>
</ul>
<h3><a name="9.3"></a>9.3. Waveform sweepers</h3>
<p><a name="sweeper"></a>A sweeper is used to adjust the horizontal axis of the waveform. Several 
waveforms may share one sweeper.</p>
<h4><a name="9.3.1"></a>9.3.1. Sweeper interface</h4>
<p>The package <a href="#Gtk.Layered.Waveform">Gtk.Layered.Waveform</a> declares 
the sweeper interface:</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Layered.Waveform.Waveform_Sweeper"></a>type </font>
Waveform_Sweeper<font color="#0000FF">
is interface</font>;</tt></p></blockquote>
<p>The following primitive operations are defined for a sweeper:</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Layered.Waveform.Set_Current_Time"></a>procedure</font> Set_Current_Time<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Sweeper</b> :
<font color="#0000FF">not null access</font> Waveform_Sweeper;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Stamp</b>&nbsp;&nbsp; : Time;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Active</b>&nbsp; : Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is abstract</font>;</tt></p></blockquote>
<p>This procedure is called before drawing the waveform layer. The 
implementation can change the adjustment to sweep the waveform. Note that it can 
be called multiple times when the sweeper object is shared by several waveforms.
Usually
<b>Stamp</b> changes the adjustment value so that the right margin of the 
adjustment page would correspond to <b>Stamp</b>. When <b>Active</b> is passed
<font color="#800000"><i>true</i></font> the active count is increased and 
decreased again before return from
<a href="#Gtk.Layered.Waveform.Set_Current_Time">Set_Current_Time</a>.
<a href="#Gtk.Layered.Waveform.Is_Active">Is_Active</a> then returns <i>
<font color="#800000">true</font></i> if the count is greater than zero.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Layered.Waveform.Is_Active"></a>
function</font> Is_Active<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Sweeper</b> :
<font color="#0000FF">not null access</font> Waveform_Sweeper<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean <font color="#0000FF">is abstract</font>;</tt></p></blockquote>
<p>Layers during preparation to drawing may call
<a href="#Gtk.Layered.Waveform.Set_Current_Time">Set_Current_Time</a> with <b>
Active</b> set <i><font color="#800000">true</font></i>. When they receive the
<i>changed</i> signal from the sweeper they use<br>
this function to decide not to a new queue drawing request (when
<a href="#Gtk.Layered.Waveform.Is_Active">Is_Active</a> returns <i>
<font color="#800000">true</font></i>).</p>
<h4><a name="9.3.2"></a>9.3.2. Time operations</h4>
<p>The package <a href="#Gtk.Layered.Waveform">Gtk.Layered.Waveform</a> provides 
operations to convert time to the adjustment values.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Layered.Waveform.Get_Epoch"></a>
function</font> Get_Epoch <font color="#0000FF">return</font> Ada.Calendar.Time;<font color="#0000FF"><br>
function</font> Get_Epoch <font color="#0000FF">return</font> Time;</tt></p></blockquote>
<p>These functions return the time of the epoch used in conversions. The value 0 
corresponds to the time returned by this function. The epoch is chosen to be at 
the beginning of a day.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> To_Double (<b>Value</b> : Time)
<font color="#0000FF">return</font> GDouble;<br>
<font color="#0000FF">function</font> To_Double (<b>Value</b> : 
Ada.Calendar.Time) <font color="#0000FF">return</font> GDouble;</tt></p></blockquote>
<p>These functions return the time corresponding to <b>Value</b> time. The 
result is the number of seconds between <b>Value</b> and
<a href="#Gtk.Layered.Waveform.Get_Epoch">Get_Epoch</a>. Constraint_Error is 
propagated when conversion is impossible.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Layered.Waveform.To_Time"></a>function</font> To_Time (<b>Value</b> : 
GDouble)
<font color="#0000FF">return</font> Time;<br>
<font color="#0000FF">function</font> To_Time (<b>Value</b> : GDouble)
<font color="#0000FF">return</font> Ada.Calendar.Time;</tt></p></blockquote>
<p>These functions return the value corresponding to <b>Value</b>. The time is 
calculated as <a href="#Gtk.Layered.Waveform.Get_Epoch">Get_Epoch</a> + <b>Value</b> 
interpreted as seconds. Constraint_Error is propagated when conversion is 
impossible.</p>
<h4><a name="9.3.3"></a>9.3.3. Sweeper implementation</h4>
<p><a name="Gtk.Layered.Waveform.Sweeper"></a>The package 
<a href="#Gtk.Layered.Waveform.Sweeper">Gtk.Layered.Waveform.Sweeper</a> 
provides an implementation of the waveform sweeper interface. This is a 
specialized adjustment object used to sweep one or more waveforms. When not 
frozen the sweeper changes itself before the waveforms are drawn so that the 
right margin of all boxes of the waveforms would correspond to the time of 
drawing minus a fixed offset. The offset can be changed. When the sweeper is 
frozen the right margin does change but the offset is incremented to compensate 
time:</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Layered.Waveform.Gtk_Waveform_Sweeper_Record"></a>type 
</font>Gtk_Waveform_Sweeper_Record<font color="#0000FF">
is<br>
&nbsp;&nbsp; new </font>Gtk_Adjustment_Record<font color="#0000FF"><br>
&nbsp;&nbsp; and </font><a href="#Gtk.Layered.Waveform.Waveform_Sweeper">Waveform_Sweeper</a><font color="#0000FF">
with private</font>;<font color="#0000FF"><br>
type </font>Gtk_Waveform_Sweeper<font color="#0000FF">
is<br>
&nbsp;&nbsp; access all </font>Gtk_Waveform_Sweeper_Record'Class;</tt></p></blockquote>
<p>The following primitive operations are defined for the amplifier:</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_From<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Sweeper</b> :
<font color="#0000FF">not null access</font> Gtk_Waveform_Sweeper_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> [Ada.Calendar.]Time;</tt></p></blockquote>
<p>This function returns the time corresponding to the lower value of the 
sweeper, i.e. the first time available. The result is either Ada.Real_Time.Time 
or Ada.Calendar.Time.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Frozen<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Sweeper</b> :
<font color="#0000FF">not null access constant</font> 
Gtk_Waveform_Sweeper_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p></blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if the sweeper 
is frozen.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Offset<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Sweeper</b> :
<font color="#0000FF">not null access constant</font> 
Gtk_Waveform_Sweeper_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Duration;</tt></p></blockquote>
<p>This function returns the duration between the right margin of the <b>Sweeper</b>'s 
page and the most recent time as notified by
<a href="#Gtk.Layered.Waveform.Set_Current_Time">Set_Current_Time</a>. When the sweeper is frozen 
offset is incremented with the time. Otherwise the offset is constant.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Page_Span<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Sweeper</b> :
<font color="#0000FF">not null access</font> Gtk_Waveform_Sweeper_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Duration;</tt></p></blockquote>
<p>This function returns the page size in seconds.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Time<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Sweeper</b> :
<font color="#0000FF">not null access</font> Gtk_Waveform_Sweeper_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> [Ada.Calendar.]Time;</tt></p></blockquote>
<p>The time corresponding to the end (right margin) of the page. Note that 
Get_Value returns a value (GDouble) corresponding to the beginning of the page. 
The result is either Ada.Real_Time.Time or Ada.Calendar.Time.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_To<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Sweeper</b> :
<font color="#0000FF">not null access</font> Gtk_Waveform_Sweeper_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> [Ada.Calendar.]Time;</tt></p></blockquote>
<p>This function returns the time corresponding to the upper value of the 
sweeper, i.e. the last time available. The result is either Ada.Real_Time.Time 
or Ada.Calendar.Time.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Gtk_New (<b>Sweeper</b> :
<font color="#0000FF">out</font> Gtk_Waveform_Sweeper);</tt></p></blockquote>
<p>This procedure creates a new sweeper object.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Sweeper</b> :
<font color="#0000FF">not null access</font> Gtk_Waveform_Sweeper_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure must be called from the derived type's Initialize, if any.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ( <b>&nbsp;Sweeper</b> :
<font color="#0000FF">not null access</font> Gtk_Waveform_Sweeper_Record;<br>
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Date</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: [Ada.Calendar.]Time;<br>
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; From</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: [Ada.Calendar.]Time;<br>
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; To</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: [Ada.Calendar.]Time;<br>
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Step_Increment</b> : Duration;<br>
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Page_Increment</b> : Duration;<br>
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Page_Span</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Duration<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes all settings controlling the sweeper's page. The time 
arguments can be either of Ada.Real_Time.Time or of Ada.Calendar.Time type.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Frozen<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Sweeper</b> :
<font color="#0000FF">not null access</font> Gtk_Waveform_Sweeper_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Frozen</b>&nbsp; : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure sets <b>Sweeper</b>'s freezing mode. When frozen the sweeper 
maintains its page setting constant. When
<a href="#Gtk.Layered.Waveform.Set_Current_Time">Set_Current_Time</a> is called the offset is 
increased to keep the page margins. When the sweeper is not frozen,
<a href="#Gtk.Layered.Waveform.Set_Current_Time">Set_Current_Time</a> slides the sweeper's page 
and keeps the offset is unchanged.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Page_Span<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Sweeper</b>&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Waveform_Sweeper_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Page_Span</b> : Duration<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes page span of the sweeper.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Time<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Sweeper</b>&nbsp;: <font color="#0000FF">not null access</font> Gtk_Waveform_Sweeper_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Stamp</b>&nbsp;&nbsp; : [Ada.Calendar.]Time<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the right margin of <b>Sweeper</b> to <b>Stamp</b>. <b>Stamp</b> 
is either Ada.Real_Time.Time or Ada.Calendar.Time.</p>
<p>The following additional signals are emitted by the object:</p>
<ul>
	<li><i>freezing-changed</i> is emitted when the freezing state is changed;</li>
	<li><i>offset-changed</i> is emitted when the offset is changed.</li>
</ul>
<h3><a name="9.4"></a>9.4. Waveform layer</h3>
<p>The package <a href="#Gtk.Layered.Waveform">Gtk.Layered.Waveform</a> declares 
the type of the waveform layer:</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Layered.Waveform.Gtk_Waveform_Layer"></a>type</font> 
Waveform_Layer (&lt;&gt;) <font color="#0000FF">
is<br>
&nbsp;&nbsp; new </font><a href="#Gtk.Layered.Abstract_Layer">Abstract_Layer</a><font color="#0000FF"><br>
&nbsp;&nbsp; and </font><a href="#Gtk.Layered.Scalable_Layer">Scalable_Layer</a><font color="#0000FF"><br>
&nbsp;&nbsp; and </font><a href="#Gtk.Layered.Widened_Layer">Widened_Layer</a>
<font color="#0000FF">with private</font>;</tt></p></blockquote>
<p>The following operations are defined on the waveform layers:</p>
<blockquote>
<p><tt><font color="#0000FF">
procedure </font>Add_Waveform<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">
not null access</font> Layer_Location'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Box</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Cairo_Box;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Width</b>&nbsp;&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Color</b>&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= RGB (<font color="#800000">1.0</font>, <font color="#800000">0.0</font>,
<font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Line_Cap</b>&nbsp; : Cairo_Line_Cap&nbsp;&nbsp;&nbsp;&nbsp; := 
CAIRO_LINE_CAP_BUTT;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sweeper</b>&nbsp;&nbsp; : <font color="#0000FF">
access </font>Gtk_Adjustment_Record'Class := <font color="#0000FF">
null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Amplifier</b> : <font color="#0000FF">
access </font>Gtk_Adjustment_Record'Class := <font color="#0000FF">
null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Mode</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Interpolation_Mode := Linear;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Left</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := 
False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Right</b>&nbsp;&nbsp;&nbsp;&nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Opacity</b>&nbsp;&nbsp; : Fill_Opacity&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :=
<font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Scaled</b>&nbsp;&nbsp;&nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Widened</b>&nbsp;&nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
function </font>Add_Waveform<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">
not null access</font> Layer_Location'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Box</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Cairo_Box;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Width</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:=
<font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Color</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := RGB (<font color="#800000">1.0</font>,
<font color="#800000">0.0</font>, <font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Line_Cap</b>&nbsp; 
: Cairo_Line_Cap&nbsp;&nbsp;&nbsp;&nbsp; := CAIRO_LINE_CAP_BUTT;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Sweeper</b>&nbsp;&nbsp; 
: <font color="#0000FF">
access </font>Gtk_Adjustment_Record'Class := <font color="#0000FF">
null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Amplifier</b> 
: <font color="#0000FF">
access </font>Gtk_Adjustment_Record'Class := <font color="#0000FF">
null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Mode</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Interpolation_Mode := Linear;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Left</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := 
False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Right</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := 
False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Opacity</b>&nbsp;&nbsp; 
: Fill_Opacity&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Scaled</b>&nbsp;&nbsp;&nbsp; 
: Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := 
False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Widened</b>&nbsp;&nbsp; 
: Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := 
False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Waveform_Layer;</tt></p></blockquote>
<p>These procedure and function create a waveform layer. The parameter <b>Under</b> 
specifies the layer location. The parameter <b>Box</b> is the box bounding the 
waveform. <b>Width</b> specifies the width of the waveform line. <b>Color</b> is 
the line color. The type of the line ends is determined by the parameter <b>
Line_Cap</b>. The parameter <b>Opacity</b> determines the transparency of the 
filling under the waveform curve. The parameter <b>Sweeper</b> is the object 
controlling how the horizontal axis of the waveform is scaled. It is analogous 
to the sweeper section of an oscilloscope. Several waveforms may share one 
sweeper object. When this parameter is <font color="#0000FF">null</font> the 
waveform must be swept manually using the procedure
<a href="#Gtk.Layered.Waveform.Sweep">Sweep</a>. The parameter <b>Amplifier</b> 
is the object controlling the vertical axis. When this parameter is
<font color="#0000FF">null</font> the waveform must be scaled using explicit 
calls to the procedure <a href="#Gtk.Layered.Waveform.Amplify">Amplify</a>. The 
parameter <b>Mode</b> specified the interpolation mode as defined by the type <a href="#Gtk.Layered.Interpolation_Mode">
Interpolation_Mode</a>. The parameters <b>Left</b> and <b>Right</b> when set <i>
<font color="#800000">true</font></i> allow extrapolation to the left and to the 
right correspondingly. The extrapolation uses the first or last sampled value 
accordingly. When the parameter <b>Scaled</b> is <i>
<font color="#800000">true</font></i> the layer is scaled to fit the parent 
widget. The scaling s performed as follows:</p>
<ul>
	<li>The x-coordinates of the box are multiplied by the widget's horizontal 
	size and then added to the x-coordinate of the widget's center as returned 
	by <a href="#Gtk.Layered.Get_Center">Get_Center</a>;</li>
	<li>The y-coordinates of the box are multiplied by the widget's vertical 
	size and then added to the y-coordinate of the widget's center.</li>
</ul>
<p><b>Widened</b> when <i><font color="#800000">true</font></i> indicates that 
the line width is increased proportionally to the widget's size. 
Constraint_Error is propagated when some of the parameters are illegal.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Layered.Waveform.Amplify"></a>procedure</font> Amplify<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b> :
<font color="#0000FF">in out</font> Waveform_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Lower</b> : Y_Axis;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Upper</b> : Y_Axis<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure explicitly sets the value <b>Upper</b> to correspond to the 
top of the waveform box. The value <b>Lower</b> is set to correspond to the 
bottom of the box. page. Constraint_Error is propagated when <b>Lower</b>..<b>Upper</b> 
is an illegal range. Normally these values are set implicitly using an
<a href="#amplifier">amplifier</a> object.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Layered.Waveform.Changed"></a>procedure</font> Changed<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b> :
<font color="#0000FF">in out</font> Waveform_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp; 
: X_Axis;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>To</b>&nbsp;&nbsp;&nbsp; 
: X_Axis<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure is called by an implementation of the
<a href="#Gtk.Layered.Waveform.Waveform_Data_Source">Waveform_Data_Source</a> 
interface in order to notify that a part of source was changed. This procedure 
is not intended to perform actual rendering, rather to remember which parts need 
to be redrawn when the time comes.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get (<b>Layer</b> : Waveform_Layer;
<b>X</b> : GDouble) <font color="#0000FF">return</font> Y_Axis;</tt></p></blockquote>
<p>This function returns the waveform value corresponding to the coordinate <b>X</b>, 
relative to the widget. End_Error is propagated when there is no defined values 
around <b>X</b>. See also <a href="#Gtk.Layered.Waveform.Get_Point">Get_Point</a>, which returns values on both axes.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;&nbsp; 
: Waveform_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>X</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Y</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Y_Axis;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Got_It</b>&nbsp; : <font color="#0000FF">out</font> Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This variant does not use End_Error exception.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Amplifier (<b>Layer</b> : 
Waveform_Layer)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Gtk_Adjustment;</tt></p></blockquote>
<p>This function returns the <a href="#amplifier">amplifier</a> object of <b>
Layer</b> or <font color="#0000FF">null</font>.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Box (<b>Layer</b> : 
Waveform_Layer) <font color="#0000FF">return</font> Cairo_Box;</tt></p></blockquote>
<p>This function returns the <b>Layer</b>'s box.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Interpolation_Mode (<b>Layer</b> 
: Waveform_Layer)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Interpolation_Mode;</tt></p></blockquote>
<p>This function returns the waveform's interpolation mode. The interpolation 
modes are defined by the type <a href="#Gtk.Layered.Interpolation_Mode">
Interpolation_Mode</a> declared in the package <a href="#Gtk.Layered.Waveform">
Gtk.Layered</a>.</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Layered.Waveform.Get_Left_Extrapolation_Mode"></a>function</font> 
Get_Left_Extrapolation_Mode (<b>Layer</b> 
: Waveform_Layer)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Boolean;</tt></p></blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if the 
waveform extrapolates data left of the first sampled value.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Line (<b>Layer</b> : 
Waveform_Layer) <font color="#0000FF">return</font> Line_Parameters;</tt></p></blockquote>
<p>This function returns the <a href="#Gtk.Layered.Line_Parameters">line 
parameters</a> of the waveform.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Method (<b>Layer</b> : 
Waveform_Layer)<br>
<font color="#0000FF">&nbsp;&nbsp; return</font> Waveform_Drawing_Method;</tt></p></blockquote>
<p>This function returns the current rendering method used for the waveform.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Opacity (<b>Layer</b> : 
Waveform_Layer) <font color="#0000FF">return</font> Fill_Opacity;</tt></p></blockquote>
<p>This function returns the opacity of the filled part under the waveform.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Layered.Waveform.Get_Point"></a>
procedure</font> Get_Point<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer </b> &nbsp;: 
Waveform_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>X
</b>&nbsp;&nbsp;&nbsp;&nbsp; : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>T</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> X_Axis;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>V
</b>&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">out</font> Y_Axis;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Got_It</b> :
<font color="#0000FF">out</font> Boolean ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure returns the waveform point (T, V) corresponding to the coordinate <b>X</b>, 
relative to the widget. <b>Got_It</b> is returned <font color="#800000"><i>false</i></font> 
or else End_Error is propagated when there is no defined values 
around <b>X</b>.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Preferred_Method (<b>Layer</b> 
: Waveform_Layer)<br>
<font color="#0000FF">&nbsp;&nbsp; return</font> Waveform_Drawing_Method;</tt></p></blockquote>
<p>This function returns the preferred rendering method used for the waveform.</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Layered.Waveform.Get_Right_Extrapolation_Mode"></a>function</font> 
Get_Right_Extrapolation_Mode (<b>Layer</b> 
: Waveform_Layer)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Boolean;</tt></p></blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if the 
waveform extrapolates data right of the first sampled value.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Source<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b> : 
Waveform_Layer<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return access </font>Waveform_Data_Source'Class;</tt></p></blockquote>
<p>This function returns the waveform's data source or <font color="#0000FF">
null</font>.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Sweeper (<b>Layer</b> : 
Waveform_Layer) <font color="#0000FF">return</font> Gtk_Adjustment;</tt></p></blockquote>
<p>This function returns the <a href="#sweeper">sweeper</a> object of <b>Layer</b> 
or <font color="#0000FF">null</font>.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Layered.Waveform.Get_T"></a>function</font> Get_T (<b>Layer</b> : 
Waveform_Layer; <b>X</b> : GDouble) <font color="#0000FF">return</font> X_Axis;<br>
<font color="#0000FF">function</font> Get_V (<b>Layer</b> : Waveform_Layer; <b>Y</b> 
: GDouble) <font color="#0000FF">return</font> Y_Axis;</tt></p></blockquote>
<p>These functions convert the <b>Layer</b>'s widget coordinates to the 
corresponding data source values. The widget's coordinates are relative, the top 
left corner of the widget has the coordinates (0, 0).</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Layered.Waveform.Get_T1"></a>function</font> Get_T1 (<b>Layer</b> : 
Waveform_Layer) <font color="#0000FF">return</font> X_Axis;<font color="#0000FF"><br>
<a name="Gtk.Layered.Waveform.Get_T2"></a>function</font> Get_T2 (<b>Layer</b> : 
Waveform_Layer) <font color="#0000FF">return</font> X_Axis;<font color="#0000FF"><br>
<a name="Gtk.Layered.Waveform.Get_V1"></a>function</font> Get_V1 (<b>Layer</b> : 
Waveform_Layer) <font color="#0000FF">return</font> Y_Axis;<font color="#0000FF"><br>
<a name="Gtk.Layered.Waveform.Get_V2"></a>function</font> Get_V2 (<b>Layer</b> : 
Waveform_Layer) <font color="#0000FF">return</font> Y_Axis;</tt></p></blockquote>
<p>These functions return the values corresponding margins the margins of the 
waveform box. E.g. <a href="#Gtk.Layered.Waveform.Get_T1">Get_T1</a> is same as
<a href="#Gtk.Layered.Waveform.Get_T">Get_T</a> with <b>X</b> set at the left 
margin of the box. Note that the value returned by
<a href="#Gtk.Layered.Waveform.Get_V1">Get_V1</a> is normally greater than one 
of <a href="#Gtk.Layered.Waveform.Get_V2">Get_V2</a>.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_X (<b>Layer</b> : 
Waveform_Layer; <b>T</b> : X_Axis) <font color="#0000FF">return</font> GDouble;<br>
<font color="#0000FF">function</font> Get_Y (<b>Layer</b> : Waveform_Layer; <b>V</b> 
: Y_Axis) <font color="#0000FF">return</font> GDouble;</tt></p></blockquote>
<p>These functions convert the data source values to the <b>Layer</b>'s widget 
coordinates. The widget's coordinates are relative, the top left corner of the 
widget has the coordinates (0, 0).</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Waveform_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Box</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: Cairo_Box;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Line</b>&nbsp;&nbsp;&nbsp; 
: Line_Parameters;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Mode</b>&nbsp;&nbsp;&nbsp; 
: Interpolation_Mode;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Opacity</b> : Fill_Opacity<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes parameters of a waveform layer.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Amplifier<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Waveform_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Amplifier</b> : <font color="#0000FF">access</font> Gtk_Adjustment_Record'Class 
:= <font color="#0000FF">null</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes or removes the
<a href="#amplifier">amplifier</a> object of <b>Layer</b>.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;: <font color="#0000FF">in out</font> Waveform_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Color</b> : Gdk_Color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the waveform line color to <b>Color</b>.</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Layered.Waveform.Set_Extrapolation_Mode"></a>procedure</font> Set_Extrapolation_Mode<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b> :
<font color="#0000FF">in out</font> Waveform_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Left</b>&nbsp; 
: Boolean;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Right</b> : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure sets the extrapolation mode. The parameters <b>Left</b> and <b>
Right</b> determine the extrapolation to the left and to the right 
correspondingly.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Interpolation_Mode<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b> :
<font color="#0000FF">in out</font> Waveform_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Mode</b>&nbsp; 
: Interpolation_Mode<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure sets the <a href="#Gtk.Layered.Interpolation_Mode">
interpolation mode</a> of the waveform line.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Opacity<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Waveform_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Opacity</b> : Fill_Opacity<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure sets the filling opacity under the wave curve. The opacity 0.0 
turns the filling off.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Preferred_Method<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;&nbsp;: <font color="#0000FF">in out</font> Waveform_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Method</b> : Waveform_Drawing_Method<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure sets the preferred drawing method. The method will be applied 
when possible:</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Layered.Waveform.Waveform_Drawing_Method"></a>type</font> 
Waveform_Drawing_Method <font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp; </font>(&nbsp; Resample_New_And_Stroke,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Resample_All_And_Stroke<br>
&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>The available methods:</p>
<ul>
	<li><i>Resample_All_And_Stroke</i> samples the waveform points which would 
	be visible and draws the corresponding line using <a href="http://cairographics.org/manual/index.html">cairo</a> 
	Stroke. Note that drawing lines is very inefficient in the current 
	implementation of <a href="http://cairographics.org/manual/index.html">cairo</a>;</li>
	<li><i>Resample_New_And_Stroke</i> is same as above, but it tries to keep 
	sampled points of the line. Only new points are sampled. The old ones are 
	adjusted without requesting them anew from the source. As it was already 
	said, Stroke is relatively inefficient, so the difference between these two 
	methods might be marginal.</li>
</ul>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Source<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp; 
: <font color="#0000FF">in out</font> Waveform_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Source</b> : <font color="#0000FF">in out</font> Waveform_Data_Source'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<font color="#0000FF">procedure</font> Set_Source (<b>Layer</b> :
<font color="#0000FF">in out</font> Waveform_Layer);</tt></p></blockquote>
<p>This procedure connects the waveform to a <a href="#data_source">data source</a>. 
Without the <b>Source</b> parameter it disconnects the waveform from its current 
source if any. Note that the connected data source object shall not be destroyed 
before the waveform layer.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Sweeper<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Waveform_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sweeper</b> : <font color="#0000FF">access</font> Gtk_Adjustment_Record'Class :=
<font color="#0000FF">null</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes or removes the <a href="#sweeper">sweeper</a> object 
of <b>Layer</b>.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Layered.Waveform.Sweep"></a>procedure</font> Sweep<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b> :
<font color="#0000FF">in out</font> Waveform_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>From</b>&nbsp; 
: X_Axis; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>To</b>&nbsp;&nbsp;&nbsp; 
: X_Axis<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure explicitly sets values corresponding to the left and right 
margins of the box. When the parameter <b>From</b> is omitted the left margin is 
moved to preserve the values range. Constraint_Error is propagated when <b>From</b>..<b>To</b> 
is an illegal range. Normally these values are set implicitly using an
<a href="#sweeper">sweeper</a> object.</p>
<h3><a name="9.5"></a>9.5. Graph paper</h3>
<p><a name="Gtk.Layered.Graph_Paper"></a>The package
<a href="#Gtk.Layered.Graph_Paper">Gtk.Layered.Graph_Paper</a> declares the type 
of the graph paper layer:</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Layered.Graph_Paper.Graph_Paper_Layer"></a>type</font> 
Graph_Paper_Layer (&lt;&gt;) <font color="#0000FF">is<br>
&nbsp;&nbsp; new</font> <a href="#Gtk.Layered.Abstract_Layer">Abstract_Layer</a><br>
&nbsp;&nbsp; <font color="#0000FF">and</font> 
<a href="#Gtk.Layered.Scalable_Layer">Scalable_Layer</a><br>
&nbsp;&nbsp; <font color="#0000FF">and</font> 
<a href="#Gtk.Layered.Widened_Layer">Widened_Layer</a> <font color="#0000FF">
with private</font>;</tt></p></blockquote>
<p>Graph paper is a set of vertical and horizontal lines to ease reading out 
values of waveform curves. A graph paper is amplified and swept synchronously 
with the waveforms drawn over it.</p>
<blockquote>
	<p><img border="0" src="waveform-graph-paper.png" width="187" height="180" alt="waveform graphpaper"></p>
</blockquote>
<p>The following operations are defined on the graph paper layers:</p>
<blockquote>
<p><tt><font color="#0000FF">
procedure </font>Add_Graph_Paper<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b> : <font color="#0000FF">
not null access </font>Layer_Location'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Box</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Cairo_Box;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
X_Tick_Length</b>&nbsp; : Positive&nbsp; := <font color="#800000">50</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Y_Tick_Length</b>&nbsp; : Positive&nbsp; := <font color="#800000">50</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Major_Width</b>&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;:=
<font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Minor_Width</b>&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;:=
<font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Major_Color</b>&nbsp;&nbsp;&nbsp; : Gdk_Color := RGB (<font color="#800000">0.0</font>,
<font color="#800000">0.0</font>, <font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Minor_Color</b>&nbsp;&nbsp;&nbsp; : Gdk_Color := RGB (<font color="#800000">0.5</font>,
<font color="#800000">0.5</font>, <font color="#800000">0.5</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Major_Line_Cap</b> : Cairo_Line_Cap := CAIRO_LINE_CAP_BUTT;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Minor_Line_Cap</b> : Cairo_Line_Cap := CAIRO_LINE_CAP_BUTT;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
X_Axis</b>&nbsp; : <font color="#0000FF">
access </font>Gtk_Adjustment_Record'Class := <font color="#0000FF">
null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Y_Axis</b>&nbsp; : <font color="#0000FF">
access </font>Gtk_Adjustment_Record'Class := <font color="#0000FF">
null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Scaled</b>&nbsp; : Boolean := False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Widened</b> : Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
function </font>Add_Graph_Paper<font color="#0000FF"><br>
</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b> : <font color="#0000FF">
not null access </font>Layer_Location'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Box</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Cairo_Box;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
X_Tick_Length</b>&nbsp; : Positive&nbsp; := <font color="#800000">50</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Y_Tick_Length</b>&nbsp; : Positive&nbsp; := <font color="#800000">50</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Major_Width</b>&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;:=
<font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Minor_Width</b>&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;:=
<font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Major_Color</b>&nbsp;&nbsp;&nbsp; : Gdk_Color := RGB (<font color="#800000">0.0</font>,
<font color="#800000">0.0</font>, <font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Minor_Color</b>&nbsp;&nbsp;&nbsp; : Gdk_Color := RGB (<font color="#800000">0.5</font>,
<font color="#800000">0.5</font>, <font color="#800000">0.5</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Major_Line_Cap</b> : Cairo_Line_Cap := CAIRO_LINE_CAP_BUTT;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Minor_Line_Cap</b> : Cairo_Line_Cap := CAIRO_LINE_CAP_BUTT;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>X_Axis</b>&nbsp; 
: <font color="#0000FF">
access </font>Gtk_Adjustment_Record'Class := <font color="#0000FF">
null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Y_Axis</b>&nbsp; 
: <font color="#0000FF">
access </font>Gtk_Adjustment_Record'Class := <font color="#0000FF">
null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Scaled</b>&nbsp; 
: Boolean := False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Widened</b> 
: Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">
&nbsp;return not null access </font>Graph_Paper_Layer;</tt></p></blockquote>
<p>These procedure and function create a graph paper layer. The parameter <b>Under</b> 
specifies the layer location. The parameter <b>Box</b> is the box bounding the 
graph paper. <b>X_Tick_Length</b> is the approximate pixel distance between graph 
paper vertical lines corresponding to the major ticks. <b>Y_Tick_Length</b> is the approximate 
pixel distance 
between graph paper horizontal lines corresponding to the major ticks. The distances between lines are 
chosen to correspond round values. <b>Major_Width</b> specifies the width of the 
major tick lines. Major ticks are lines which would have values shown by an 
annotation. <b>Minor_Tick</b> specifies the width of the minor tick lines. Minor 
ticks lines are drawn between major tick lines. Depending on the values there 
could one or four minor tick lines between two major tick lines. The colors of 
the major and minor tick lines are specified by the <b>Major_Color</b> and <b>
Minor_Color</b> parameters correspondingly. The type of the tick lines ends are 
determined by the parameters <b>Major_Line_Cap</b> and <b>Minor_Line_Cap</b>. 
The parameter <b>X_Axis</b> is the <a href="#sweeper">sweeper</a> adjustment 
used by the graph paper. When this parameter is specified as
<font color="#0000FF">null</font>, no vertical lines are drawn. The parameter <b>
Y_Axis</b> is the <a href="#amplifier">amplifier</a> adjustment used by the 
graph paper. When specified as <font color="#0000FF">null</font>, no horizontal 
lines are drawn. The parameter <b>Widened</b> 
	define the tick line width behavior upon the widget's layer sizing as described in
<a href="#Gtk.Layered.Set_Widened">Set_Widened</a>. The 
	parameter <b>Scaled</b> controls the layer resizing (see
	<a href="#Gtk.Layered.Set_Scaled">Set_Scaled</a>). 
	The parameter <b>Scaled</b> when <i><font color="#800000">
true</font></i> resizes the layer when the widget is resized:<ul>
	<li>The x-coordinates of the box are multiplied by the widget's width and then 
	added to the x-coordinate of the widget's center as returned by <a href="#Gtk.Layered.Get_Center">Get_Center</a>;</li>
	<li>The y-coordinates of the box are multiplied by the widget's height and then added to the y-coordinate of the widget's center.</li>
	</ul>
	<p>Constraint_Error is propagated when some of the parameters are illegal.<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Layered.Graph_Paper.Attach"></a>procedure </font>Attach<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">
in out</font> Graph_Paper_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Annotation</b> : <font color="#0000FF">
in out</font> Graph_Paper_Annotation_Interface'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure attaches an 
<a href="#Gtk.Layered.Graph_Paper.Graph_Paper_Annotation_Interface">annotation</a> 
specified by the parameter <b>Annotation</b> to the graph paper <b>Layer</b>. When attached the 
annotation receives notification callbacks. The attached annotation must be 
detached using <a href="#Gtk.Layered.Graph_Paper.Detach">Detach</a>. Upon layer 
destruction all attached annotations are automatically detached.</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Layered.Graph_Paper.Detach"></a>procedure</font> Detach<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">
in out</font> Graph_Paper_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Annotation</b> : <font color="#0000FF">
in out</font> Graph_Paper_Annotation_Interface'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure detaches 
<a href="#Gtk.Layered.Graph_Paper.Graph_Paper_Annotation_Interface">annotation</a> 
specified by the parameter <b>Annotation </b>from the graph paper <b>Layer</b>. Nothing happens 
when annotation is not attached to <b>Layer</b>.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Box (<b>Layer</b> : 
Graph_Paper_Layer) <font color="#0000FF">return</font> Cairo_Box;</tt></p></blockquote>
<p>This function returns the graph paper box.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Major_Line (<b>Layer</b> : 
Graph_Paper_Layer)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Line_Parameters;</tt></p></blockquote>
<p>This function returns the <a href="#Gtk.Layered.Line_Parameters">parameters</a> 
of the major tick lines.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Minor_Line (<b>Layer</b> : 
Graph_Paper_Layer)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Line_Parameters;</tt></p></blockquote>
<p>This function returns the <a href="#Gtk.Layered.Line_Parameters">parameters</a> 
of the minor tick lines.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_X_Tick_Length (<b>Layer</b> : 
Graph_Paper_Layer)<br>
<font color="#0000FF">&nbsp;&nbsp; return</font> Positive;</tt></p></blockquote>
<p>This function returns approximate distance in pixels between two vertical 
tick lines. Note that the actual distance will likely differ from this one.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Y_Tick_Length (<b>Layer</b> : 
Graph_Paper_Layer)<br>
<font color="#0000FF">&nbsp;&nbsp; return</font> Positive;</tt></p></blockquote>
<p>This function returns approximate distance in pixels between two horizontal 
tick lines. Note that the actual distance will likely differ from this one.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_X_Axis (<b>Layer</b> : 
Graph_Paper_Layer)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Gtk_Adjustment;</tt></p></blockquote>
<p>This function returns the
<a href="#sweeper">sweeper</a> object used by the graph paper or
<font color="#0000FF">null</font>.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Y_Axis (<b>Layer</b> : 
Graph_Paper_Layer)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Gtk_Adjustment;</tt></p></blockquote>
<p>This function returns the <a href="#amplifier">amplifier</a> object used by 
the graph paper or <font color="#0000FF">null</font>.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_X_Raster (<b>Layer</b> : 
Graph_Paper_Layer)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> 
Gtk.Layered.Waveform.Rasters.Scale;</tt></p></blockquote>
<p>This function returns the <a href="#Gtk.Layered.Waveform.Rasters">scale</a> corresponding to the horizontal axis. The 
exception Use_Error is propagated when the scale information is not available 
because the layer has been changed and not yet drawn, so the scale is 
undetermined. Note that this would be the case if the annotation layer attached 
to the graph paper is drawn before the graph paper one. In that case the caller 
probably should re-queue another <a href="#Gtk.Layered.Draw">Draw</a> operation 
and ignore the exception.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Y_Raster (<b>Layer</b> : 
Graph_Paper_Layer)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> 
Gtk.Layered.Waveform.Rasters.Scale;</tt></p></blockquote>
<p>This function returns the <a href="#Gtk.Layered.Waveform.Rasters">scale</a> corresponding to the vertical axis. The exception Use_Error is propagated when the scale information is not available because the 
layer has been changed and not yet drawn, so the scale is undetermined.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Graph_Paper_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Box</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Cairo_Box;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
X_Tick_Length</b> : Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Y_Tick_Length</b> : Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Major_Line</b>&nbsp;&nbsp;&nbsp; : Line_Parameters;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Minor_Line</b>&nbsp;&nbsp;&nbsp; : Line_Parameters<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure sets the parameters of graph paper. Constraint_Error is 
propagated when some parameters are illegal.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_X_Axis<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">not null access</font> Graph_Paper_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b> : <font color="#0000FF">access</font> Gtk_Adjustment_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure sets adjustment object of the paper. When the parameter is
<font color="#0000FF">null</font> the vertical lines are not shown.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_X_Tick_Length<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp; 
: <font color="#0000FF">not null access</font> Graph_Paper_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Length</b> : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure sets the approximate pixel distance between two major vertical 
ticks.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Y_Axis<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">not null access</font> Graph_Paper_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b> : <font color="#0000FF">access</font> Gtk_Adjustment_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure sets adjustment object of the paper. When the parameter is
<font color="#0000FF">null</font> the horizontal lines are not shown.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Y_Tick_Length<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp; 
: <font color="#0000FF">not null access</font> Graph_Paper_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Length</b> : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure sets the approximate pixel distance between two major 
horizontal ticks.</p>
<h3><a name="9.6"></a>9.6. Graph paper annotation</h3>
<h4><a name="9.6.1"></a>9.6.1. Annotation interface</h4>
<p><a name="graph_paper_annotation"></a>The package
<a href="#Gtk.Layered.Graph_Paper">Gtk.Layered.Graph_Paper</a> declares the 
interface of the graph paper annotations:</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Layered.Graph_Paper.Graph_Paper_Annotation_Interface"></a>type</font> 
Graph_Paper_Annotation_Interface <font color="#0000FF">is limited interface</font>;</tt></p></blockquote>
<p>The interface has the following primitive operations:</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Changed<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Annotation</b>&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Graph_Paper_Annotation_Interface;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Layer</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Graph_Paper_Layer'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Box</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Cairo_Box;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>,&nbsp;
<b>To</b>&nbsp;&nbsp;&nbsp; : X_Axis;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Lower</b>, <b>Upper</b> : Y_Axis<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is abstract</font>;</tt></p></blockquote>
<p>Typically an annotation connected to the layer queries its dimensions and X/Y 
axis rasters to place its texts accordingly.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Detached<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Annotation</b> 
: <font color="#0000FF">in out</font> Graph_Paper_Annotation_Interface<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is null</font>;</tt></p></blockquote>
<p>The procedure is called when <b>Annotation</b> is detached from a graph paper 
layer.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Layered.Graph_Paper.Render"></a>function</font> Render<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp; : 
Graph_Paper_Annotation_Interface;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Value</b>&nbsp; 
: GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Raster</b> 
: Gtk.Layered.Waveform.Rasters.Scale<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> UTF8_String <font color="#0000FF">is abstract</font>;</tt></p></blockquote>
<p>This function renders <b>Value</b> to an UTF-8 string using the scale <b>
Raster</b>.</p>
<h4><a name="9.6.2"></a>9.6.2. Axis annotation implementation</h4>
<p><a name="Gtk.Layered.Graph_Paper_Annotation"></a>The package
<a href="#Gtk.Layered.Graph_Paper_Annotation">Gtk.Layered.Graph_Paper_Annotation</a> 
provides an implementation of
<a href="#Gtk.Layered.Graph_Paper.Graph_Paper_Annotation_Interface">graph paper 
annotation interface</a> to render plain numbers at the major ticks of a graph 
paper:</p>
<blockquote>
	<p>
	<img border="0" src="waveform-annotation-text.png" width="101" height="103" alt="waveform annotation text"></p>
</blockquote>
<p>The package declares the type:</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Layered.Graph_Paper_Annotation.Graph_Paper_Annotation_Layer"></a>type</font> Graph_Paper_Annotation_Layer (&lt;&gt;)
<font color="#0000FF">is<br>
&nbsp;&nbsp; new</font> <a href="#Gtk.Layered.Abstract_Layer">Abstract_Layer</a><br>
&nbsp;&nbsp; <font color="#0000FF">and</font> 
<a href="#Gtk.Layered.Scalable_Layer">Scalable_Layer</a><br>
&nbsp;&nbsp; <font color="#0000FF">and</font> 
<a href="#Gtk.Layered.Graph_Paper.Graph_Paper_Annotation_Interface">Graph_Paper_Annotation_Interface</a>
<font color="#0000FF">with private</font>;</tt></p></blockquote>
<p>The following operations are defined on the annotation layer:</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Layered.Graph_Paper_Annotation.Add_Graph_Paper_Annotation"></a>procedure</font> Add_Graph_Paper_Annotation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b> :
<font color="#0000FF">not null access</font> Layer_Location'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Paper</b> : <font color="#0000FF">not null access</font> Graph_Paper_Layer'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Location</b>&nbsp;&nbsp;&nbsp; : Axis_Location :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; 
(&nbsp; Orientation =&gt; Vertical,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Alignment&nbsp;&nbsp; =&gt; Absolute,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Top&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =&gt; -<font color="#800000">0.5</font>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Bottom&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =&gt; -<font color="#800000">0.5</font>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; X_Position&nbsp; =&gt;&nbsp; <font color="#800000">0.0</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Face</b>&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Pango_Cairo_Font :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Create_Toy<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
(&nbsp; Family =&gt; &quot;<font color="#FF0000">arial</font>&quot;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; 
Slant&nbsp; =&gt; CAIRO_FONT_SLANT_NORMAL,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Weight =&gt; CAIRO_FONT_WEIGHT_NORMAL<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Height</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= <font color="#800000">12.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Stretch</b>&nbsp;&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Color</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= RGB (<font color="#800000">0.0</font>, <font color="#800000">0.0</font>,
<font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Text_Angle</b>&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= <font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Justify_X</b>&nbsp;&nbsp; : Alignment&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= Center;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Justify_Y</b>&nbsp;&nbsp; : Vertical_Alignment := Center;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Superscript</b> : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= True;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Background</b>&nbsp; : Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= RGB (<font color="#800000">1.0</font>, <font color="#800000">1.0</font>,
<font color="#800000">1.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Border</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= <font color="#800000">2.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Overlap</b>&nbsp;&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:=-<font color="#800000">2.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Opacity</b>&nbsp;&nbsp;&nbsp;&nbsp; : Fill_Opacity&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Scaled</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Enlarged</b>&nbsp;&nbsp;&nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<font color="#0000FF">function</font> Add_Graph_Paper_Annotation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b> :
<font color="#0000FF">not null access</font> Layer_Location'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Paper</b> : <font color="#0000FF">not null access</font> Graph_Paper_Layer'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Location</b>&nbsp;&nbsp;&nbsp; : Axis_Location :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; 
( Orientation =&gt; Vertical,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Alignment&nbsp; =&gt; Absolute,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Top&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =&gt; -<font color="#800000">0.5</font>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Bottom&nbsp;&nbsp;&nbsp;&nbsp; =&gt; -<font color="#800000">0.5</font>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; X_Position =&gt;&nbsp; <font color="#800000">0.0</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Face</b>&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Pango_Cairo_Font :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Create_Toy<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; 
(&nbsp; Family =&gt; &quot;<font color="#FF0000">arial</font>&quot;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; 
Slant&nbsp; =&gt; CAIRO_FONT_SLANT_NORMAL,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Weight =&gt; CAIRO_FONT_WEIGHT_NORMAL<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Height</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= <font color="#800000">12.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Stretch</b>&nbsp;&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Color</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= RGB (<font color="#800000">0.0</font>, <font color="#800000">0.0</font>,
<font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Text_Angle</b>&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= <font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Justify_X</b>&nbsp;&nbsp; : Alignment&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= Center;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Justify_Y</b>&nbsp;&nbsp; : Vertical_Alignment := Center;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Superscript</b> : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= True;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Background</b>&nbsp; : Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= RGB (<font color="#800000">1.0</font>, <font color="#800000">1.0</font>,
<font color="#800000">1.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Border</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= <font color="#800000">2.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Overlap</b>&nbsp;&nbsp;&nbsp;&nbsp; : 
GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:=-<font color="#800000">2.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Opacity</b>&nbsp;&nbsp; &nbsp; : Fill_Opacity&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Scaled</b>&nbsp;&nbsp;&nbsp; &nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Enlarged</b>&nbsp; &nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">return not null access</font> Graph_Paper_Annotation_Layer;</tt></p></blockquote>
<p>These procedure and function create a graph paper annotation layer. The parameter <b>Under</b> 
specifies the layer location. The parameter <b>Paper</b> is the graph paper 
layer the annotation belongs to. Note that the annotation layer normally should 
be placed above the graph paper layer. The parameter <b>Location</b> specifies 
the placement of the annotation relatively to its graph paper. The
<a href="#Gtk.Layered.Graph_Paper_Annotation.Axis_Location">Axis_Location</a> 
type is declared in the same package as:<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Layered.Graph_Paper_Annotation.Axis_Orientation"></a>type</font> 
Axis_Orientation <font color="#0000FF">is</font> (Horizontal, Vertical);<br>
<font color="#0000FF">
<a name="Gtk.Layered.Graph_Paper_Annotation.Axis_Alignment"></a>type</font> 
Axis_Alignment <font color="#0000FF">is</font> (Absolute, Relative);<br>
<font color="#0000FF">
<a name="Gtk.Layered.Graph_Paper_Annotation.Axis_Location"></a>type</font> 
Axis_Location<br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Orientation : Axis_Orientation := Horizontal;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Alignment&nbsp;&nbsp; : 
Axis_Alignment&nbsp;&nbsp; := Relative<br>
&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">is<br>
record<br>
&nbsp;&nbsp; case </font>Orientation<font color="#0000FF"> is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when </font>Horizontal =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Left&nbsp; : GDouble := -<font color="#800000">0.5</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Right : GDouble :=&nbsp;
<font color="#800000">0.5</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">case</font> 
Alignment <font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when </font>
Absolute =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Y_Position : GDouble := <font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">when</font> Relative =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Y_Value : Y_Axis := <font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end case</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> Vertical =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Top&nbsp;&nbsp;&nbsp; : GDouble 
:= -<font color="#800000">0.5</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Bottom : GDouble :=
<font color="#800000">&nbsp;0.5</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">case</font> 
Alignment <font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when</font> 
Absolute =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
X_Position : GDouble := <font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">when</font> Relative =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
X_Value : X_Axis := <font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end case</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">end case</font>;<br>
<font color="#0000FF">end record</font>;</tt></p></blockquote>
<p>According to the type
<a href="#Gtk.Layered.Graph_Paper_Annotation.Axis_Orientation">Axis_Orientation</a> 
the axis along which an annotation is oriented can be:<ul>
	<li><i>Horizontal </i>and its left and right margins are specified by the <b>
	Left</b> and <b>Right</b> fields. Note that these coordinates are scaled 
	when the annotation is scaled;</li>
	<li><i>Vertical </i>and its top and bottom margins are specified by the <b>
	Top</b> and <b>Bottom</b> fields. These coordinates are also scaled.</li>
	</ul>
	<p>A value of the type
	<a href="#Gtk.Layered.Graph_Paper_Annotation.Axis_Alignment">Axis_Alignment</a> 
	specify the alignment of the axis:<ul>
		<li><i>Absolute</i> alignment specifies the y-coordinate of a horizontal 
		axis or the y-coordinate of a vertical axis. Note that the coordinate is 
		scaled when the annotation is scaled. This type of alignment is used 
		when the annotation axis should be fixed at certain location of the 
		widget;</li>
		<li><i>Relative</i> alignment specifies the source value <i>v</i> of (<i>t</i>,
		<i>v</i>) for a horizontal axis or the source argument <i>t</i> of (<i>t</i>,
		<i>v</i>) for a vertical axis. When the relative location is outside the 
		box of the annotation's graph paper, the annotation is not shown. This 
		type of alignment is useful usually for the horizontal axis to place the 
		annotation axis at a certain source value, e.g. at the null line.</li>
		</ul>
			<p> <b>Face</b> is the font used 
			for annotation texts. <b>Height</b> is the height of the annotation 
			texts. <b>Stretch</b> is the factor by which the original text width 
			is stretched. When <b>Stretch</b> is 1.0, the text's height to width 
			relation is not changed. <b> Color</b> is the 
			text color. <b>Text_Angle</b> is the angle between the <i>x</i>-axis 
			of
<a href="http://cairographics.org/manual/index.html">cairo</a> coordinate system 
			and horizontal axis of the annotation texts. <b>Justify_X</b> 
			specifies the way the annotation text box is aligned horizontally 
			relatively to its position on the axis:<ul>
	<li><i>Left</i>, the box's left margin is at the position;</li>
	<li><i>Center</i>, the box's center is at the position;</li>
	<li><i>Right</i>, the box's right margin is the position.</li>
	</ul>
			<p><b>Justify_Y</b> specifies the way the annotation text box is 
			aligned vertically relatively to its position on the axis:<ul>
	<li><i>Top</i>, the box's top margin is at the position;</li>
	<li><i>Center</i>, the box's center is at the position;</li>
	<li><i>Bottom</i>, the box's bottom margin is the position.</li>
	</ul>
	<p><b>Superscript </b>when set <font color="#800000"><i>true</i></font>, it allows 
	usage of superscript digits in formatting numbers, e.g. 123&#8729;10<sup>6</sup>. 
	When
	set <i><font color="#800000">false</font></i> numbers are formatted like 
	123E6.<p><b>Background</b> is the annotation text box color. <b>Border</b> is the 
	box border width around the text. <b>Overlap</b> is the allowed overlap of 
	two consequent text boxes. Usually <b>Overlap</b> is negative, which 
	absolute value is the gap between text boxes. <b>Opacity</b> is the text box 
	color opacity, when the opacity 1, the box becomes invisible. The parameter <b>
	Scaled</b> when <i><font color="#800000">
			true</font></i> resizes the layer when the widget is resized:<ul>
	<li><b>Left</b>, <b>Right</b>, <b>X_Position</b> fields of <b>Location</b> 
	and are multiplied by the width and the result is used as the center's 
	x-coordinate relatively to the widget's center as returned by <a href="#Gtk.Layered.Get_Center">
	Get_Center</a>;</li>
	<li><b>Top</b>, <b>Bottom</b>, <b>Y_Position</b> fields of <b>Location</b> 
	and are multiplied by the height and the result is used as the center's 
	y-coordinate relatively to the widget's center as returned by <a href="#Gtk.Layered.Get_Center">
	Get_Center</a>.</li>
	</ul>
		<p>The parameter <b>Enlarged</b> when true enlarges the annotation text 
		proportionally to the widget's size:</p>
		<ul>
	<li><b>Height</b>, <b>Border</b>, <b>Overlap</b> are are multiplied by the 
	widget's size as returned by <a href="#Gtk.Layered.Get_Size">Get_Size</a>.</li>
	</ul>
	<p>Constraint_Error is propagated when some of the parameters are illegal.<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Background_Color (<b>Layer</b> 
: Graph_Paper_Annotation_Layer)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Gdk_Color;</tt></p></blockquote>
<p>This function returns the text box color.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Border (<b>Layer</b> : 
Graph_Paper_Annotation_Layer)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> GDouble;</tt></p></blockquote>
<p>This function returns the text box border width.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Color (<b>Layer</b> : 
Graph_Paper_Annotation_Layer)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Gdk_Color;</tt></p></blockquote>
<p>This function returns the text color.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Enlarged (<b>Layer</b> : 
Graph_Paper_Annotation_Layer)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Boolean;</tt></p></blockquote>
<p>This function returns <i><font color="#800000">true</font></i> when the 
annotation texts are enlarged proportionally to the widget's size.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Face (<b>Layer</b> : 
Graph_Paper_Annotation_Layer)<br>
<font color="#0000FF">&nbsp;&nbsp; return</font> Pango_Cairo_Font;</tt></p></blockquote>
<p>This function returns annotation texts font.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Justify_X (<b>Layer</b> : 
Graph_Paper_Annotation_Layer)<br>
<font color="#0000FF">&nbsp;&nbsp; return</font> Alignment;</tt></p></blockquote>
<p>This function returns annotation text boxes horizontal alignment.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Justify_Y (<b>Layer</b> : 
Graph_Paper_Annotation_Layer)<br>
<font color="#0000FF">&nbsp;&nbsp; return</font> Vertical_Alignment;</tt></p></blockquote>
<p>This function returns annotation text boxes vertical alignment.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Height (<b>Layer</b> : 
Graph_Paper_Annotation_Layer)<br>
<font color="#0000FF">&nbsp;&nbsp; return</font> GDouble;</tt></p></blockquote>
<p>This function returns annotation texts height.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Location (<b>Layer</b> : 
Graph_Paper_Annotation_Layer)<br>
<font color="#0000FF">&nbsp;&nbsp; return</font> Axis_Location;</tt></p></blockquote>
<p>This function returns annotation texts axis location relative to the graph 
paper.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Opacity (<b>Layer</b> : 
Graph_Paper_Annotation_Layer)<br>
<font color="#0000FF">&nbsp;&nbsp; return</font> Fill_Opacity;</tt></p></blockquote>
<p>This function returns the opacity of the annotation text box color.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Overlap (<b>Layer</b> : 
Graph_Paper_Annotation_Layer)<br>
<font color="#0000FF">&nbsp;&nbsp; return</font> GDouble;</tt></p></blockquote>
<p>This function returns amount of the overlap allowed to the consequent 
annotation text boxes.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Stretch (<b>Layer</b> : 
Graph_Paper_Annotation_Layer)<br>
<font color="#0000FF">&nbsp;&nbsp; return</font> GDouble;</tt></p></blockquote>
<p>This function returns the annotation text stretch.</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Layered.Graph_Paper_Annotation.Get_Suffix"></a>function</font> 
Get_Suffix (<b>Layer</b> : 
Graph_Paper_Annotation_Layer)<br>
<font color="#0000FF">&nbsp;&nbsp; return</font> UTF8_String;</tt></p></blockquote>
<p>This function returns the text added to the end all annotation text created 
by the primitive operation
<a href="#Gtk.Layered.Graph_Paper.Render">Render</a> or by the function set by&nbsp;<a href="#Gtk.Layered.Graph_Paper_Annotation.Set_Renderer">Set_Renderer</a>. 
By default the suffix is empty. It can be set using the procedure Set_Suffix.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Superscript (<b>Layer</b> : 
Graph_Paper_Annotation_Layer)<br>
<font color="#0000FF">&nbsp;&nbsp; return</font> GDouble;</tt></p></blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if the 
superscript is allowed when formatting numbers.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Text_Angle (<b>Layer</b> : 
Graph_Paper_Annotation_Layer)<br>
<font color="#0000FF">&nbsp;&nbsp; return</font> GDouble;</tt></p></blockquote>
<p>This function returns the annotation text angle.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Image<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b> : 
Graph_Paper_Annotation_Layer;<br>
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Value</b> 
: GDouble<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> UTF8_String;</tt></p></blockquote>
<p>This function returns the text representing <b>Value</b> in the format the 
annotation layer would use to render a tick's value.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">in out</font> Graph_Paper_Annotation_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Location</b>&nbsp;&nbsp;&nbsp; : Axis_Location;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Face</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 
Pango_Cairo_Font;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Height</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Stretch</b>&nbsp;&nbsp;&nbsp;&nbsp; : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Color</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Color;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Text_Angle</b>&nbsp; : Double;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Justify_X</b>&nbsp;&nbsp; : Alignment;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Justify_Y</b>&nbsp;&nbsp; : Vertical_Alignment;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Superscript</b> : Boolean;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Background</b>&nbsp; : Gdk_Color;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Border</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Overlap</b>&nbsp;&nbsp;&nbsp;&nbsp; : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Opacity</b>&nbsp;&nbsp;&nbsp;&nbsp; : Fill_Opacity<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the parameters of the layer. The parameters are 
described for
<a href="#Gtk.Layered.Graph_Paper_Annotation.Add_Graph_Paper_Annotation">
Add_Graph_Paper_Annotation</a>.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Enlarged<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Graph_Paper_Annotation_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Enlarged</b> : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure sets the annotation texts enlargement mode.</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Renderer_Function <font color="#0000FF">
is access function</font><br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp; : 
Graph_Paper_Annotation_Layer'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Value</b>&nbsp; : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Raster</b> : 
Gtk.Layered.Waveform.Rasters.Scale<br>
&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font> 
UTF8_String;<br>
<font color="#0000FF">
<a name="Gtk.Layered.Graph_Paper_Annotation.Set_Renderer"></a>procedure</font> 
Set_Renderer<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Graph_Paper_Annotation_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Renderer</b> : Renderer_Function<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure sets the custom annotation texts rendering function. When set 
not-null it overrides the primitive operation
<a href="#Gtk.Layered.Graph_Paper.Render">Render</a>. Otherwise the function set 
is used instead. The function's parameters are similar to ones of
<a href="#Gtk.Layered.Graph_Paper.Render">Render</a>.</p>
<blockquote>
<p>
<font color="#0000FF">
<tt>
<a name="Gtk.Layered.Graph_Paper_Annotation.Set_Suffix"></a></tt></font> 
<tt><font color="#0000FF">procedure</font> Set_Suffix<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Layer</b>&nbsp; 
: <font color="#0000FF">in out</font> Graph_Paper_Annotation_Layer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Suffix</b> : UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure sets the text to add to the annotation texts created by the 
primitive operation
<a href="#Gtk.Layered.Graph_Paper.Render">Render</a> or else by the function set by&nbsp;<a href="#Gtk.Layered.Graph_Paper_Annotation.Set_Renderer">Set_Renderer</a>.</p>
<h4><a name="9.6.3"></a>9.6.3. Time annotation implementation</h4>
<p>When the horizontal axis is time its values require rendering in a human 
readable format. The package
<a href="#Gtk.Layered.Graph_Paper_Annotation">Gtk.Layered.Graph_Paper_Annotation</a> 
provides a time annotation layer for this purpose:</p>
<blockquote>
	<p>
	<img border="0" src="waveform-time-annotation.png" width="114" height="53" alt="waveform time annotation"></p>
</blockquote>
<p>The time format is</p>
<blockquote>
	<p><tt>&lt;hour&gt;:&lt;minute&gt;:&lt;second&gt;.&lt;fractions of second&gt;</tt></p>
</blockquote>
<p>The type declared in
<a href="#Gtk.Layered.Graph_Paper_Annotation">Gtk.Layered.Graph_Paper_Annotation</a> 
is</p>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Gtk.Layered.Graph_Paper_Annotation.Graph_Paper_Time_Annotation_Layer">
	</a>type</font> Graph_Paper_Time_Annotation_Layer (&lt;&gt;)
	<font color="#0000FF">is<br>&nbsp;&nbsp; new</font>
	<a href="#Gtk.Layered.Graph_Paper_Annotation.Graph_Paper_Annotation_Layer">
	<font color="#000000">Graph_Paper_Annotation_Layer</font></a>
	<font color="#0000FF">with private</font>;</tt></p>
</blockquote>
<p>The following operations are defined on the time annotation layer:</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Layered.Graph_Paper_Annotation.Add_Graph_Paper_Time_Annotation"></a>procedure</font> 
Add_Graph_Paper_Time_Annotation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b> :
<font color="#0000FF">not null access</font> Layer_Location'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Paper</b> : <font color="#0000FF">not null access</font> Graph_Paper_Layer'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Location</b>&nbsp;&nbsp;&nbsp; : Axis_Location :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; 
(&nbsp; Orientation =&gt; Horizontal,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Alignment&nbsp;&nbsp; =&gt; Absolute,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Left&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =&gt; -<font color="#800000">0.5</font>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Right&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =&gt; -<font color="#800000">0.5</font>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Y_Position&nbsp; =&gt;&nbsp; <font color="#800000">0.0</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Face</b>&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Pango_Cairo_Font :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Create_Toy<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; 
(&nbsp; Family =&gt; &quot;<font color="#FF0000">arial</font>&quot;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Slant&nbsp; =&gt; CAIRO_FONT_SLANT_NORMAL,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Weight =&gt; CAIRO_FONT_WEIGHT_NORMAL<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; 
);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Height</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= <font color="#800000">12.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Stretch</b>&nbsp;&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Color</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= RGB (<font color="#800000">0.0</font>, <font color="#800000">0.0</font>,
<font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Text_Angle </b> &nbsp;: Double&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= <font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Justify_X</b>&nbsp;&nbsp; : Alignment&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= Center;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Justify_Y</b>&nbsp;&nbsp; : Vertical_Alignment := Center;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Superscript</b> : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= True;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Background</b>&nbsp; : Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= RGB (<font color="#800000">1.0</font>, <font color="#800000">1.0</font>,
<font color="#800000">1.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Border</b>&nbsp;&nbsp; &nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= <font color="#800000">2.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Overlap</b>&nbsp;&nbsp; &nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:=-<font color="#800000">2.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Opacity</b>&nbsp;&nbsp;&nbsp;&nbsp; : Fill_Opacity&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Scaled</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Enlarged</b>&nbsp;&nbsp;&nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<font color="#0000FF">function</font> Add_Graph_Paper_Time_Annotation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Under</b> :
<font color="#0000FF">not null access</font> Layer_Location'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Paper</b> : <font color="#0000FF">not null access</font> Graph_Paper_Layer'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Location</b>&nbsp; &nbsp; : Axis_Location :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
(&nbsp; Orientation =&gt; Horizontal,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Alignment&nbsp;&nbsp; =&gt; Absolute,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Left&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =&gt; -<font color="#800000">0.5</font>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Right&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =&gt; -<font color="#800000">0.5</font>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; Y_Position&nbsp; =&gt;&nbsp; <font color="#800000">0.0</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Face</b>&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; 
: Pango_Cairo_Font :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Create_Toy<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
(&nbsp; Family =&gt; &quot;<font color="#FF0000">arial</font>&quot;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Slant&nbsp; =&gt; CAIRO_FONT_SLANT_NORMAL,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Weight =&gt; CAIRO_FONT_WEIGHT_NORMAL<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; 
);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Height</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Double&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= <font color="#800000">12.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Stretch</b>&nbsp;&nbsp;&nbsp;&nbsp; : Double&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Color</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= RGB (<font color="#800000">0.0</font>, <font color="#800000">0.0</font>,
<font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Text_Angle </b> &nbsp;: GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= <font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Justify_X</b>&nbsp;&nbsp; : Alignment&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= Center;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Justify_Y</b>&nbsp;&nbsp; : Vertical_Alignment := Center;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Superscript</b> : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= True;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Background</b>&nbsp; : Gdk_Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= RGB (<font color="#800000">1.0</font>, <font color="#800000">1.0</font>,
<font color="#800000">1.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Border</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= <font color="#800000">2.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Overlap</b>&nbsp;&nbsp;&nbsp;&nbsp; : 
GDouble&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:=-<font color="#800000">2.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Opacity</b>&nbsp;&nbsp;&nbsp;&nbsp; : Fill_Opacity&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Scaled</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Enlarged</b>&nbsp;&nbsp;&nbsp; : Boolean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">return not null access</font> 
Graph_Paper_Time_Annotation_Layer;</tt></p></blockquote>
<p>These procedure and function create a graph paper time annotation layer. The 
meaning of the parameters is same as for
<a href="#Gtk.Layered.Graph_Paper_Annotation.Graph_Paper_Annotation_Layer">
Graph_Paper_Annotation_Layer</a>.<blockquote>
	<p><tt><font color="#0000FF">function</font> Image (<b>Stamp</b> : 
	Ada.Calendar.Time) <font color="#0000FF">return</font> String;</tt></p>
</blockquote>
<p>This function returns a text representation of <b>Stamp</b>,</p><h3><a name="9.7"></a>9.7. Scales</h3>
<p><a name="Gtk.Layered.Waveform.Rasters"></a>The package 
<a href="#Gtk.Layered.Waveform">Gtk.Layered.Waveform</a> 
instantiates
<a href="http://www.dmitry-kazakov.de/ada/strings_edit.htm#Strings_Edit.Generic_Scale">
Strings_Edit.Generic_Scale</a> under the name
<a href="#Gtk.Layered.Waveform.Rasters">Rasters</a>.</p>
<hr>
<p align="right">
  <a name="10"></a><a href="#9"><IMG src="prev.gif" alt="[Back]" width="29" height="29"></a><a href="#16"
><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></a><a href="#11"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H2>10. Miscellany</H2>
<h3><a name="10.1"></a>10.1. Elliptic shapes</h3>
<p><a name="Cairo.Ellipses"></a>The package 
<a href="#Cairo.Ellipses">Cairo.Ellipses</a> provides means for 
drawing elliptic arcs and also defines some convenience types and operations.</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Cairo.Ellipses.Cairo_Tuple"></a>type </font>Cairo_Tuple<font color="#0000FF">
is record<br>
</font>&nbsp;&nbsp; X : GDouble;<br>
&nbsp;&nbsp; Y : GDouble;<font color="#0000FF"><br>
end record</font>;</tt></p></blockquote>
<p>The type <a href="#Cairo.Ellipses.Cairo_Tuple">Cairo_Tuple</a> defines a 
point of 2D space.</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Cairo.Ellipses.Cairo_Box"></a>type </font>Cairo_Box<font color="#0000FF">
is record<br>
</font>&nbsp;&nbsp; X1 : GDouble;<br>
&nbsp;&nbsp; Y1 : GDouble;<font color="#0000FF"><br>
</font>&nbsp;&nbsp; X2 : GDouble;<br>
&nbsp;&nbsp; Y2 : GDouble;<font color="#0000FF"><br>
end record</font>;</tt></p></blockquote>
<p>The type <a href="#Cairo.Ellipses.Cairo_Box">Cairo_Box</a> defines a 
rectangle in 2D space. The following convenience operations are defined on 
boxes:</p>
<blockquote>
<p><tt><font color="#0000FF">
function</font> Get_Path_Extents (<b>Context</b> : Cairo_Context)<br>
<font color="#0000FF">
&nbsp;&nbsp; return </font>Cairo_Box;</tt></p></blockquote>
<p>This function returns the box bounding current path in the context.</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Cairo.Ellipses.Ellipse_Parameters"></a>type </font>
Ellipse_Parameters<font color="#0000FF"> is record<br>
</font>&nbsp;&nbsp; Center&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Cairo_Tuple;<br>
&nbsp;&nbsp; Major_Curvature : GDouble;<br>
&nbsp;&nbsp; Minor_Radius&nbsp;&nbsp;&nbsp; : GDouble;<br>
&nbsp;&nbsp; Angle&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 
GDouble := <font color="#800000">0.0</font>;<font color="#0000FF"><br>
end record</font>;</tt></p></blockquote>
<p><a name="ellipse_parameters"></a>The type
<a href="#Cairo.Ellipses.Ellipse_Parameters">Ellipse_Parameters</a> 
defines parameters of an ellipse. The following figure illustrates the meaning of the ellipse parameters:</p>
<blockquote>
	<p><img border="0" src="ellipse_parameters.png" width="577" height="450" alt="ellipse parameters"></p>
</blockquote>
<p>Note that the <a href="http://cairographics.org/manual/index.html">cairo</a> coordinate system has the <i>y</i>-axis upside-down. 
Correspondingly all angles are incremented clockwise. The parameters of the 
curve are:</p>
<ul>
	<li><i>Center</i> is the location of the ellipse center;</li>
	<li><i>Major_Curvature k</i> is the curvature of the major ellipse axis. The 
	curvature is 1/<i>R</i> where <i>R</i> is the radius. The curvature can be 
	0.0, in which case the ellipse becomes a straight line;</li>
	<li><i>Minor_Radius r</i> is the radius of the minor ellipse axis;</li>
	<li><i>Angle &alpha;</i> is the angle between the <i>x</i>-axis and the 
	major axis of the ellipse.</li>
</ul>
<p>The parameters of an elliptic arc are further:</p>
<ul>
	<li><i>&beta;</i> is the angle where the arc starts;</li>
	<li><i>&gamma;</i> is the angle where the arc stops.</li>
</ul>
<h4><a name="10.1.1"></a>10.1.1. Relative angles</h4>
<p>The type Ellipse_Angle specifies the angle relatively to the major 
axis of the ellipse after scaling the ellipse to a circle:</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Ellipse_Angle <font color="#0000FF">is 
new</font> GDouble;</tt></p></blockquote>
<p>The angles can be converted to each other using the following operations:</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> &quot;<font color="#FF0000">*</font>&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Ellipse</b> : 
Ellipse_Parameters;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Angle</b>&nbsp;&nbsp; 
: GDouble<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Ellipse_Angle;<br>
<font color="#0000FF">function</font> &quot;<font color="#FF0000">*</font>&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Angle</b>&nbsp;&nbsp; 
: GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Ellipse</b> 
: Ellipse_Parameters<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Ellipse_Angle;</tt></p></blockquote>
<p>These functions convert an absolute angle to the corresponding relative angle 
of <b>Ellipse</b>.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> &quot;<font color="#FF0000">/</font>&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Angle</b>&nbsp;&nbsp; 
: Ellipse_Angle;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Ellipse</b> 
: Ellipse_Parameters<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> GDouble;</tt></p></blockquote>
<p>This function converts a relative angle to the corresponding absolute angle.</p>
<h4><a name="10.1.2"></a>10.1.2. Transformations</h4>
<p>The following operations transform ellipses:</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> &quot;<font color="#FF0000">*</font>&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Ellipse</b> : 
Ellipse_Parameters;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Gain</b>&nbsp;&nbsp;&nbsp; 
: GDouble<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Ellipse_Parameters;<br>
<font color="#0000FF">function</font> &quot;<font color="#FF0000">*</font>&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Gain</b>&nbsp;&nbsp;&nbsp; 
: GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Ellipse</b> 
: Ellipse_Parameters<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Ellipse_Parameters;<br>
<font color="#0000FF">function</font> &quot;<font color="#FF0000">/</font>&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Ellipse</b> : 
Ellipse_Parameters;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Gain</b>&nbsp;&nbsp;&nbsp; 
: GDouble<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Ellipse_Parameters;</tt></p></blockquote>
<p>Multiplying or dividing by a scalar magnifies or shrinks the ellipse by <b>
Gain</b>.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> &quot;<font color="#FF0000">+</font>&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Ellipse</b> : 
Ellipse_Parameters;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Offset</b>&nbsp; 
: Cairo_Tuple<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Ellipse_Parameters;<br>
<font color="#0000FF">function</font> &quot;<font color="#FF0000">+</font>&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Offset</b>&nbsp; : 
Cairo_Tuple;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Ellipse</b> 
: Ellipse_Parameters<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Ellipse_Parameters;<br>
<font color="#0000FF">function</font> &quot;<font color="#FF0000">-</font>&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Ellipse</b> : 
Ellipse_Parameters;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Offset</b>&nbsp; 
: Cairo_Tuple<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Ellipse_Parameters;<br>
<font color="#0000FF">function</font> &quot;<font color="#FF0000">-</font>&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Offset</b>&nbsp; : 
Cairo_Tuple;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Ellipse</b> 
: Ellipse_Parameters<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Ellipse_Parameters;</tt></p></blockquote>
<p>Adding <b>Offset</b> to the ellipse moves it by adding <b>Offset</b> to its 
center.</p>
<h4><a name="10.1.3"></a>10.1.3. Information functions</h4>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Point<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Ellipse</b> : 
Ellipse_Parameters;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Angle</b>&nbsp;&nbsp; 
: Ellipse_Angle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Cairo_Tuple;</tt></p></blockquote>
<p>This function returns the coordinates of an ellipse point at <b>Angle</b>. <b>
Angle</b> is the ellipse angle relatively to the major ellipse axis. 
Constraint_Error is propagated when the result is infinite.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_X<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Ellipse</b> : 
Ellipse_Parameters;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Angle</b>&nbsp;&nbsp; 
: Ellipse_Angle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> GDouble;<font color="#0000FF"><br>
function</font> Get_X<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Ellipse</b> : 
Ellipse_Parameters;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Angle</b>&nbsp;&nbsp; 
: Ellipse_Angle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> GDouble;</tt></p></blockquote>
<p>These function return the coordinates of the ellipse point at <b>Angle</b>.
<b>Angle</b> is the ellipse angle relatively to the major ellipse axis. 
Constraint_Error is propagated when the result is infinite.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Is_Bounded (<b>Ellipse</b> : 
Ellipse_Parameters) <font color="#0000FF">return</font> Boolean;</tt></p></blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if the ellipse 
is bounded.</p>
<h4><a name="10.1.4"></a>10.1.4. Drawing</h4>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Cairo.Ellipses.Elliptic_Arc"></a>
procedure</font> Elliptic_Arc<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Context</b> :
Cairo_Context;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Ellipse</b> : Ellipse_Parameters;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>From</b>&nbsp;&nbsp;&nbsp; 
: Ellipse_Angle := <font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Length</b>&nbsp; : Ellipse_Angle := <font color="#800000">2.0</font> * Pi<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure draws an elliptic arc starting at the angle <b>From</b> to the 
angle <b>From</b> + <b>Length</b>. <b>Length</b> can be negative. 
Constraint_Error is propagated when the arc would go into infinity.</p>
<h3><a name="10.2"></a>10.2. Stream I/O</h3>
<p><a name="Gtk.Layered.Stream_IO"></a>The package
<a href="#Gtk.Layered.Stream_IO">Gtk.Layered.Stream_IO</a> provides stream I/O 
of layered widgets and the data types related to such I/O. The widget I/O is 
achieved by the operations:</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Restore<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Stream</b> :
<font color="#0000FF">in out</font> Root_Stream_Type'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Widget</b> : <font color="#0000FF">not null access</font> 
Gtk_Layered_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure restores layers stored in <b>Stream</b>. The layers are added 
on top of <b>Widget</b>. Constraint_Error is propagated when parameters of some 
layers are illegal. Other exceptions may indicate input errors. At the end of 
restoring you might wish to call 
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.widget.html#L2297C14">Queue_Draw</a> in order to make the changes visible.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Store<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Stream</b> :
<font color="#0000FF">in out</font> Root_Stream_Type'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Widget</b> : <font color="#0000FF">not null access constant</font> 
Gtk_Layered_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure restores layers stored in <b>Stream</b>. The layers are added 
on top of <b>Widget</b>. Constraint_Error is propagated when parameters of some 
layers are illegal. Other exceptions may indicate output errors.</p>
<p>The package also provides Store and Restore operations for types used to 
describe the parameters of the widget. The implementation of these operations 
uses character output and the format portable across platforms supporting 
character streams.</p>
<h3><a name="10.3"></a>10.3. Interpolation mode</h3>
<p>The interpolation modes of waveforms are defined by the type:</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Layered.Interpolation_Mode"></a>type</font> 
Interpolation_Mode <font color="#0000FF">is</font> (Left, Linear);</tt></p></blockquote>
<p>in the package Gtk.Layered. The modes are:</p>
<ul>
	<li><i>Left</i> - the value of the point is taken from the rightmost point 
	left of the point;</li>
	<li><i>Linear</i> - the value of the point is linearly interpolated between 
	the rightmost point on the left and the leftmost point on the right.</li>
</ul>
<h3><a name="10.4"></a>10.4. Vertical alignment</h3>
<p>The types of vertical alignment are defined by:</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Layered.Vertical_Alignment"></a>type</font> 
Vertical_Alignment <font color="#0000FF">is</font> (Top, Center, Bottom);</tt></p></blockquote>
<p>in the package Gtk.Layered.</p>
<h3><a name="10.5"></a>10.5. Fonts</h3>
<p>The package Pango.Cairo.Fonts provides an abstraction layer above toy and 
Pango fonts, which are differently handled in 
<a href="http://cairographics.org/manual/index.html">cairo</a>. The package 
defines the type</p>
	<blockquote>
<p><tt><font color="#0000FF">type</font> 
Pango_Cairo_Font <font color="#0000FF">is private</font>;</tt></p></blockquote>
<p>which encapsulates different kind of fonts. The object uses reference 
counting for the underlying face objects.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Create_Pango<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Family</b>&nbsp; : 
String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Style</b>&nbsp;&nbsp; 
: Pango.Enums.Style&nbsp;&nbsp; := Pango_Style_Normal;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Variant</b> 
: Pango.Enums.Variant := Pango_Variant_Normal;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Weight</b>&nbsp; 
: Pango.Enums.Weight&nbsp; := Pango_Weight_Normal;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Stretch</b> 
: Pango.Enums.Stretch := Pango_Stretch_Normal;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Size</b>&nbsp;&nbsp;&nbsp; 
: GInt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= <font color="#800000">12</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Pango_Cairo_Font;</tt></p></blockquote>
<p>This function creates pango font face. The parameters are same as ones of To_Font_Description from Pango.Font.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Create_Pango_From_Description (<b>Description</b> 
: UTF8_String)<br>
&nbsp;&nbsp; <font color="#0000FF">return</font> Pango_Cairo_Font;</tt></p></blockquote>
<p>This function creates pango font face. The parameter <b>Description</b> is 
same as in From_String from Pango.Font.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Create_Toy<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Family</b> : 
UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Slant</b>&nbsp; 
: Cairo_Font_Slant&nbsp; := CAIRO_FONT_SLANT_NORMAL;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Weight</b> 
: Cairo_Font_Weight := CAIRO_FONT_WEIGHT_NORMAL<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Pango_Cairo_Font;</tt></p></blockquote>
<p>This function creates a toy font face. The parameters are same as ones of 
Toy_Font_Face_Create from Cairo.Font_Face.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Family<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Font</b> : 
Pango_Cairo_Font<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font> UTF8_String;</tt></p></blockquote>
<p>This function returns the font family.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Get_Markup_Extents<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Font</b>&nbsp;&nbsp;&nbsp; 
: Pango_Cairo_Font;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Context</b> : Cairo_Context;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Text</b>&nbsp;&nbsp;&nbsp; 
: UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Extents</b> : <font color="#0000FF">out</font> Cairo_Text_Extents<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure calculates the extents of the 
			<a href="https://developer.gnome.org/pango/stable/PangoMarkupFormat.html">
			pango markup</a> text specified by 
the parameter <b>Text</b>. For the toy font the result is equivalent to the 
extent of the text with all tags stripped. Note that the implementation may 
change the context settings. The result is set into the parameter <b>Extents</b>.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Slant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Font</b> : 
Pango_Cairo_Font<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ) <font color="#0000FF">&nbsp;return</font> Cairo_Font_Slant;</tt></p></blockquote>
<p>This function returns the font slant.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Size (<b>Font</b> : 
Pango_Cairo_Font)<font color="#0000FF"> return</font> GInt;</tt></p></blockquote>
<p>This function returns the font size in points. For a toy font it is always 
12.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Get_Text_Extents<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Font</b>&nbsp;&nbsp;&nbsp; 
: Pango_Cairo_Font;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Context</b> : Cairo_Context;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Text</b>&nbsp;&nbsp;&nbsp; 
: UTF8_String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Extents</b> : <font color="#0000FF">out</font> Cairo_Text_Extents<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure calculates the extents of <b>Text</b>. Note that the 
implementation may change the context settings. The result is set into the 
parameter <b>Extents</b>.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Weight<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Font</b> : 
Pango_Cairo_Font<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font> Cairo_Font_Weight;<br>
<font color="#0000FF">function</font> Get_Weight<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Font</b> : 
Pango_Cairo_Font<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font> Pango.Enums.Weight;</tt></p></blockquote>
<p>These functions return the font slant as either toy or pango enumeration 
type. The original slant values is converted as necessary.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Pango.CairoAda.Fonts.Restore"></a>
procedure</font> Restore<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Stream</b> :
<font color="#0000FF">in out</font> Root_Stream_Type'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Font
</b>&nbsp; : <font color="#0000FF">out</font> Pango_Cairo_
               Font<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure restores <b>Font</b> from data previously written into <b>
Stream</b> using <a href="#Pango.CairoAda.Fonts.Store">Store</a>.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Family<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Font</b>&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Pango_Cairo_Font;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Family</b> : UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure sets the font face family.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Slant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Font</b>&nbsp; 
: <font color="#0000FF">in out</font> Pango_Cairo_Font;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Slant</b> : Cairo_Font_Slant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This changes the font face slant.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Size<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Font</b> 
: <font color="#0000FF">in out</font> Pango_Cairo_Font;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Size</b> : GInt<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This changes the font size. For a toy font the procedure is void.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Weight<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Font</b>&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Pango_Cairo_Font;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Weight</b> : Cairo_Font_Weight<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<font color="#0000FF">procedure</font> Set_Weight<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Font</b>&nbsp;&nbsp; 
: <font color="#0000FF">in out</font> Pango_Cairo_Font;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Weight</b> : Pango.Enums.Weight<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This changes the font face weight. The value is converted as necessary.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Show_Markup<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Font</b>&nbsp;&nbsp;&nbsp; 
: Pango_Cairo_Font;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Context</b> : Cairo_Context;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Text</b>&nbsp;&nbsp;&nbsp; 
: UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure renders the 
			<a href="https://developer.gnome.org/pango/stable/PangoMarkupFormat.html">
			pango markup</a> text specified by the parameter <b>
Text</b> in <b>Context</b>. For the toy font the result is equivalent to the 
extent of the text with all tags stripped. The text baseline is drawn right of 
the current position in the context. Note that when <b>Text</b> should not 
contain multiple lines.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Show_Text<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Font</b>&nbsp;&nbsp;&nbsp; 
: Pango_Cairo_Font;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Context</b> : Cairo_Context;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Text</b>&nbsp;&nbsp;&nbsp; 
: UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure renders <b>Text</b> right of the current position in <b>
Context</b>. Note that when <b>Text</b> should not contain multiple lines.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Pango.CairoAda.Fonts.Store"></a>procedure</font> 
Store<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Stream</b> :
<font color="#0000FF">in out</font> Root_Stream_Type'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Font
</b>&nbsp; : Pango_Cairo_Font<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure stores Font into <b>Stream</b>. It can be read from stream 
using <a href="#Pango.CairoAda.Fonts.Restore">Restore</a>.</p>
<hr>
<p align="right">
  <a name="11"></a><a href="#10"><IMG src="prev.gif" alt="[Back]" width="29" height="29"></a><a href="#16"
><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></a><a href="#12"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H2>11. Samples</H2>
<p>The software contains widgets provided as usable samples of instruments. Due 
to great variance of requirements along automation projects it does not make 
sense to provide widgets of fixed layouts. The sample widgets are rather 
intended to illustrate the usage of layers in order to achieve the desired 
appearance of the instruments. The samples can be used as templates for custom 
instruments design. Note also that sample widgets can be easily enhanced. The 
test application illustrates this by adding needles and labels to existing 
widgets without modifying their implementation.</p>
<p>If a needle need to be added to the widget, the widget's background is layer 
is queried and the new needle layer is inserted under the foreground layer of 
the background:</p>
	<blockquote>
<p><tt>Gtk_New (Adjustment, <font color="#800000">0.0</font>,
<font color="#800000">0.0</font>, <font color="#800000">100.0</font>,
<font color="#800000">1.0</font>, <font color="#800000">10.0</font>);<br>
Add_Elliptic_Bar<br>
(&nbsp; Under&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =&gt; 
Widget.Get_Background.Get_Foreground,<br>
&nbsp;&nbsp; Ellipse&nbsp;&nbsp;&nbsp; =&gt; ((<font color="#800000">0.0</font>,
<font color="#800000">0.0</font>), <font color="#800000">1.0</font> /
<font color="#800000">0.47</font>, <font color="#800000">0.47</font>,
<font color="#800000">0.0</font>),<br>
&nbsp;&nbsp; From&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =&gt; <font color="#800000">
1.0</font> * Pi / <font color="#800000">4.0</font>,<br>
&nbsp;&nbsp; Length&nbsp;&nbsp;&nbsp;&nbsp; =&gt; -<font color="#800000">3.0</font> 
* Pi / <font color="#800000">2.0</font>,<br>
&nbsp;&nbsp; Width&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =&gt; <font color="#800000">0.015</font>,<br>
&nbsp;&nbsp; Color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =&gt; RGB (<font color="#800000">1.0</font>,
<font color="#800000">0.6</font>, <font color="#800000">0.3</font>),<br>
&nbsp;&nbsp; Adjustment =&gt; Adjustment,<br>
&nbsp;&nbsp; Scaled&nbsp;&nbsp;&nbsp;&nbsp; =&gt; True,<br>
&nbsp;&nbsp; Widened&nbsp;&nbsp;&nbsp; =&gt; True<br>
);</tt></p></blockquote>
<p>Here a round bar needle is added to Widget. If the needle must be under the 
widget's needle, then the needle layer is used to put the new one needle under. 
Labels showing texts are usually added under the caching layer of the widget.</p>
<H3><a name="11.1"></a>11.1. Gauges</H3>
<p><a name="Gtk.Gauge"></a>The samples of widgets implementing gauges are 
grouped as child packages of the package <a href="#Gtk.Gauge">Gtk.Gauge</a>.</p>
<h4><a name="11.1.1"></a>11.1.1. Gtk.Gauge.Round_254</h4>
<p>The package <a href="#Gtk.Gauge.Round_254">Gtk.Gauge.Round_254</a> provides 
the widget:</p>
	<blockquote>
		<p><a name="Gtk.Gauge.Round_254"></a>
		<img border="0" src="gtk_gauge_round_254.png" width="246" height="246" alt="gauge round 254"></p>
</blockquote>
	<blockquote>
<p><tt><font color="#0000FF">type</font> Gtk_Gauge_Round_254_Record
<font color="#0000FF">is<br>
&nbsp;&nbsp; new</font> Gtk_Layered_Record <font color="#0000FF">with private</font>;<br>
<font color="#0000FF">type</font> Gtk_Gauge_Round_254 <font color="#0000FF">is</font><br>
&nbsp;&nbsp; <font color="#0000FF">access all</font> 
Gtk_Gauge_Round_254_Record'Class;</tt></p></blockquote>
<p>The following operations are provided:</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Gtk_Gauge_Round_254;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Major_Texts</b> : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Minor_Texts</b> : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Delimiter</b>&nbsp;&nbsp; : 
	Character := ' 
	'; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b>&nbsp; : Gtk_Adjustment := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;&nbsp;&nbsp;&nbsp; : Positive := <font color="#800000">17</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>These procedures create the widget.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font>&nbsp;Gtk_Gauge_Round_254_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Major_Texts</b> : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Minor_Texts</b> : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Delimiter</b>&nbsp;&nbsp; : 
	Character; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b>&nbsp; : Gtk_Adjustment;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;&nbsp;&nbsp;&nbsp; : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>One of these procedures must be called from Initialize of any derived widget 
type.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Background<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Gtk_Gauge_Round_254_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Elliptic_Background_Layer;</tt></p></blockquote>
<p>This function returns the widget's background.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Cache<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Round_254_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Cache_Layer;</tt></p></blockquote>
<p>This function returns the widget's caching layer.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Major_Annotation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Round_254_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Elliptic_Annotation_Layer;</tt></p></blockquote>
<p>This function returns the widget's major annotation layer.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Minor_Annotation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Round_254_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Elliptic_Annotation_Layer;</tt></p></blockquote>
<p>This function returns the widget's minor annotation layer.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Needle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Round_254_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Needle_Layer;</tt></p></blockquote>
<p>This function returns the widget's needle.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Round_254_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp; : GDouble<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the indicated value. The value can also be changed 
through the widget's needle or its adjustment. Note that the procedure does not 
emit events. In order to redraw the widget use
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.widget.html#L2297C14">Queue_Draw</a>.</p>
<h4><a name="11.1.2"></a>11.1.2. Gtk.Gauge.Round_270</h4>
	<p>The package <a href="#Gtk.Gauge.Round_270">Gtk.Gauge.Round_270</a> 
	provides the widget:</p>
<blockquote>
		<p><a name="Gtk.Gauge.Round_270"></a>
		<img border="0" src="gtk_gauge_round_270.png" width="246" height="246" alt="gauge round 270"></p>
</blockquote>
<p>Note that the indicated text <i>mph</i> does not belong to the widget, it was 
added later placing a <a href="#Gtk.Layered.Label">Label</a> under the caching 
layer.</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Gtk_Gauge_Round_270_Record
<font color="#0000FF">is<br>
&nbsp;&nbsp; new</font> Gtk_Layered_Record <font color="#0000FF">with private</font>;<br>
<font color="#0000FF">type</font> Gtk_Gauge_Round_270 <font color="#0000FF">is</font><br>
&nbsp;&nbsp; <font color="#0000FF">access all</font> 
Gtk_Gauge_Round_270_Record'Class;</tt></p></blockquote>
<p>The following operations are provided:</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Gtk_Gauge_Round_270;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Texts</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Delimiter</b>&nbsp; : 
	Character := ' 
	'; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b> : Gtk_Adjustment := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;&nbsp;&nbsp; : Positive := <font color="#800000">6</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>These procedures create the widget.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font>&nbsp;Gtk_Gauge_Round_270_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Texts</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Delimiter</b>&nbsp; : 
	Character; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b> : Gtk_Adjustment;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;&nbsp;&nbsp; : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>One of these procedures must be called from Initialize of any derived widget 
type.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Annotation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Round_270_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Elliptic_Annotation_Layer;</tt></p></blockquote>
<p>This function returns the widget's major annotation layer.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Background<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Gtk_Gauge_Round_270_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Elliptic_Background_Layer;</tt></p></blockquote>
<p>This function returns the widget's background.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Cache<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Round_270_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Cache_Layer;</tt></p></blockquote>
<p>This function returns the widget's caching layer.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Needle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Round_270_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Needle_Layer;</tt></p></blockquote>
<p>This function returns the widget's needle.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Round_270_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp; : GDouble<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the indicated value. The value can also be changed 
through the widget's needle or its adjustment. Note that the procedure does not 
emit events. In order to redraw the widget use
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.widget.html#L2297C14">Queue_Draw</a>.</p>
<h4><a name="11.1.3"></a>11.1.3.
		Gtk.Gauge.Round_270_Outer</h4>
<p>The package <a href="#Gtk.Gauge.Round_270_Outer">Gtk.Gauge.Round_270_Outer</a> 
provides the widget:</p>
	<blockquote>
		<p><a name="Gtk.Gauge.Round_270_Outer"></a>
		<img border="0" src="gtk_gauge_round_270_out.png" width="226" height="226" alt="gauge round 270 out"></p>
</blockquote>
<p>Note that the indicated sector does not belong to the widget, it was added 
later placing a <a href="#Gtk.Layered.Sector_Needle">Sector_Needle</a> above the 
caching layer. The indicated text <i>mph</i> was 
added later placing a <a href="#Gtk.Layered.Label">Label</a> under the caching 
layer.</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Gtk_Gauge_Round_270_Outer_Record<font color="#0000FF"> 
is<br>
&nbsp;&nbsp; new</font> Gtk_Layered_Record <font color="#0000FF">with private</font>;<br>
<font color="#0000FF">type</font> Gtk_Gauge_Round_270_Outer<font color="#0000FF"> 
is</font><br>
&nbsp;&nbsp; <font color="#0000FF">access all</font> 
Gtk_Gauge_Round_270_Outer_Record'Class;</tt></p></blockquote>
<p>The following operations are provided:</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Gtk_Gauge_Round_270_Outer;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Texts</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Delimiter</b>&nbsp; : 
	Character := ' 
	'; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b> : Gtk_Adjustment := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;&nbsp;&nbsp; : Positive := <font color="#800000">6</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>These procedures create the widget.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font>&nbsp;Gtk_Gauge_Round_270_Outer_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Texts</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Delimiter</b>&nbsp; : 
	Character; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b> : Gtk_Adjustment;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;&nbsp;&nbsp; : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>One of these procedures must be called from Initialize of any derived widget 
type.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Annotation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Round_270_Outer_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Elliptic_Annotation_Layer;</tt></p></blockquote>
<p>This function returns the widget's major annotation layer.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Background<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Round_270_Outer_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Elliptic_Background_Layer;</tt></p></blockquote>
<p>This function returns the widget's background.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Cache<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Round_270_Outer_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Cache_Layer;</tt></p></blockquote>
<p>This function returns the widget's caching layer.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Needle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Round_270_Outer_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Needle_Layer;</tt></p></blockquote>
<p>This function returns the widget's needle.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Round_270_Outer_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp; :G Double<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the indicated value. The value can also be changed 
through the widget's needle or its adjustment. Note that the procedure does not 
emit events. In order to redraw the widget use
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.widget.html#L2297C14">Queue_Draw</a>.</p>
<h4><a name="11.1.4"></a>11.1.4.
		Gtk.Gauge.Round_270_Reversed</h4>
<p>The package <a href="#Gtk.Gauge.Round_270_Reversed">
Gtk.Gauge.Round_270_Reversed</a> provides a gauge with the needle moving 
counterclockwise:</p>
	<blockquote>
		<p><a name="Gtk.Gauge.Round_270_Reversed"></a>
		<img border="0" src="gtk_gauge_round_270_reversed.png" width="246" height="246" alt="gauge round 270 reversed"></p>
</blockquote>
<blockquote>
<p><tt><font color="#0000FF">type</font> Gtk_Gauge_Round_270_Reversed_Record<font color="#0000FF"> 
is<br>
&nbsp;&nbsp; new</font> Gtk_Layered_Record <font color="#0000FF">with private</font>;<br>
<font color="#0000FF">type</font> Gtk_Gauge_Round_270_Reversed
<font color="#0000FF">is</font><br>
&nbsp;&nbsp; <font color="#0000FF">access all</font> 
Gtk_Gauge_Round_270_Reversed_Record'Class;</tt></p></blockquote>
<p>The following operations are provided:</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Gtk_Gauge_Round_270_Reversed;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Texts</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Delimiter</b>&nbsp; : 
	Character := ' 
	'; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b> : Gtk_Adjustment := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;&nbsp;&nbsp; : Positive := <font color="#800000">9</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>These procedures create the widget.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font>&nbsp;Gtk_Gauge_Round_270_Reversed_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Texts</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Delimiter</b>&nbsp; : 
	Character; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b> : Gtk_Adjustment;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;&nbsp;&nbsp; : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>One of these procedures must be called from Initialize of any derived widget 
type.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Annotation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Round_270_Reversed_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Elliptic_Annotation_Layer;</tt></p></blockquote>
<p>This function returns the widget's major annotation layer.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Background<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Round_270_Reversed_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Elliptic_Background_Layer;</tt></p></blockquote>
<p>This function returns the widget's background.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Cache<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Round_270_Reversed_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Cache_Layer;</tt></p></blockquote>
<p>This function returns the widget's caching layer.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Needle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Round_270_Reversed_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Needle_Layer;</tt></p></blockquote>
<p>This function returns the widget's needle.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Round_270_Reversed_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp; : GDouble<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the indicated value. The value can also be changed 
through the widget's needle or its adjustment. Note that the procedure does not 
emit events. In order to redraw the widget use
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.widget.html#L2297C14">Queue_Draw</a>.</p>
<h4><a name="11.1.5"></a>11.1.5.
		Gtk.Gauge.Round_270_Inout</h4>
<p>The package <a href="#Gtk.Gauge.Round_270_Inout">Gtk.Gauge.Round_270_Inout</a> 
provides the widget:</p>
	<blockquote>
		<p><a name="Gtk.Gauge.Round_270_Inout"></a>
		<img border="0" src="gtk_gauge_round_270_inout.png" width="246" height="246" alt="gauge round 270 inout"></p>
</blockquote>
	<blockquote>
<p><tt><font color="#0000FF">type</font> Gtk_Gauge_Round_270_Inout_Record
<font color="#0000FF">is<br>
&nbsp;&nbsp; new</font> Gtk_Layered_Record <font color="#0000FF">with private</font>;<br>
<font color="#0000FF">type</font> Gtk_Gauge_Round_270_Inout
<font color="#0000FF">is</font><br>
&nbsp;&nbsp; <font color="#0000FF">access all</font> 
Gtk_Gauge_Round_270_Inout_Record'Class;</tt></p></blockquote>
<p>The following operations are provided:</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Gtk_Gauge_Round_270_Inout;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Major_Texts</b> : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Minor_Texts</b> : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Delimiter</b>&nbsp;&nbsp; : 
	Character := ' 
	'; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b>&nbsp; : Gtk_Adjustment := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;&nbsp;&nbsp;&nbsp; : Positive := <font color="#800000">14</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>These procedures create the widget.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font>&nbsp;Gtk_Gauge_Round_270_Inout_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Major_Texts</b> : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Minor_Texts</b> : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Delimiter</b>&nbsp;&nbsp; : 
	Character; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b>&nbsp; : Gtk_Adjustment;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;&nbsp;&nbsp;&nbsp; : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>One of these procedures must be called from Initialize of any derived widget 
type.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Background<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Round_270_Inout_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Elliptic_Background_Layer;</tt></p></blockquote>
<p>This function returns the widget's background.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Cache<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Round_270_Inout_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Cache_Layer;</tt></p></blockquote>
<p>This function returns the widget's caching layer.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Major_Annotation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Round_270_Inout_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Elliptic_Annotation_Layer;</tt></p></blockquote>
<p>This function returns the widget's major annotation layer.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Minor_Annotation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Round_270_Inout_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Elliptic_Annotation_Layer;</tt></p></blockquote>
<p>This function returns the widget's minor annotation layer.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Needle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Round_270_Inout_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Needle_Layer;</tt></p></blockquote>
<p>This function returns the widget's needle.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Round_270_Inout_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp; : GDouble<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the indicated value. The value can also be changed 
through the widget's needle or its adjustment. Note that the procedure does not 
emit events. In order to redraw the widget use
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.widget.html#L2297C14">Queue_Draw</a>.</p>
<h4><a name="11.1.6"></a>11.1.6. Gtk.Gauge.Round_270_60s</h4>
<p>The package <a href="#Gtk.Gauge.Round_270_60s">Gtk.Gauge.Round_270_60s</a> 
provides the widget styled as the speedometer of a car built in 60's:</p>
	<blockquote>
		<p><a name="Gtk.Gauge.Round_270_60s"></a>
		<img border="0" src="gtk_gauge_round_270_60s.png" width="226" height="226" alt="gauge round 270 60s"></p>
</blockquote>
<p>Note that the indicated colored bar does not belong to the widget, it was 
added later placing a <a href="#Gtk.Layered.Elliptic_Bar">Elliptic_Bar</a> above 
the caching layer.</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Gtk_Gauge_Round_270_60s_Record<font color="#0000FF"> 
is<br>
&nbsp;&nbsp; new</font> Gtk_Layered_Record <font color="#0000FF">with private</font>;<br>
<font color="#0000FF">type</font> Gtk_Gauge_Round_270_60s <font color="#0000FF">
is</font><br>
&nbsp;&nbsp; <font color="#0000FF">access all</font> 
Gtk_Gauge_Round_270_60s_Record'Class;</tt></p></blockquote>
<p>The following operations are provided:</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Gtk_Gauge_Round_270_60s;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Texts</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Delimiter</b>&nbsp; : 
	Character := ' 
	'; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b> : Gtk_Adjustment := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;&nbsp;&nbsp; : Positive := <font color="#800000">12</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>These procedures create the widget.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font>&nbsp;Gtk_Gauge_Round_270_60s_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Texts</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Delimiter</b>&nbsp; : 
	Character; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b> : Gtk_Adjustment;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;&nbsp;&nbsp; : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>One of these procedures must be called from Initialize of any derived widget 
type.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Annotation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Round_270_60s_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Elliptic_Annotation_Layer;</tt></p></blockquote>
<p>This function returns the widget's major annotation layer.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Background<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Round_270_60s_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Elliptic_Background_Layer;</tt></p></blockquote>
<p>This function returns the widget's background.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Cache<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Round_270_60s_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Cache_Layer;</tt></p></blockquote>
<p>This function returns the widget's caching layer.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Needle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Round_270_60s_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Needle_Layer;</tt></p></blockquote>
<p>This function returns the widget's needle.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Round_270_60s_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp; : GDouble<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the indicated value. The value can also be changed 
through the widget's needle or its adjustment. Note that the procedure does not 
emit events. In order to redraw the widget use
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.widget.html#L2297C14">Queue_Draw</a>.</p>
<H3><a name="11.2"></a>11.2. Sectors and segments</H3>
<h4><a name="11.2.1"></a>11.2.1. Gtk.Gauge.Round_180</h4>
<p>The package <a href="#Gtk.Gauge.Round_180">Gtk.Gauge.Round_180</a> provides 
the widget:</p>
	<blockquote>
		<p><a name="Gtk.Gauge.Round_180"></a>
		<img border="0" src="gtk_gauge_round_180.png" width="243" height="136" alt="gauge round 180"></p>
</blockquote>
<blockquote>
<p><tt><font color="#0000FF">type</font> Gtk_Gauge_Round_180_Record<font color="#0000FF"> 
is<br>
&nbsp;&nbsp; new</font> Gtk_Layered_Record <font color="#0000FF">with private</font>;<br>
<font color="#0000FF">type</font> Gtk_Gauge_Round_180 <font color="#0000FF">is</font><br>
&nbsp;&nbsp; <font color="#0000FF">access all</font> 
Gtk_Gauge_Round_180_Record'Class;</tt></p></blockquote>
<p>The following operations are provided:</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Gtk_Gauge_Round_180;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Texts</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Delimiter</b>&nbsp; : 
	Character := ' 
	'; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b> : Gtk_Adjustment := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;&nbsp;&nbsp; : Positive := <font color="#800000">12</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>These procedures create the widget.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font>&nbsp;Gtk_Gauge_Round_180_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Texts</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Delimiter</b>&nbsp; : 
	Character; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b> : Gtk_Adjustment;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;&nbsp;&nbsp; : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>One of these procedures must be called from Initialize of any derived widget 
type.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Annotation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Round_180_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Elliptic_Annotation_Layer;</tt></p></blockquote>
<p>This function returns the widget's major annotation layer.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Background<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Round_180_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Elliptic_Background_Layer;</tt></p></blockquote>
<p>This function returns the widget's background.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Cache<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Round_180_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Cache_Layer;</tt></p></blockquote>
<p>This function returns the widget's caching layer.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Needle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Round_180_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Needle_Layer;</tt></p></blockquote>
<p>This function returns the widget's needle.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Round_180_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp; : GDouble<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the indicated value. The value can also be changed 
through the widget's needle or its adjustment. Note that the procedure does not 
emit events. In order to redraw the widget use
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.widget.html#L2297C14">Queue_Draw</a>.</p>
<h4><a name="11.2.2"></a>11.2.2. Gtk.Gauge.Round_90</h4>
<p>The package <a href="#Gtk.Gauge.Round_90">Gtk.Gauge.Round_90</a> provides the 
widget:</p>
	<blockquote>
		<p><a name="Gtk.Gauge.Round_90"></a>
		<img border="0" src="gtk_gauge_round_90.png" width="249" height="154" alt="gauge round 90"></p>
</blockquote>
<blockquote>
<p><tt><font color="#0000FF">type</font> Gtk_Gauge_Round_90_Record<font color="#0000FF"> 
is<br>
&nbsp;&nbsp; new</font> Gtk_Layered_Record <font color="#0000FF">with private</font>;<br>
<font color="#0000FF">type</font> Gtk_Gauge_Round_90 <font color="#0000FF">is</font><br>
&nbsp;&nbsp; <font color="#0000FF">access all</font> 
Gtk_Gauge_Round_90_Record'Class;</tt></p></blockquote>
<p>The following operations are provided:</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Gtk_Gauge_Round_90;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Texts</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Delimiter</b>&nbsp; : 
	Character := ' 
	'; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b> : Gtk_Adjustment := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;&nbsp;&nbsp; : Positive := <font color="#800000">5</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>These procedures create the widget.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font>&nbsp;Gtk_Gauge_Round_90_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Texts</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Delimiter</b>&nbsp; : 
	Character; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b> : Gtk_Adjustment;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;&nbsp;&nbsp; : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>One of these procedures must be called from Initialize of any derived widget 
type.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Annotation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Round_90_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Elliptic_Annotation_Layer;</tt></p></blockquote>
<p>This function returns the widget's major annotation layer.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Background<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Round_90_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Elliptic_Background_Layer;</tt></p></blockquote>
<p>This function returns the widget's background.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Cache<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Round_90_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Cache_Layer;</tt></p></blockquote>
<p>This function returns the widget's caching layer.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Needle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Round_90_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Needle_Layer;</tt></p></blockquote>
<p>This function returns the widget's needle.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Round_90_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp; : GDouble<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the indicated value. The value can also be changed 
through the widget's needle or its adjustment. Note that the procedure does not 
emit events. In order to redraw the widget use
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.widget.html#L2297C14">Queue_Draw</a>.</p>
<h4><a name="11.2.3"></a>11.2.3. Gtk.Gauge.Round_110</h4>
<p>The package <a href="#Gtk.Gauge.Round_110">Gtk.Gauge.Round_110</a> provides 
the widget styled as the speedometer of a car from late 50's - early 60's:</p>
	<blockquote>
		<p><a name="Gtk.Gauge.Round_110"></a>
		<img border="0" src="gtk_gauge_round_110.png" width="415" height="112" alt="gauge round 110"></p>
</blockquote>
<blockquote>
<p><tt><font color="#0000FF">type</font> Gtk_Gauge_Round_110_Record<font color="#0000FF"> 
is<br>
&nbsp;&nbsp; new</font> Gtk_Layered_Record <font color="#0000FF">with private</font>;<br>
<font color="#0000FF">type</font> Gtk_Gauge_Round_110 <font color="#0000FF">is</font><br>
&nbsp;&nbsp; <font color="#0000FF">access all</font> 
Gtk_Gauge_Round_110_Record'Class;</tt></p></blockquote>
<p>The following operations are provided:</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Gtk_Gauge_Round_110;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Texts</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Delimiter</b>&nbsp; : 
	Character := ' 
	'; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b> : Gtk_Adjustment := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;&nbsp;&nbsp; : Positive := <font color="#800000">9</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>These procedures create the widget.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font>&nbsp;Gtk_Gauge_Round_110_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Texts</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Delimiter</b>&nbsp; : 
	Character; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b> : Gtk_Adjustment;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;&nbsp;&nbsp; : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>One of these procedures must be called from Initialize of any derived widget 
type.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Annotation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Round_110_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Elliptic_Annotation_Layer;</tt></p></blockquote>
<p>This function returns the widget's major annotation layer.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Background<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Round_110_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Elliptic_Background_Layer;</tt></p></blockquote>
<p>This function returns the widget's background.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Cache<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Round_110_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Cache_Layer;</tt></p></blockquote>
<p>This function returns the widget's caching layer.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Needle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Round_110_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Needle_Layer;</tt></p></blockquote>
<p>This function returns the widget's needle.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Round_110_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp; : GDouble<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the indicated value. The value can also be changed 
through the widget's needle or its adjustment. Note that the procedure does not 
emit events. In order to redraw the widget use
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.widget.html#L2297C14">Queue_Draw</a>.</p>
<h4><a name="11.2.4"></a>11.2.4. Gtk.Gauge.Elliptic_180</h4>
<p>The package <a href="#Gtk.Gauge.Elliptic_180">Gtk.Gauge.Elliptic_180</a> 
provides the widget with the scale shaped as an asymmetric elliptic arrow:</p>
	<blockquote>
		<p><a name="Gtk.Gauge.Elliptic_180"></a>
		<img border="0" src="gtk_gauge_elliptic_180.png" width="246" height="137" alt="gauge elliptic 180"></p>
</blockquote>
<blockquote>
<p><tt><font color="#0000FF">type</font> Gtk_Gauge_Elliptic_180_Record<font color="#0000FF"> 
is<br>
&nbsp;&nbsp; new</font> Gtk_Layered_Record <font color="#0000FF">with private</font>;<br>
<font color="#0000FF">type</font> Gtk_Gauge_Elliptic_180<font color="#0000FF"> 
is</font><br>
&nbsp;&nbsp; <font color="#0000FF">access all</font> 
Gtk_Gauge_Elliptic_180_Record'Class;</tt></p></blockquote>
<p>The following operations are provided:</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Gtk_Gauge_Elliptic_180;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Texts</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Delimiter</b>&nbsp; : 
	Character := ' 
	'; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b> : Gtk_Adjustment := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;&nbsp;&nbsp; : Positive := <font color="#800000">8</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>These procedures create the widget.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font>&nbsp;Gtk_Gauge_Elliptic_180_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Texts</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Delimiter</b>&nbsp; : 
	Character; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b> : Gtk_Adjustment;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;&nbsp;&nbsp; : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>One of these procedures must be called from Initialize of any derived widget 
type.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Annotation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Elliptic_180_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Elliptic_Annotation_Layer;</tt></p></blockquote>
<p>This function returns the widget's major annotation layer.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Background<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Elliptic_180_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Elliptic_Background_Layer;</tt></p></blockquote>
<p>This function returns the widget's background.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Cache<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Elliptic_180_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Cache_Layer;</tt></p></blockquote>
<p>This function returns the widget's caching layer.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Needle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Elliptic_180_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Needle_Layer;</tt></p></blockquote>
<p>This function returns the widget's needle.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Elliptic_180_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp; : GDouble<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the indicated value. The value can also be changed 
through the widget's needle or its adjustment. Note that the procedure does not 
emit events. In order to redraw the widget use
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.widget.html#L2297C14">Queue_Draw</a>.</p>
<H3><a name="11.3"></a>11.3. Meters</H3>
<p><a name="Gtk.Meter"></a>The samples of metering instruments are grouped in 
the child packages of the package <a href="#Gtk.Meter">Gtk.Meter</a>.</p>
<h4><a name="11.3.1"></a>11.3.1. Gtk.Meter.Angular_90</h4>
<p>The package <a href="#Gtk.Meter.Angular_90">Gtk.Meter.Angular_90</a> 
provides the widget with the needle mounted in the right bottom angle. The indicated text
<i>V</i> was 
added later placing a <a href="#Gtk.Layered.Label">Label</a> under the caching 
layer.</p>
	<blockquote>
		<p>
		<a name="Gtk.Meter.Angular_90"></a>
		<img border="0" src="gtk_meter_angular_90.png" width="283" height="284" alt="meter angular 90"></p>
</blockquote>
<blockquote>
<p><tt><font color="#0000FF">type</font> Gtk_Meter_Angular_90_Record<font color="#0000FF"> 
is<br>
&nbsp;&nbsp; new</font> Gtk_Layered_Record <font color="#0000FF">with private</font>;<br>
<font color="#0000FF">type</font> Gtk_Meter_Angular_90<font color="#0000FF"> 
is</font><br>
&nbsp;&nbsp; <font color="#0000FF">access all</font> 
Gtk_Meter_Angular_90_Record'Class;</tt></p></blockquote>
<p>The following operations are provided:</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Gtk_Meter_Angular_90;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Texts</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Delimiter</b>&nbsp; : 
	Character := ' 
	'; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b> : Gtk_Adjustment := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;&nbsp;&nbsp; : Positive := <font color="#800000">4</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>These procedures create the widget.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font>&nbsp;Gtk_Meter_Angular_90_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Texts</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Delimiter</b>&nbsp; : 
	Character; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b> : Gtk_Adjustment;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;&nbsp;&nbsp; : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure must be called from Initialize of any derived widget 
type.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Annotation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Meter_Angular_90_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Elliptic_Annotation_Layer;</tt></p></blockquote>
<p>This function returns the widget's major annotation layer.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Background<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Meter_Angular_90_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Rectangular_Background_Layer;</tt></p></blockquote>
<p>This function returns the widget's background.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Cache<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Meter_Angular_90_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Cache_Layer;</tt></p></blockquote>
<p>This function returns the widget's caching layer.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Needle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Meter_Angular_90_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Needle_Layer;</tt></p></blockquote>
<p>This function returns the widget's needle.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Meter_Angular_90_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp; : GDouble<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the indicated value. The value can also be changed 
through the widget's needle or its adjustment. Note that the procedure does not 
emit events. In order to redraw the widget use
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.widget.html#L2297C14">Queue_Draw</a>.</p>
<h4><a name="11.3.2"></a>11.3.2. Gtk.Meter.Elliptic_90</h4>
<p>The package <a href="#Gtk.Meter.Elliptic_90">Gtk.Meter.Elliptic_90</a> 
provides the widget with a scale shaped as an elliptic arc:</p>
	<blockquote>
		<p>
		<a name="Gtk.Meter.Elliptic_90"></a>
		<img border="0" src="gtk_meter_elliptic_90.png" width="283" height="148" alt="meter elliptic 90"></p>
</blockquote>
<blockquote>
<p><tt><font color="#0000FF">type</font> Gtk_Meter_Elliptic_90_Record<font color="#0000FF"> 
is<br>
&nbsp;&nbsp; new</font> Gtk_Layered_Record <font color="#0000FF">with private</font>;<br>
<font color="#0000FF">type</font> Gtk_Meter_Elliptic_90 <font color="#0000FF"> 
is</font><br>
&nbsp;&nbsp; <font color="#0000FF">access all</font> 
Gtk_Meter_Elliptic_90_Record'Class;</tt></p></blockquote>
<p>The following operations are provided:</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Gtk_Meter_Elliptic_90;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Texts</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Delimiter</b>&nbsp; : 
	Character := ' 
	'; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b> : Gtk_Adjustment := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;&nbsp;&nbsp; : Positive := <font color="#800000">5</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>These procedures create the widget.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font>&nbsp;Gtk_Meter_Elliptic_90_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Texts</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Delimiter</b>&nbsp; : 
	Character; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b> : Gtk_Adjustment;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;&nbsp;&nbsp; : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure must be called from Initialize of any derived widget 
type.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Annotation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Meter_Elliptic_90_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Elliptic_Annotation_Layer;</tt></p></blockquote>
<p>This function returns the widget's major annotation layer.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Background<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Meter_Elliptic_90_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Rectangular_Background_Layer;</tt></p></blockquote>
<p>This function returns the widget's background.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Cache<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Meter_Elliptic_90_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Cache_Layer;</tt></p></blockquote>
<p>This function returns the widget's caching layer.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Needle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Meter_Elliptic_90_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Needle_Layer;</tt></p></blockquote>
<p>This function returns the widget's needle.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Meter_Elliptic_90_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp; : GDouble<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the indicated value. The value can also be changed 
through the widget's needle or its adjustment. Note that the procedure does not 
emit events. In order to redraw the widget use
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.widget.html#L2297C14">Queue_Draw</a>.</p>
<h4><a name="11.3.3"></a>11.3.3. Gtk.Meter.Round_90</h4>
<p>The package <a href="#Gtk.Meter.Round_90">Gtk.Meter.Round_90</a> 
provides the widget shaped as a modern instrument with round 90<font face="Times New Roman">&ordm;</font> 
scale. The indicated text <i>V</i> was 
added later placing a <a href="#Gtk.Layered.Label">Label</a> under the caching 
layer:</p>
<blockquote>
	<p><a name="Gtk.Meter.Round_90"></a>
		<img border="0" src="gtk_meter_round_90.png" width="283" height="148" alt="meter round 90"></p>
</blockquote>
<blockquote>
<p><tt><font color="#0000FF">type</font> Gtk_Meter_Round_90_Record<font color="#0000FF"> 
is<br>
&nbsp;&nbsp; new</font> Gtk_Layered_Record <font color="#0000FF">with private</font>;<br>
<font color="#0000FF">type</font> Gtk_Meter_Round_90 <font color="#0000FF"> 
is</font><br>
&nbsp;&nbsp; <font color="#0000FF">access all</font> 
Gtk_Meter_Round_90_Record'Class;</tt></p></blockquote>
<p>The following operations are provided:</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Gtk_Meter_Round_90;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Texts</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Delimiter</b>&nbsp; : 
	Character := ' 
	'; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b> : Gtk_Adjustment := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;&nbsp;&nbsp; : Positive := <font color="#800000">4</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>These procedures create the widget.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font>&nbsp;Gtk_Meter_Round_90_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Texts</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Delimiter</b>&nbsp; : 
	Character; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b> : Gtk_Adjustment;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;&nbsp;&nbsp; : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure must be called from Initialize of any derived widget 
type.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Annotation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Meter_Round_90_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Elliptic_Annotation_Layer;</tt></p></blockquote>
<p>This function returns the widget's major annotation layer.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Background<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Meter_Round_90_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Rectangular_Background_Layer;</tt></p></blockquote>
<p>This function returns the widget's background.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Cache<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Meter_Round_90_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Cache_Layer;</tt></p></blockquote>
<p>This function returns the widget's caching layer.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Needle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Meter_Round_90_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Needle_Layer;</tt></p></blockquote>
<p>This function returns the widget's needle.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Meter_Round_90_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp; : GDouble<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the indicated value. The value can also be changed 
through the widget's needle or its adjustment. Note that the procedure does not 
emit events. In order to redraw the widget use
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.widget.html#L2297C14">Queue_Draw</a>.</p>
<h4><a name="11.3.4"></a>11.3.4. Gtk.Meter.Round_94</h4>
<p>The package <a href="#Gtk.Meter.Round_94">Gtk.Meter.Round_94</a> 
provides the widget shaped as a classic instrument with round 94<font face="Times New Roman">&ordm;</font> 
scale. The indicated text <i>V</i> was 
added later placing a <a href="#Gtk.Layered.Label">Label</a> under the caching 
layer:</p>
<blockquote>
		<p>
		<a name="Gtk.Meter.Round_94"></a>
		<img border="0" src="gtk_meter_round_94.png" width="262" height="218" alt="meter round 94"></p>
</blockquote>
<blockquote>
<p><tt><font color="#0000FF">type</font> Gtk_Meter_Round_94_Record<font color="#0000FF"> 
is<br>
&nbsp;&nbsp; new</font> Gtk_Layered_Record <font color="#0000FF">with private</font>;<br>
<font color="#0000FF">type</font> Gtk_Meter_Round_94 <font color="#0000FF"> 
is</font><br>
&nbsp;&nbsp; <font color="#0000FF">access all</font> 
Gtk_Meter_Round_94_Record'Class;</tt></p></blockquote>
<p>The following operations are provided:</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Gtk_Meter_Round_94;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Texts</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Delimiter</b>&nbsp; : 
	Character := ' 
	'; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b> : Gtk_Adjustment := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;&nbsp;&nbsp; : Positive := <font color="#800000">5</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>These procedures create the widget.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font>&nbsp;Gtk_Meter_Round_94_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Texts</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Delimiter</b>&nbsp; : 
	Character; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b> : Gtk_Adjustment;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;&nbsp;&nbsp; : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure must be called from Initialize of any derived widget 
type.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Annotation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Meter_Round_94_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Elliptic_Annotation_Layer;</tt></p></blockquote>
<p>This function returns the widget's major annotation layer.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Background<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Meter_Round_94_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Elliptic_Background_Layer;</tt></p></blockquote>
<p>This function returns the widget's background.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Cache<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Meter_Round_94_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Cache_Layer;</tt></p></blockquote>
<p>This function returns the widget's caching layer.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Needle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Meter_Round_94_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Needle_Layer;</tt></p></blockquote>
<p>This function returns the widget's needle.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Meter_Round_94_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp; : GDouble<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the indicated value. The value can also be changed 
through the widget's needle or its adjustment. Note that the procedure does not 
emit events. In order to redraw the widget use
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.widget.html#L2297C14">Queue_Draw</a>.</p>
<h4><a name="11.3.5"></a>11.3.5. Gtk.Meter.Thermo</h4>
<p>The package <a href="#Gtk.Meter.Thermo">Gtk.Meter.Thermo</a> 
provides the widget shaped as a thermometer:</p>
<blockquote>
		<p>
		<a name="Gtk.Meter.Thermo"></a>
		<img border="0" src="gtk_meter_thermo.png" width="142" height="425" alt="meter thermo"></p>
</blockquote>
<blockquote>
<p><tt><font color="#0000FF">type</font> Gtk_Meter_Thermo_Record<font color="#0000FF"> 
is<br>
&nbsp;&nbsp; new</font> Gtk_Layered_Record <font color="#0000FF">with private</font>;<br>
<font color="#0000FF">type</font> Gtk_Meter_Thermo <font color="#0000FF"> 
is</font><br>
&nbsp;&nbsp; <font color="#0000FF">access all</font> 
Gtk_Meter_Thermo_Record'Class;</tt></p></blockquote>
<p>The following operations are provided:</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Gtk_Meter_Thermo;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Texts</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Delimiter</b>&nbsp; : 
	Character := ' 
	'; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b> : Gtk_Adjustment := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;&nbsp;&nbsp; : Positive&nbsp; := <font color="#800000">10</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Label</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : String&nbsp;&nbsp;&nbsp; := Celsius;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Color</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Color := RGB (<font color="#800000">1.0</font>,
<font color="#800000">0.0</font>, <font color="#800000">0.0</font>)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>These procedures create the widget. The parameter <b>Sectors</b> specified 
the number of intervals between major ticks. <b>Label</b> is the text shown by 
the label. The default is <font face="Times New Roman">&deg;</font>C. <b>Color</b> 
is the color of the temperature bar.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font>&nbsp;Gtk_Meter_Thermo_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Texts</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Delimiter</b>&nbsp; : 
	Character; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b> : Gtk_Adjustment;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;&nbsp;&nbsp; : Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Label</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Color</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure must be called from Initialize of any derived widget 
type.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Annotation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font> 
Gtk_Meter_Thermo_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Flat_Annotation_Layer;</tt></p></blockquote>
<p>This function returns the widget's annotation layer.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Background<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font> 
Gtk_Meter_Thermo_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Rectangular_Background_Layer;</tt></p></blockquote>
<p>This function returns the widget's background.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Cache<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font> 
Gtk_Meter_Thermo_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Cache_Layer;</tt></p></blockquote>
<p>This function returns the widget's caching layer.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Bar<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font> 
Gtk_Meter_Thermo_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Bar_Layer;</tt></p></blockquote>
<p>This function returns the temperature bar.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Bar_Color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font> 
Gtk_Meter_Thermo_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return </font>Gdk_Color;</tt></p></blockquote>
<p>This function returns the color of the temperature bar.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Label<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font> 
Gtk_Meter_Thermo_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Label_Layer;</tt></p></blockquote>
<p>This function returns the label of the widget.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Bar_Color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font> 
Gtk_Meter_Thermo_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Color</b>&nbsp; : Gdk_Color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the color of the temperature bar.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font> 
Gtk_Meter_Thermo_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp; : GDouble<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the indicated value. The value can also be changed 
through the widget's needle or its adjustment. Note that the procedure does not 
emit events. In order to redraw the widget use
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.widget.html#L2297C14">Queue_Draw</a>.</p>
<p>Note that the digital value indicated on the left of the widget as seen on 
the picture does not belong to it. It is added to the widget later as the 
following code snippet shows:</p>
<blockquote>
	<p><tt><font color="#0000FF">&nbsp;</font>&nbsp; Widget&nbsp;&nbsp;&nbsp;&nbsp; 
	: Gtk_Meter_Thermo;<br>
&nbsp;&nbsp; Adjustment : Gtk_Adjustment;<br>
	<font color="#0000FF">begin</font><br>
&nbsp;&nbsp; Gtk_New (Adjustment, <font color="#800000">0.0</font>, -<font color="#800000">20.0</font>,
	<font color="#800000">40.0</font>, <font color="#800000">1.0</font>,
	<font color="#800000">10.0</font>);<br>
&nbsp;&nbsp; Gtk_New<br>
&nbsp;&nbsp; (&nbsp; Widget&nbsp;&nbsp;&nbsp;&nbsp; =&gt; Widget,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Texts&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =&gt; &quot;<font color="#FF0000">-20 
	-10 0 10 20 30 40</font>&quot;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Sectors&nbsp;&nbsp;&nbsp; =&gt;
	<font color="#800000">6</font>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Adjustment =&gt; Adjustment<br>
&nbsp;&nbsp; );<br>
&nbsp;&nbsp; Add_Digital<br>
&nbsp;&nbsp; (&nbsp; Under&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =&gt; 
	Widget.Get_Background.Get_Foreground,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Location&nbsp;&nbsp; =&gt; (-<font color="#800000">0.4</font>,
	<font color="#800000">0.0</font>),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Mode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =&gt; 
	Rotated,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Angle&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =&gt;
	<font color="#800000">3.0</font> * Pi / <font color="#800000">2.0</font>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Adjustment =&gt; Adjustment,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Precision&nbsp; =&gt; -<font color="#800000">1</font>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Height&nbsp;&nbsp;&nbsp;&nbsp; =&gt;
	<font color="#800000">0.12</font>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Scaled&nbsp;&nbsp;&nbsp;&nbsp; =&gt; True<br>
&nbsp;&nbsp; );</tt></p>
</blockquote>
<h4><a name="11.3.6"></a>11.3.6. Gtk.Meter.Thermo_Symmetric</h4>
<p>The package <a href="#Gtk.Meter.Thermo_Symmetric">Gtk.Meter.Thermo_Symmetric</a> 
provides the widget shaped as a thermometer with two identical scales left and 
right of the bar:</p>
<blockquote>
		<p>
		<a name="Gtk.Meter.Thermo_Symmetric"></a>
		<img border="0" src="gtk_meter_thermo_symmetric.png" width="143" height="426" alt="meter thermo symmetric"></p>
</blockquote>
<blockquote>
<p><tt><font color="#0000FF">type</font> Gtk_Meter_Thermo_Symmetric_Record<font color="#0000FF"> 
is<br>
&nbsp;&nbsp; new</font> Gtk_Layered_Record <font color="#0000FF">with private</font>;<br>
<font color="#0000FF">type</font> Gtk_Meter_Thermo_Symmetric <font color="#0000FF"> 
is</font><br>
&nbsp;&nbsp; <font color="#0000FF">access all</font> 
Gtk_Meter_Thermo_Symmetric_Record'Class;</tt></p></blockquote>
<p>The following operations are provided:</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">out</font> Gtk_Meter_Thermo_Symmetric;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Texts</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Delimiter</b>&nbsp;&nbsp; : 
	Character := ' 
	'; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b>&nbsp; : Gtk_Adjustment := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;&nbsp;&nbsp;&nbsp; : Positive&nbsp; := <font color="#800000">10</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Left_Label</b>&nbsp; : String&nbsp;&nbsp;&nbsp; := Celsius;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Right_Label</b> : String&nbsp;&nbsp;&nbsp; := Celsius;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Color</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Color := RGB (<font color="#800000">1.0</font>,
<font color="#800000">0.0</font>, <font color="#800000">0.0</font>)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>These procedures create the widget. The parameter <b>Sectors</b> specified 
the number of intervals between major ticks. <b>Left_Label</b> and <b>
Right_Label</b> are the texts shown by 
the label. The default is <font face="Times New Roman">&deg;</font>C. <b>Color</b> 
is the color of the temperature bar.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font>&nbsp;Gtk_Meter_Thermo_Symmetric_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Texts</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Delimiter</b>&nbsp;&nbsp; : 
	Character; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b>&nbsp; : Gtk_Adjustment;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;&nbsp;&nbsp;&nbsp; : Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Left_Label </b>&nbsp;: String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Right_Label</b> : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Color</b>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; : Gdk_Color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure must be called from Initialize of any derived widget 
type.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Background<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font> 
&nbsp;Gtk_Meter_Thermo_Symmetric_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Rectangular_Background_Layer;</tt></p></blockquote>
<p>This function returns the widget's background.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Cache<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font> 
&nbsp;Gtk_Meter_Thermo_Symmetric_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Cache_Layer;</tt></p></blockquote>
<p>This function returns the widget's caching layer.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Bar<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font> 
&nbsp;Gtk_Meter_Thermo_Symmetric_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Bar_Layer;</tt></p></blockquote>
<p>This function returns the temperature bar.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Bar_Color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font> 
&nbsp;Gtk_Meter_Thermo_Symmetric_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return </font>Gdk_Color;</tt></p></blockquote>
<p>This function returns the color of the temperature bar.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Left_Annotation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font> 
&nbsp;Gtk_Meter_Thermo_Symmetric_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Flat_Annotation_Layer;<font color="#0000FF"><br>
function</font> Get_Right_Annotation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font> 
&nbsp;Gtk_Meter_Thermo_Symmetric_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Flat_Annotation_Layer;</tt></p></blockquote>
<p>These functions return the widget's annotation layers.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Left_Label<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font> 
&nbsp;Gtk_Meter_Thermo_Symmetric_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Label_Layer;<font color="#0000FF"><br>
function</font> Get_Right_Label<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font> 
&nbsp;Gtk_Meter_Thermo_Symmetric_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Label_Layer;</tt></p></blockquote>
<p>These functions return the corresponding label of the widget.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Bar_Color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font> 
&nbsp;Gtk_Meter_Thermo_Symmetric_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Color</b>&nbsp; : Gdk_Color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the color of the temperature bar.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font> 
&nbsp;Gtk_Meter_Thermo_Symmetric_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp; : GDouble<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the indicated value. The value can also be changed 
through the widget's needle or its adjustment. Note that the procedure does not 
emit events. In order to redraw the widget use
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.widget.html#L2297C14">Queue_Draw</a>.</p>
<h4><a name="11.3.7"></a>11.3.6. Gtk.Meter.Thermo_Dual</h4>
<p>The package <a href="#Gtk.Meter.Thermo_Symmetric">Gtk.Meter.Thermo_Dual</a> 
provides the widget shaped as a thermometer with Fahrenheit and Celsius scales left and 
right of the bar. Since the scales are defined the widget has a more interface 
specific interface which automatically generates the annotations of the scales 
from the specified range of indicated temperatures:</p>
<blockquote>
		<p>
		<a name="Gtk_Meter_Thermo_Dual"></a>
		<img border="0" src="gtk_meter_thermo_dual.png" width="142" height="426" alt="meter thermo dual"></p>
</blockquote>
<blockquote>
<p><tt><font color="#0000FF">type</font> Gtk_Meter_Thermo_Dual_Record<font color="#0000FF"> 
is<br>
&nbsp;&nbsp; new</font> Gtk_Layered_Record <font color="#0000FF">with private</font>;<br>
<font color="#0000FF">type</font> Gtk_Meter_Thermo_Dual <font color="#0000FF"> 
is</font><br>
&nbsp;&nbsp; <font color="#0000FF">access all</font> 
Gtk_Meter_Thermo_Dual_Record'Class;</tt></p></blockquote>
<p>The following operations are provided:</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Gtk_New_Celsius<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Gtk_Meter_Thermo_Dual;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b> : <font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Adjustment_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;&nbsp;&nbsp;&nbsp;: Positive&nbsp; := <font color="#800000">8</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Color</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: Gdk_Color := RGB (<font color="#800000">1.0</font>,
<font color="#800000">0.0</font>, <font color="#800000">0.0</font>)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure</font> Gtk_New_Fahrenheit<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Gtk_Meter_Thermo_Dual;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b> : <font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Adjustment_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;&nbsp;&nbsp;&nbsp;: Positive&nbsp; := <font color="#800000">8</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Color</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: Gdk_Color := RGB (<font color="#800000">1.0</font>,
<font color="#800000">0.0</font>, <font color="#800000">0.0</font>)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>These procedures create the widget. The parameter <b>Adjustment</b> is the 
adjustment the temperature bar will indicate. The range of the adjustment 
returned by the calls Get_Lower and Get_Upper determines the range of the 
temperatures indicated. For the procedure Gtk_New_Celsius it the Celsius 
degrees. For the procedure Gtk_New_Fahrenheit it is the Fahrenheit degrees. The 
opposite scale is set to correspond this range. The parameter <b>Sectors</b> specified 
the approximate number of intervals between major ticks on the Celsius or 
Fahrenheit scale depending on the call. The actual number of ticks is derived 
from the range and this number. <b>Color</b> is the color of the temperature 
bar. Constraint_Error is propagated when the temperature range is illegal.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Gtk_New_Celsius<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; 
: <font color="#0000FF">out</font> Gtk_Meter_Thermo_Dual;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Lower</b>&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp; := -<font color="#800000">40.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Upper</b>&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp; := <font color="#800000">50.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;: Positive&nbsp; := <font color="#800000">8</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Color</b>&nbsp;&nbsp;&nbsp;: Gdk_Color := RGB (<font color="#800000">1.0</font>,
<font color="#800000">0.0</font>, <font color="#800000">0.0</font>)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure</font> Gtk_New_Fahrenheit<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; 
: <font color="#0000FF">out</font> Gtk_Meter_Thermo_Dual;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Lower</b>&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp; := <font color="#800000">20.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Upper</b>&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp; := <font color="#800000">220.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;: Positive&nbsp; := <font color="#800000">8</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Color</b>&nbsp;&nbsp;&nbsp;: Gdk_Color := RGB (<font color="#800000">1.0</font>,
<font color="#800000">0.0</font>, <font color="#800000">0.0</font>)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedures creates the widget when the range is specified explicitly and 
no adjustment is used. Constraint_Error is propagated when the temperature range 
is illegal.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize_{Celsius|Fahrenheit}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp; :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font>&nbsp;Gtk_Meter_Thermo_Dual_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b> : <font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Adjustment_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;&nbsp;&nbsp;&nbsp;: Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Color</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: Gdk_Color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure</font> Initialize_{Celsius|Fahrenheit}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font>&nbsp;Gtk_Meter_Thermo_Dual_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Lower</b>&nbsp;&nbsp; : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Upper</b>&nbsp;&nbsp; : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;: Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Color</b>&nbsp;&nbsp;&nbsp;: Gdk_Color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>One of these procedures must be called from Initialize of any derived widget 
type.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Background<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font> 
&nbsp;Gtk_Meter_Thermo_Dual_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Rectangular_Background_Layer;</tt></p></blockquote>
<p>This function returns the widget's background.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Cache<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font> 
&nbsp;Gtk_Meter_Thermo_Dual_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Cache_Layer;</tt></p></blockquote>
<p>This function returns the widget's caching layer.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Bar<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font> 
&nbsp;Gtk_Meter_Thermo_Dual_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Bar_Layer;</tt></p></blockquote>
<p>This function returns the temperature bar.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Bar_Color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font> 
&nbsp;Gtk_Meter_Thermo_Dual_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return </font>Gdk_Color;</tt></p></blockquote>
<p>This function returns the color of the temperature bar.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_{Celsius|Fahrenheit}_Annotation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font> 
&nbsp;Gtk_Meter_Thermo_Dual_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Flat_Annotation_Layer;</tt></p></blockquote>
<p>These functions return the widget's annotation layers.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_{Celsius|Fahrenheit}_Label<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font> 
&nbsp;Gtk_Meter_Thermo_Dual_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Label_Layer;</tt></p></blockquote>
<p>These functions return the corresponding label of the widget.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_{Celsius|Fahrenheit}_Value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font>&nbsp;Gtk_Meter_Thermo_Dual_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return </font>Double;</tt></p></blockquote>
<p>These functions return currently indicated temperature in the specified unit.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Bar_Color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font> 
&nbsp;Gtk_Meter_Thermo_Symmetric_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Color</b>&nbsp; : Gdk_Color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the color of the temperature bar.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_{Celsius|Fahrenheit}_Value<br>&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp;
<b>Widget</b> :
<font color="#0000FF">not null access<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font>&nbsp;Gtk_Meter_Thermo_Dual_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp; : GDouble<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
);</tt></p></blockquote>
<p>These procedures change the indicated value. The value can also be changed 
through the widget's needle or its adjustment. Note that the procedure does not 
emit events. In order to redraw the widget use
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.widget.html#L2297C14">Queue_Draw</a>.</p>
<H3><a name="11.4"></a>11.4. Flat and rectangular</H3>
<h4><a name="11.4.1"></a>11.4.1. Gtk.Gauge.Rectangular_70s</h4>
<p>The package <a href="#Gtk.Gauge.Rectangular_70s">Gtk.Gauge.Rectangular_70s</a> 
provides the widget styled as the speedometer of a car built in 70's:</p>
<blockquote>
	<p><a name="Gtk.Gauge.Rectangular_70s"></a>
		<img border="0" src="gtk_gauge_rectangular_70s.png" width="369" height="104" alt="gauge rectangular 70s"></p>
</blockquote>
<blockquote>
<p><tt><font color="#0000FF">type</font> Gtk_Gauge_Rectangular_70s_Record<font color="#0000FF"> 
is<br>
&nbsp;&nbsp; new</font> Gtk_Layered_Record <font color="#0000FF">with private</font>;<br>
<font color="#0000FF">type</font> Gtk_Gauge_Rectangular_70s
<font color="#0000FF">
is</font><br>
&nbsp;&nbsp; <font color="#0000FF">access all</font> 
Gtk_Gauge_Rectangular_70s_Record'Class;</tt></p></blockquote>
<p>The following operations are provided:</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Gtk_Gauge_Rectangular_70s;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Texts</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Delimiter</b>&nbsp; : 
	Character := ' 
	'; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b> : Gtk_Adjustment := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;&nbsp;&nbsp; : Positive := <font color="#800000">12</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>These procedures create the widget.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font>&nbsp;Gtk_Gauge_Rectangular_70s_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Texts</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Delimiter</b>&nbsp; : 
	Character; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b> : Gtk_Adjustment;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;&nbsp;&nbsp; : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure must be called from Initialize of any derived widget 
type.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Annotation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Rectangular_70s_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Elliptic_Annotation_Layer;</tt></p></blockquote>
<p>This function returns the widget's major annotation layer.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Background<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Rectangular_70s_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Rectangular_Background_Layer;</tt></p></blockquote>
<p>This function returns the widget's background.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Cache<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Rectangular_70s_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Cache_Layer;</tt></p></blockquote>
<p>This function returns the widget's caching layer.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Needle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Rectangular_70s_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Needle_Layer;</tt></p></blockquote>
<p>This function returns the widget's needle.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Rectangular_70s_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp; : GDouble<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the indicated value. The value can also be changed 
through the widget's needle or its adjustment. Note that the procedure does not 
emit events. In order to redraw the widget use
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.widget.html#L2297C14">Queue_Draw</a>.</p>
<h4><a name="11.4.2"></a>11.4.2. Gtk.Gauge.Rectangular_70s_Slanted</h4>
<p>The package <a href="#Gtk.Gauge.Rectangular_70s_Slanted">Gtk.Gauge.Rectangular_70s_Slanted</a> 
provides the widget styled as the speedometer of a car built in 70's:</p>
	<blockquote>
		<p><a name="Gtk.Gauge.Rectangular_70s_Slanted"></a>
		<img border="0" src="gtk_gauge_rectangular_70s_slanted.png" width="369" height="104" alt="gauge rectangular 70s slanted"></p>
</blockquote>
<blockquote>
<p><tt><font color="#0000FF">type</font> 
Gtk_Gauge_Rectangular_70s_Slanted_Record<font color="#0000FF"> 
is<br>
&nbsp;&nbsp; new</font> Gtk_Layered_Record <font color="#0000FF">with private</font>;<br>
<font color="#0000FF">type</font> Gtk_Gauge_Rectangular_70s_Slanted
<font color="#0000FF">
is</font><br>
&nbsp;&nbsp; <font color="#0000FF">access all</font> 
Gtk_Gauge_Rectangular_70s_Slanted_Record'Class;</tt></p></blockquote>
<p>The following operations are provided:</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Gtk_Gauge_Rectangular_70s_Slanted;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Texts</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Delimiter</b>&nbsp; : 
	Character := ' 
	'; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b> : Gtk_Adjustment := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;&nbsp;&nbsp; : Positive := <font color="#800000">12</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>These procedures create the widget.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font>&nbsp;Gtk_Gauge_Rectangular_70s_Slanted_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Texts</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Delimiter</b>&nbsp; : 
	Character; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b> : Gtk_Adjustment;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;&nbsp;&nbsp; : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure must be called from Initialize of any derived widget 
type.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Annotation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Rectangular_70s_Slanted_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Elliptic_Annotation_Layer;</tt></p></blockquote>
<p>This function returns the widget's major annotation layer.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Background<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Rectangular_70s_Slanted_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Rectangular_Background_Layer;</tt></p></blockquote>
<p>This function returns the widget's background.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Cache<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Rectangular_70s_Slanted_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Cache_Layer;</tt></p></blockquote>
<p>This function returns the widget's caching layer.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Needle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Rectangular_70s_Slanted_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Needle_Layer;</tt></p></blockquote>
<p>This function returns the widget's needle.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Rectangular_70s_Slanted_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp; : GDouble<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the indicated value. The value can also be changed 
through the widget's needle or its adjustment. Note that the procedure does not 
emit events. In order to redraw the widget use
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.widget.html#L2297C14">Queue_Draw</a>.</p>
<h4><a name="11.4.3"></a>11.4.3. Gtk.Gauge.Flat_Horizontal</h4>
<p>The package <a href="#Gtk.Gauge.Flat_Horizontal">
Gtk.Gauge.Flat_Horizontal</a> 
provides the widget:</p>
	<blockquote>
		<p><a name="Gtk.Gauge.Flat_Horizontal"></a>
		<img border="0" src="gtk_gauge_flat_horizontal.png" width="349" height="114" alt="gauge flat horizontal"></p>
</blockquote>
<p>Note that the indicated colored bar does not belong to the widget, it was 
added later placing a <a href="#Gtk.Layered.Bar">Bar</a> above 
the caching layer.</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> 
Gtk_Gauge_Flat_Horizontal_Record<font color="#0000FF"> 
is<br>
&nbsp;&nbsp; new</font> Gtk_Layered_Record <font color="#0000FF">with private</font>;<br>
<font color="#0000FF">type</font> Gtk_Gauge_Flat_Horizontal
<font color="#0000FF">
is</font><br>
&nbsp;&nbsp; <font color="#0000FF">access all</font> 
Gtk_Gauge_Flat_Horizontal_Record'Class;</tt></p></blockquote>
<p>The following operations are provided:</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Gtk_Gauge_Flat_Horizontal;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Texts</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Delimiter</b>&nbsp; : 
	Character := ' 
	'; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b> : Gtk_Adjustment := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;&nbsp;&nbsp; : Positive := <font color="#800000">10</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>These procedures create the widget.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font>&nbsp;Gtk_Gauge_Flat_Horizontal_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Texts</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Delimiter</b>&nbsp; : 
	Character; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b> : Gtk_Adjustment;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;&nbsp;&nbsp; : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure must be called from Initialize of any derived widget 
type.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Annotation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Flat_Horizontal_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Flat_Annotation_Layer;</tt></p></blockquote>
<p>This function returns the widget's major annotation layer.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Background<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Flat_Horizontal_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Rectangular_Background_Layer;</tt></p></blockquote>
<p>This function returns the widget's background.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Cache<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Flat_Horizontal_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Cache_Layer;</tt></p></blockquote>
<p>This function returns the widget's caching layer.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Needle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Flat_Horizontal_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Flat_Needle_Layer;</tt></p></blockquote>
<p>This function returns the widget's needle.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Flat_Horizontal_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp; : GDouble<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the indicated value. The value can also be changed 
through the widget's needle or its adjustment. Note that the procedure does not 
emit events. In order to redraw the widget use
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.widget.html#L2297C14">Queue_Draw</a>.</p>
<h4><a name="11.4.4"></a>11.4.4. Gtk.Gauge.Flat_Vertical</h4>
<p>The package <a href="#Gtk.Gauge.Flat_Vertical">Gtk.Gauge.Flat_Vertical</a> 
provides the widget:</p>
	<blockquote>
		<p><a name="Gtk.Gauge.Flat_Vertical"></a>
		<img border="0" src="gtk_gauge_flat_vertical.png" width="159" height="446" alt="gauge flat vertical"></p>
</blockquote>
<p>Note that the indicated colored bar does not belong to the widget, it was 
added later placing a <a href="#Gtk.Layered.Bar">Bar</a> above 
the caching layer.</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> 
Gtk_Gauge_Flat_Vertical_Record<font color="#0000FF"> 
is<br>
&nbsp;&nbsp; new</font> Gtk_Layered_Record <font color="#0000FF">with private</font>;<br>
<font color="#0000FF">type</font> Gtk_Gauge_Flat_Vertical <font color="#0000FF">
is</font><br>
&nbsp;&nbsp; <font color="#0000FF">access all</font> 
Gtk_Gauge_Flat_Vertical_Record'Class;</tt></p></blockquote>
<p>The following operations are provided:</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Gtk_Gauge_Flat_Vertical;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Texts</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Delimiter</b>&nbsp; : 
	Character := ' 
	'; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b> : Gtk_Adjustment := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;&nbsp;&nbsp; : Positive := <font color="#800000">10</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>These procedures create the widget.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font>&nbsp;Gtk_Gauge_Flat_Vertical_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Texts</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <i>
	<a href="#annotation_texts_specification">texts specification</a></i>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Delimiter</b>&nbsp; : 
	Character; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b> : Gtk_Adjustment;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sectors</b>&nbsp;&nbsp;&nbsp; : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure must be called from Initialize of any derived widget 
type.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Annotation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Flat_Vertical_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Flat_Annotation_Layer;</tt></p></blockquote>
<p>This function returns the widget's major annotation layer.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Background<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Gtk_Gauge_Flat_Vertical_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Rectangular_Background_Layer;</tt></p></blockquote>
<p>This function returns the widget's background.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Cache<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Flat_Vertical_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Cache_Layer;</tt></p></blockquote>
<p>This function returns the widget's caching layer.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Needle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Flat_Vertical_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Flat_Needle_Layer;</tt></p></blockquote>
<p>This function returns the widget's needle.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_Flat_Vertical_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp; : GDouble<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure the indicated value. The value can also be changed 
through the widget's needle or its adjustment. Note that the procedure does not 
emit events. In order to redraw the widget use
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.widget.html#L2297C14">Queue_Draw</a>.</p>
<H3><a name="11.5"></a>11.5. Clocks</H3>
<p><a name="Gtk.Wall_Clocks"></a>The package <a href="#Gtk.Wall_Clocks">
Gtk.Wall_Clocks</a> has children packages implementing various wall clocks.</p>
<h4><a name="11.5.1"></a>11.5.1. Gtk.Wall_Clock.Imperial</h4>
<p>The package <a href="#Gtk.Wall_Clock.Imperial">Gtk.Wall_Clock.Imperial</a> 
provides the widget:</p>
	<blockquote>
		<p><a name="Gtk.Wall_Clock.Imperial"></a>
		<img border="0" src="gtk_clock_imperial.png" width="243" height="244" alt="clock imperial"></p>
</blockquote>
<blockquote>
<p><tt><font color="#0000FF">type</font> 
Gtk_Wall_Clock_Imperial_Record<font color="#0000FF"> 
is<br>
&nbsp;&nbsp; new</font> Gtk_Layered_Record <font color="#0000FF">with private</font>;<br>
<font color="#0000FF">type</font> Gtk_Wall_Clock_Imperial <font color="#0000FF">
is</font><br>
&nbsp;&nbsp; <font color="#0000FF">access all</font> 
Gtk_Wall_Clock_Imperial_Record'Class;</tt></p></blockquote>
<p>The following operations are provided:</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Gtk_Wall_Clock_Imperial;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b> : Gtk_Adjustment := <font color="#0000FF">null</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>These procedures create the widget.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font>&nbsp;Gtk_Wall_Clock_Imperial_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b> : Gtk_Adjustment<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure must be called from Initialize of any derived widget 
type.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Annotation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Wall_Clock_Imperial_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Elliptic_Annotation_Layer;</tt></p></blockquote>
<p>This function returns the widget's major annotation layer.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Background<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Wall_Clock_Imperial_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Elliptic_Background_Layer;</tt></p></blockquote>
<p>This function returns the widget's background.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Hour_Hand<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Wall_Clock_Imperial_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Clock_Hand_Layer;</tt></p></blockquote>
<p>This function returns the widget's hour hand.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Minute_Hand<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Wall_Clock_Imperial_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Clock_Hand_Layer;</tt></p></blockquote>
<p>This function returns the widget's minute hand.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Cache<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Wall_Clock_Imperial_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Cache_Layer;</tt></p></blockquote>
<p>This function returns the widget's caching layer.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Wall_Clock_Imperial_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp; : Time<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the indicated time. The value can also be changed 
through the widget's needle or its adjustment. Note that the procedure does not 
emit events. In order to redraw the widget use
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.widget.html#L2297C14">Queue_Draw</a>.</p>
<h4><a name="11.5.2"></a>11.5.2. Gtk.Wall_Clock.Classic</h4>
<p>The package <a href="#Gtk.Wall_Clock.Imperial">Gtk.Wall_Clock.Classic</a> 
provides the widget with two dials:</p>
<blockquote>
	<h4><a name="Gtk.Wall_Clock.Classic"></a>
	<img border="0" src="gtk_clock_classic.png" width="243" height="244" alt="clock classic"></h4>
</blockquote>
<blockquote>
<p><tt><font color="#0000FF">type</font> 
Gtk_Wall_Clock_Classic_Record<font color="#0000FF"> 
is<br>
&nbsp;&nbsp; new</font> Gtk_Layered_Record <font color="#0000FF">with private</font>;<br>
<font color="#0000FF">type</font> Gtk_Wall_Clock_Classic <font color="#0000FF">
is</font><br>
&nbsp;&nbsp; <font color="#0000FF">access all</font> 
Gtk_Wall_Clock_Classic_Record'Class;</tt></p></blockquote>
<p>The following operations are provided:</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Gtk_Wall_Clock_Imperial;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b> : Gtk_Adjustment := <font color="#0000FF">null</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>These procedures create the widget.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font>&nbsp;Gtk_Wall_Clock_Classic_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b> : Gtk_Adjustment<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure must be called from Initialize of any derived widget 
type.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Annotation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Wall_Clock_Classic_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Elliptic_Annotation_Layer;</tt></p></blockquote>
<p>This function returns the widget's major annotation layer.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Background<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Wall_Clock_Classic_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Elliptic_Background_Layer;</tt></p></blockquote>
<p>This function returns the widget's background.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Hour_Hand<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Wall_Clock_Classic_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Needle_Layer;</tt></p></blockquote>
<p>This function returns the widget's hour hand.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Minute_Hand<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Wall_Clock_Classic_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Needle_Layer;</tt></p></blockquote>
<p>This function returns the widget's minute hand.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Second_Hand<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Wall_Clock_Classic_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Needle_Layer;</tt></p></blockquote>
<p>This function returns the widget's second hand.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Cache<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Wall_Clock_Classic_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Cache_Layer;</tt></p></blockquote>
<p>This function returns the widget's caching layer.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Wall_Clock_Classic_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp; : Time<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the indicated time. The value can also be changed 
through the widget's needle or its adjustment. Note that the procedure does not 
emit events. In order to redraw the widget use
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.widget.html#L2297C14">Queue_Draw</a>.</p>
<h4><a name="11.5.3"></a>11.5.3. Gtk.Wall_Clock.Modern</h4>
<p>The package <a href="#Gtk.Wall_Clock.Modern">Gtk.Wall_Clock.Modern</a> 
provides the widget with two dials:</p>
<blockquote>
	<p><a name="Gtk.Wall_Clock.Modern"></a>
		<img border="0" src="gtk_clock_modern.png" width="243" height="244" alt="clock modern"></p>
</blockquote>
<blockquote>
<p><tt><font color="#0000FF">type</font> 
Gtk_Wall_Clock_Modern_Record<font color="#0000FF"> 
is<br>
&nbsp;&nbsp; new</font> Gtk_Layered_Record <font color="#0000FF">with private</font>;<br>
<font color="#0000FF">type</font> Gtk_Wall_Clock_Modern <font color="#0000FF">
is</font><br>
&nbsp;&nbsp; <font color="#0000FF">access all</font> 
Gtk_Wall_Clock_Modern_Record'Class;</tt></p></blockquote>
<p>The following operations are provided:</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Gtk_Wall_Clock_Modern;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b> : Gtk_Adjustment := <font color="#0000FF">null</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>These procedures create the widget.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font>&nbsp;Gtk_Wall_Clock_Modern_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Adjustment</b> : Gtk_Adjustment<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure must be called from Initialize of any derived widget 
type.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Annotation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font> Gtk_Wall_Clock_Modern_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Elliptic_Annotation_Layer;</tt></p></blockquote>
<p>This function returns the widget's major annotation layer.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Background<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font> Gtk_Wall_Clock_Modern_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Elliptic_Background_Layer;</tt></p></blockquote>
<p>This function returns the widget's background.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Hour_Hand<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font> Gtk_Wall_Clock_Modern_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Needle_Layer;</tt></p></blockquote>
<p>This function returns the widget's hour hand.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Minute_Hand<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font> Gtk_Wall_Clock_Modern_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Needle_Layer;</tt></p></blockquote>
<p>This function returns the widget's minute hand.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Second_Hand<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font> Gtk_Wall_Clock_Modern_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Needle_Layer;</tt></p></blockquote>
<p>This function returns the widget's second hand.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Cache<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access </font>Gtk_Wall_Clock_Modern_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Cache_Layer;</tt></p></blockquote>
<p>This function returns the widget's caching layer.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font> Gtk_Wall_Clock_Modern_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Value</b>&nbsp; : Time<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the indicated time. The value can also be changed 
through the widget's needle or its adjustment. Note that the procedure does not 
emit events. In order to redraw the widget use
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.widget.html#L2297C14">Queue_Draw</a>.</p>
<H3><a name="11.6"></a>11.6. LEDs</H3>
<h4><a name="11.6.1"></a>11.6.1. Gtk.Gauge.LED_Round</h4>
<p>The package <a href="#Gtk.Gauge.LED_Round">Gtk.Gauge.LED_Round</a> 
provides the widget with two dials:</p>
<blockquote>
	<p><a name="Gtk.Gauge.LED_Round"></a>
	<img border="0" src="gtk_gauge_led_round.png" width="231" height="43" alt="gauge led round"></p>
</blockquote>
<blockquote>
<p><tt><font color="#0000FF">type</font> 
Gtk_Gauge_LED_Round_Record<font color="#0000FF"> 
is<br>
&nbsp;&nbsp; new</font> Gtk_Layered_Record <font color="#0000FF">with private</font>;<br>
<font color="#0000FF">type</font> Gtk_Gauge_LED_Round <font color="#0000FF">
is</font><br>
&nbsp;&nbsp; <font color="#0000FF">access all</font> 
Gtk_Gauge_LED_Round_Record'Class;</tt></p></blockquote>
<p>The following operations are provided:</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Gtk_Gauge_LED_Round;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
On_Color</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Color := RGB (<font color="#800000">0.0</font>,
<font color="#800000">1.0</font>, <font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Off_Color</b>&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Color := RGB (<font color="#800000">0.5</font>,
<font color="#800000">0.5</font>, <font color="#800000">0.5</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Border_Shadow</b> : Gtk_Shadow_Type := Shadow_In<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure creates a round LED widget. The parameters <b>On_Color</b> and
<b>Off_Color</b> define the dominating colors of the LED when on and off, 
correspondingly. <b>Border_Shadow</b> specifies the LED border shape. The LED is 
created initially off.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_LED_Round_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
On_Color</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Color;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Off_Color</b>&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Color;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Border_Shadow</b> : Gtk_Shadow_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure must be called from Initialize of any derived widget 
type.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Background<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font> Gtk_Gauge_LED_Round_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Elliptic_Background_Layer;</tt></p></blockquote>
<p>This function returns the widget's background.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Cache<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access </font>Gtk_Gauge_LED_Round_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Cache_Layer;</tt></p></blockquote>
<p>This function returns the widget's caching layer.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Off_Color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access </font>Gtk_Gauge_LED_Round_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return </font>Gdk_Color;</tt></p></blockquote>
<p>This function returns the color used when the LED is off.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_On_Color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access </font>Gtk_Gauge_LED_Round_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return </font>Gdk_Color;</tt></p></blockquote>
<p>This function returns the color used when the LED is on.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Colors<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Gauge_LED_Round_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
On_Color</b>&nbsp; : Gdk_Color;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Off_Color</b> : Gdk_Color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes LED colors. This is a task-safe operation. Note that 
it does not emit events. In order to force redraw the widget use
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.widget.html#L2297C14">Queue_Draw</a>.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_State<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font> Gtk_Wall_Clock_Modern_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
State</b>&nbsp; : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the LED state. Note that the procedure does not 
emit events. In order to redraw the widget use
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.widget.html#L2297C14">Queue_Draw</a>.</p>
<h4><a name="11.6.2"></a>11.6.2. Gtk.Gauge.LED_Rectangular</h4>
<p>The package <a href="#Gtk.Gauge.LED_Rectangular">Gtk.Gauge.LED_Rectangular</a> 
provides the widget with two dials:</p>
<blockquote>
	<p><a name="Gtk.Gauge.LED_Rectangular"></a>
	<img border="0" src="gtk_gauge_led_rectangular.png" width="231" height="43" alt="gauge led rectangular"></p>
</blockquote>
<blockquote>
<p><tt><font color="#0000FF">type</font> 
Gtk_Gauge_LED_Rectangular_Record<font color="#0000FF"> 
is<br>
&nbsp;&nbsp; new</font> Gtk_Layered_Record <font color="#0000FF">with private</font>;<br>
<font color="#0000FF">type</font> Gtk_Gauge_LED_Rectangular
<font color="#0000FF">
is</font><br>
&nbsp;&nbsp; <font color="#0000FF">access all</font> 
Gtk_Gauge_LED_Rectangular_Record'Class;</tt></p></blockquote>
<p>The following operations are provided:</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Gtk_Gauge_LED_Rectangular;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
On_Color</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Color := RGB (<font color="#800000">0.0</font>,
<font color="#800000">1.0</font>, <font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Off_Color</b>&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Color := RGB (<font color="#800000">0.5</font>,
<font color="#800000">0.5</font>, <font color="#800000">0.5</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Border_Shadow</b> : Gtk_Shadow_Type := Shadow_In<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure creates a rectangular LED widget. The parameters <b>On_Color</b> 
and <b>Off_Color</b> define the dominating colors of the LED when on and off, 
correspondingly. <b>Border_Shadow</b> specifies the LED border shape. The LED is 
created initially off.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Gauge_LED_Rectangular_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
On_Color</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Color;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Off_Color</b>&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Color;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Border_Shadow</b> : Gtk_Shadow_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure must be called from Initialize of any derived widget 
type.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Background<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font> Gtk_Gauge_LED_Rectangular_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Elliptic_Background_Layer;</tt></p></blockquote>
<p>This function returns the widget's background.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Cache<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access </font>Gtk_Gauge_LED_Rectangular_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Cache_Layer;</tt></p></blockquote>
<p>This function returns the widget's caching layer.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Off_Color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access </font>Gtk_Gauge_LED_Rectangular_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return </font>Gdk_Color;</tt></p></blockquote>
<p>This function returns the color used when the LED is off.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_On_Color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access </font>Gtk_Gauge_LED_Rectangular_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return </font>Gdk_Color;</tt></p></blockquote>
<p>This function returns the color used when the LED is on.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Colors<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Gauge_LED_Rectangular_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
On_Color</b>&nbsp; : Gdk_Color;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Off_Color</b> : Gdk_Color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes LED colors. This is a task-safe operation. Note that 
it does not emit events. In order to force redraw the widget use
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.widget.html#L2297C14">Queue_Draw</a>.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_State<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font> Gtk_Gauge_LED_Rectangular_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
State</b>&nbsp; : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the LED state. Note that the procedure does not 
emit events. In order to redraw the widget use
<a href="http://docs.adacore.com/gtkada-docs/gtkada_rm/gtkada_rm/docs/gtk.widget.html#L2297C14">Queue_Draw</a>.</p>
<hr>
<p align="right">
  <a name="12"></a><a href="#11"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><a href="#16"
><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></a><a href="#13"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H2>12. Oscilloscope</H2>
<p><a name="oscilloscope"></a>The oscilloscope widget is ready-to-use complete widget implementing a 
multichannel oscilloscope. The widget is designed to indicate real-time channels 
sampled asynchronously at the rates possibly sufficiently higher than the rendering 
rate.</p>
<blockquote>
	<p><img border="0" src="oscilloscope.png" width="614" height="530" alt="oscilloscope"></p>
</blockquote>
<p>The oscilloscope supports two sweepers and three amplifiers with or without 
scales, annotation, graph paper. The amplifiers can function in auto-scale or 
manual modes. The oscilloscope provides tooltips of the values on mouse hovering 
as well as visual zooming using the mouse cursor with zooming undo and redo.</p>
	<H3><a name="12.1"></a>12.1. Oscilloscope widget</H3>
<p><a name="Gtk.Oscilloscope"></a>The package <a href="#Gtk.Oscilloscope">Gtk.Oscilloscope</a> provides the 
oscilloscope widget.</p>
<h4><a name="12.1.1"></a>12.1.1. Channels</h4>
<p>The oscilloscope supports multiple channels. Each channel is a waveform, a 
running graph. The channels are fed with data asynchronously to rendering, which 
can be done from any task. Each channel belong to a group. Channels are numbered 
from 1. The enumeration is dense, when a channel is removed, the channels with 
higher numbers get their numbers decremented by one. The following type is 
defined for channel numbers in the package
<a href="#Gtk.Oscilloscope">Gtk.Oscilloscope</a>:</p>
	<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Oscilloscope.Channel_Number"></a>type</font>&nbsp;Channel_Count
<font color="#0000FF">is new</font> Natural;<br>
<font color="#0000FF">subtype</font> Channel_Number <font color="#0000FF">is</font> Channel_Count
<font color="#0000FF">range</font> 1..Channel_Count'Last;</tt></p></blockquote>
<p>There are built-in data sources specified by the type
<a href="#Gtk.Oscilloscope.Drawing_Measurement_Point">Drawing_Measurement_Point</a> 
defined in the package
<a href="#Gtk.Oscilloscope">Gtk.Oscilloscope</a>:</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Drawing_Measurement_Point"></a>type</font> 
Drawing_Measurement_Point <font color="#0000FF">is</font> (Refresh_Period, Drawing_Time);</tt></p></blockquote>
<p>The type's values are:</p>
<ul>
	<li><i>Refresh_Period</i> samples the durations between two consequent 
	renderings of the widget contents;</li>
	<li><i>Drawing_Time</i> samples the durations of widget contents rendering.</li>
</ul>
<p>So-called derivation channels use these data sources for informational 
purposes.</p>
<h4><a name="12.1.2"></a>12.1.2. Groups</h4>
<p>The channels of the same group share an amplifier. The amplifier controls 
scaling of the channel data. Scaling can be done either automatically or 
manually (see <a href="#Gtk.Oscilloscope.Get_Auto_Scaling">Set_Auto_Scaling</a>). Automatic scaling adapts itself to the values of the channels of the 
group. Groups are numbered from 1. The following type is defined for channel 
group numbers in the package
<a href="#Gtk.Oscilloscope">Gtk.Oscilloscope</a>:</p>
	<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Oscilloscope.Group_Number"></a>type</font>&nbsp;Group_Count<font color="#0000FF"> is new</font> Natural;<br>
<font color="#0000FF">subtype</font> Group_Number <font color="#0000FF">is</font> 
Group_Count <font color="#0000FF">range</font> 1..Group_Count'Last;</tt></p></blockquote>
<p>The group can be assigned to one or more vertical axis using
<a href="#Gtk.Oscilloscope.Set_Group">Set_Group</a>. An axis has only one group 
assigned or none.</p>
<h4><a name="12.1.3"></a>12.1.3. Vertical scales and axes</h4>
<p>The oscilloscope has three built-in vertical scales. The package
<a href="#Gtk.Oscilloscope">Gtk.Oscilloscope</a> defines the vertical axes 
enumeration type:</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Amplifier_Type"></a>type</font> 
Amplifier_Type <font color="#0000FF">is</font> (Left, Right, Middle);</tt></p></blockquote>
<p>The type's values are:</p>
<ul>
	<li><i>Left</i> indicates the axis left of the widget;</li>
	<li><i>Middle</i> is the axis in the middle of the widget, 
	superimposed the waveforms;</li>
	<li><i>Right</i> is the axis right of the widget.</li>
</ul>
<p>An axis can be assigned to a group of channels. It can have an annotation 
rendering the values of the channels in the group (<a href="#Gtk.Oscilloscope.Get_Values_Axis">Set_Values_Axis</a>), 
a scale (slider) to adjust the axis amplifier state, a graph paper of horizontal 
lines superimposed the waveforms (<a href="#Gtk.Oscilloscope.Get_Values_Grid">Set_Values_Grid</a>). 
Axis can be switched between groups of channels any time (<a href="#Gtk.Oscilloscope.Set_Group">Set_Group</a>).</p>
<h4><a name="12.1.4"></a>12.1.4. Horizontal scales and axes</h4>
<p>The oscilloscope has two built-in horizontal time scales. The package
<a href="#Gtk.Oscilloscope">Gtk.Oscilloscope</a> defines the horizontal axes 
enumeration type:</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Sweeper_Type"></a>type</font> 
Sweeper_Type<font color="#0000FF"> is</font> (Upper, Lower);</tt></p></blockquote>
<p>The type's values are:</p>
<ul>
	<li><i>Upper</i> indicates the time axis on the top of the widget, 
	when present;</li>
	<li><i>Lower</i> is the axis on the bottom of the widget.</li>
</ul>
<p>Each horizontal axis has a sweeper associated with it. A channel is assigned to 
a sweepers upon creation (<a href="#Gtk.Oscilloscope.Add_Channel">Add_Channel</a>). 
The axis can have an annotation rendering the time stamps (<a href="#Gtk.Oscilloscope.Get_Time_Axis">Set_Time_Axis</a>), 
a scale (slider) to adjust the sweeper position, a graph paper of vertical lines 
superimposed the waveforms (<a href="#Gtk.Oscilloscope.Get_Time_Grid">Set_Time_Grid</a>).</p>
<h4><a name="12.1.5"></a>12.1.5. The widget type and operations</h4>
<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Gtk_Oscilloscope"></a>
type</font> Gtk_Oscilloscope_Record (&lt;&gt;) <font color="#0000FF">is<br>
&nbsp;&nbsp; new</font> Gtk_Widget_Record <font color="#0000FF">with private</font>;<br>
<font color="#0000FF">type</font> Gtk_Oscilloscope <font color="#0000FF">is 
access all</font> Gtk_Oscilloscope_Record'Class;</tt></p></blockquote>
<p>The following operations are defined in the package:</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Add_Channel"></a>function</font> Add_Channel<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; :
<font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Group</b>&nbsp;&nbsp; 
: Group_Number;&nbsp; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>Color</b>&nbsp;&nbsp; 
: Gdk_Color; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Mode</b>&nbsp;&nbsp;&nbsp; 
: Interpolation_Mode := Linear;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Left</b>&nbsp;&nbsp;&nbsp; 
: Boolean := False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Right</b>&nbsp;&nbsp; 
: Boolean := False;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp; 
: String&nbsp; := &quot;&quot;;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Sweeper</b> 
: Sweeper_Type := Lower;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Buffer</b>&nbsp; 
: <font color="#0000FF">access</font> Gtk_Waveform_Ring_Data_Buffer_Record'Class := <font color="#0000FF">null</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Channel_Number;</tt></p></blockquote>
<p>These functions add a new channel to the oscilloscope. The parameter <b>Group</b> 
is the group the channel belongs to. When omitted, a new group is created for the 
channel. The parameter <b>Color</b> is the color used for the channel's 
waveform. When omitted a color is selected automatically. <b>Mode</b> is the 
interpolation mode of the waveform. Linear interpolation is used by default.&nbsp; 
The parameters <b>Left</b> and <b>Right</b> when set <i><font color="#800000">
true</font></i> allow extrapolation to the left and to the right 
correspondingly. The extrapolation uses the first or last sampled value 
accordingly. <b>Name</b> is the channel name. When empty 
the channel name is generated using the channel number. <b>Sweeper</b> specifies the
<a href="#Gtk.Oscilloscope.Sweeper_Type">time scale and the sweeper</a> 
used to with the waveform. The parameter <b>Buffer</b> is the
<a href="#Gtk_Waveform_Ring_Data_Buffer">channel data buffer</a>. The channel 
renders the buffer contents. When <b>Buffer</b> is <font color="#0000FF">null</font>, 
a new buffer is created for the channel. Otherwise the specified buffer is used. 
The returned value is the channel number, which is used in other operations to 
identify the channel. Constraint_Error is propagated when <b>Group</b> does not 
specify an existing channel group or when the maximal number of channels is 
exceeded.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Add_Deviation_Channel<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp; : 
<font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Group</b>&nbsp;&nbsp;&nbsp; 
: Group_Number;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Color</b>&nbsp;&nbsp;&nbsp; 
: Gdk_Color;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Measured</b> : Drawing_Measurement_Point := Refresh_Period;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: String := &quot;&quot;;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Sweeper</b>&nbsp; 
: Sweeper_Type := Lower<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Channel_Number;</tt></p></blockquote>
<p>These functions add a new derivation channel to the oscilloscope. The 
parameters and the result are same as in <a href="#Gtk.Oscilloscope.Add_Channel">
Add_Channel</a>, except for the parameter <b>Measured</b> which indicates which
<a href="#Gtk.Oscilloscope.Drawing_Measurement_Point">widget's internal data 
source</a> to render.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Add_Group<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp; :
<font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: String := &quot;&quot;;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Amplifier</b> 
: Gtk_Waveform_Amplifier := <font color="#0000FF">null</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Group_Number;</tt></p></blockquote>
<p>This function creates a new, initially empty, group of channels. The 
parameter <b>Name</b> is the group's name. When empty, the name is generated out 
for the group number. The parameter <b>Amplifier</b> specifies the amplifier 
object to use with the group. If <font color="#0000FF">null</font> the amplifier 
is created automatically. The function returns the number of the created group. Constraint_Error is propagated when there is too many groups. The maximal number 
of groups is equal to the maximal number of channels.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Add_Shadow_Channel<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;:
<font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Channel</b> 
: Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Color</b>&nbsp;&nbsp; 
: Gdk_Color;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp;&nbsp; 
: String := &quot;&quot;;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Sweeper</b> 
: Sweeper_Type := Upper<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Channel_Number;</tt></p></blockquote>
<p>These function add a shadow channel. A shadow channel has the same source and 
the group as the origin channel specified by the parameter <b>Channel</b>. Other 
parameters and the result are same as in <a href="#Gtk.Oscilloscope.Add_Channel">
Add_Channel</a>. Normally the shadow channel has another sweeper, so than both 
the origin and the source can be superimposed and shifted horizontally 
relatively each other. When <b>Name</b> is an empty string the name of the 
shadow channel is the origin name plus &quot; (shadow)&quot;. Constraint_Error is 
propagated when <b>Channel</b> does not specify an existing channel or when the 
maximal number of channels is exceeded.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Capture_PDF"></a>procedure</font> Capture_{PDF|SVG}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>File</b>&nbsp;&nbsp; 
: UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>These procedures capture the contents of the oscilloscope into the file in 
the specified format.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Create_Annotation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Amplifier</b> : Amplifier_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">return not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Graph_Paper_Annotation_Layer'Class;<br>
<font color="#0000FF">function</font> Create_Annotation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; :
<font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Sweeper</b> 
: Sweeper_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Graph_Paper_Annotation_Layer'Class;</tt></p></blockquote>
<p>These functions are provide factories to create axis annotation. It can be 
overridden in order to provide custom axis annotation layer.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> 
Delete_Channel<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Channel</b> : Channel_Number<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure deletes a channel. Note that this operation will change the 
channel numbers greater than <b>Channel</b>. Constraint_Error is propagated when
<b>Channel</b> does not specify an existing channel.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Erase_Redo_Stack"></a>procedure</font> 
Erase_Redo_Stack<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> 
: <font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure erases the contents of the zooming redo buffer.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Erase_Undo_Stack<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> 
: <font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure erases the contents of the zooming undo buffer.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscillograph.Feed"></a>procedure</font> Feed<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Channel</b> : Channel_Number;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>T</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: [Ada.Calendar.]Time; ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>V</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: GDouble<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<font color="#0000FF"><br>
procedure</font> Feed<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Channel</b> : Channel_Number;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>T</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>V</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: GDouble<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>These procedures feed the channel specified by the parameter <b>Channel</b> 
with data. The parameter <b>T</b> when omitted is the current time, either as 
Ada.Real_Time.Time or as Ada.Calendar.Time. The 
procedure can be called asynchronously from a concurrent task. Note though that 
there must be only one task feeding the channel at the time. Constraint_Error is 
propagated when <b>Channel</b> does not specify an existing channel.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Amplifier<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Amplifier</b> 
: Amplifier_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Waveform_Amplifier_Record'Class;<font color="#0000FF"><br>
function</font> Get_Amplifier<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; :
<font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Channel</b> 
: Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Waveform_Amplifier_Record'Class;<br>
<font color="#0000FF">function</font> Get_Amplifier<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Group</b>&nbsp; 
: Group_Number<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Waveform_Amplifier_Record'Class;<br>
&nbsp;</tt></p></blockquote>
<p>These functions return the <a href="#Gtk.Layered.Waveform.Amplifier">
amplifier</a> of the channel group associated with the vertical axis specified 
by the parameter <b>Amplifier</b>, or by the channel specified by the parameter <b>
Channel</b>. The amplifier can be directly requested by the group number (the 
parameter <b>Group</b>). Constraint_Error is propagated when no group is associated with <b>
Amplifier</b>, or when <b>Channel</b> does not specify an existing channel, or 
when <b>Group</b> does not specify an existing group.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Get_Auto_Scaling"></a>
function</font> Get_Auto_Scaling<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">not null access constant</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Amplifier</b> 
: Amplifier_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;<font color="#0000FF"><br>
function</font> Get_Auto_Scaling<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access constant</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Group</b>&nbsp; 
: Group_Number<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p></blockquote>
<p>These function return current
<a href="#Gtk.Layered.Waveform.Amplifier.Set_Scaling">auto-scaling</a> more of 
the <a href="#Gtk.Layered.Waveform.Amplifier">amplifier</a> of the channel group 
associated with the vertical axis specified by the parameter <b>Amplifier</b>, 
or directly by the group number&nbsp; (the parameter <b>Group</b>). 
When auto-scaling is on the channels of the group as scaled to fit the widget. Constraint_Error is propagated when no group is associated with <b>Amplifier</b>, 
or when <b>Group</b> does not specify an existing group.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Get_Box"></a>function</font> Get_Box<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access constant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font>&nbsp;Gtk_Oscilloscope_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Cairo_Box;</tt></p></blockquote>
<p>This function returns the box where waveforms are drawn. The box coordinates 
are relative to the widget. The box does not include the space occupied by the 
scales.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Get_Buffer"></a>function</font> Get_Buffer<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; :
<font color="#0000FF">not null access constant</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Channel</b> 
: Channel_Number<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Waveform_Ring_Data_Buffer_Record'Class;</tt></p></blockquote>
<p>This function returns the
<a href="#Gtk_Waveform_Ring_Data_Buffer">channel's data buffer</a>. 
Constraint_Error is propagated when <b>Channel</b> does not specify an existing 
channel.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscillograph.Get_Channel_List"></a>function</font> Get_Channel_List<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access constant</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Gtk_Oscilloscope_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Gtk_List_Store;</tt></p></blockquote>
<p>This function returns the
list store containing one row for each channel. The store has the following 
columns containing:</p>
<ul>
	<li>The channel name as GType_String;</li>
	<li>The channel number as GType_Int;</li>
	<li>The group number as GType_Int;</li>
	<li>The visibility status as GType_Boolean;</li>
	<li>The interpolation mode as GType_Int (nterpolation_Mode'Pos);</li>
	<li>The current value as GType_String. The value is set upon selection and 
	has the meaning depending on the operation chosen;</li>
	<li>The status of the extrapolation to the left as GType_Boolean;</li>
	<li>The status of the extrapolation to the right as GType_Boolean.</li>
</ul>
<p>The list store shall not be modified directly. </p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; :
<font color="#0000FF">not null access constant</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Channel</b> 
: Channel_Number<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Gdk_Color;</tt></p></blockquote>
<p>This function returns the
channel's color. Constraint_Error is propagated when <b>Channel</b> does not specify an existing 
channel.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Default_Face<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp; <b>Widget</b>&nbsp;: <font color="#0000FF">not null access</font> 
<font color="#0000FF">constant</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Gtk_Oscilloscope_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Pango_Cairo_Font;</tt></p></blockquote>
<p>This function gets the face of the font to use by default when an annotation 
is added to an axis.</p>
	<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Oscilloscope.Get_Enabled_Dropdown_Items"></a>function</font> Get_Enabled_Dropdown_Items<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(&nbsp; <b>Widget</b>&nbsp;: <font color="#0000FF">not null access 
constant</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Gtk_Oscilloscope_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return</font> Dropdown_Items;</tt></p></blockquote>
<p>This returns the menu item enabled to show in the drop-down menu. The items 
list is an or-combination of <a href="#Gtk.Oscilloscope.Dropdown_Items">Dropdown_Items</a> 
constants.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_From<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; :
<font color="#0000FF">not null access constant</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Sweeper</b> 
: Sweeper_Type := Lower<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> [Ada.Calendar.]Time;</tt></p></blockquote>
<p>These functions return the
first time of the sweeper specified by the parameter <b>Sweeper</b>. The result 
is either Ada.Real_Time.Time or Ada.Calendar.Time.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Frozen<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; :
<font color="#0000FF">not null access constant</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Sweeper</b> 
: Sweeper_Type := Lower<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p></blockquote>
<p>This function returns the
state of the sweeper specified by the parameter <b>Sweeper</b>. When the sweeper 
is frozen the waveforms associated with the sweeper do not move.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Get_Grid_Colors<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">not null access constant</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Major_Color</b> : <font color="#0000FF">out</font> Gdk_Color;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Minor_Color</b> : <font color="#0000FF">out</font> Gdk_Color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure returns the colors of the lines corresponding to the major and 
minor ticks of the scale when the graph paper is shown.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Group<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">not null access constant</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Amplifier</b> 
: Amplifier_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Group_Number;<br>
<font color="#0000FF">function</font> Get_Group<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; :
<font color="#0000FF">not null access constant</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Channel</b> 
: Channel_Number<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Group_Number;</tt></p></blockquote>
<p>These functions return the number of the group associated with the vertical 
axis specified by the parameter <b>Amplifier</b> or the group of a channel 
specified by its number <b>Channel</b>. Constraint_Error is propagated when no group is associated with <b>Amplifier</b>, 
or when <b>Channel</b> does not specify an existing 
channel.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Group_List<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access constant</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Gtk_Oscilloscope_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Gtk_List_Store;</tt></p></blockquote>
<p>This function returns the
list store of the widget's groups. It has one row per group. The single column 
of the store has the type GType_String and contains the group name. The list 
store shall not be modified directly. A possible use of the store is a combo box 
widget. </p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Groups_Number<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access constant</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Gtk_Oscilloscope_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Group_Count;</tt></p></blockquote>
<p>This function returns the
number of groups.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Interpolation_Mode<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; :
<font color="#0000FF">not null access constant</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Channel</b> 
: Channel_Number<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Interpolation_Mode;</tt></p></blockquote>
<p>This function returns the
<a href="#Gtk.Layered.Interpolation_Mode">interpolation mode</a> of the channel. Constraint_Error 
is propagated when <b>Channel</b> does not specify an existing 
channel.</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Oscilloscope.Get_Left_Extrapolation_Mode"></a>function</font> 
Get_Left_Extrapolation_Mode<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; :
<font color="#0000FF">not null access constant</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Channel</b> 
: Channel_Number<br>
&nbsp;&nbsp; <font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; return</font> 
Boolean;</tt></p></blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if the 
waveform extrapolates data left of the first sampled value. Constraint_Error 
is propagated when <b>Channel</b> does not specify an existing 
channel.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Manual_Sweep<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; :
<font color="#0000FF">not null access constant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font> &nbsp;Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p></blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if the user 
can freeze/release the widget sweeper using the dropdown menu.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Name<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; :
<font color="#0000FF">not null access constant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font> &nbsp;Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Channel</b> 
: Channel_Number<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> String;</tt></p></blockquote>
<p>This function returns the
channel name. Constraint_Error is propagated when <b>Channel</b> does not specify an existing 
channel.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Name<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access constant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font> &nbsp;Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Group</b>&nbsp; 
: Group_Number<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> String;</tt></p></blockquote>
<p>This function returns the
group name. Constraint_Error is propagated when <b>Group</b> does not specify an 
existing group.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Offset<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; :
<font color="#0000FF">not null access constant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font> &nbsp;Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Sweeper</b> 
: Sweeper_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Duration;</tt></p></blockquote>
<p>This function returns the delay before the values of the channels associated 
with <b>Sweeper</b> appear at the oscilloscope's right margin.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Page_Span<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; :
<font color="#0000FF">not null access constant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font> &nbsp;Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Sweeper</b> 
: Sweeper_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Duration;</tt></p></blockquote>
<p>This function returns the duration between the oscilloscope's right and left 
margin for the scale indicated by the parameter <b>Sweeper</b>.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Get_Redo_Stub"></a>function</font> Get_Redo_Stub<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;:
<font color="#0000FF">not null access </font>Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Depth</b>&nbsp; 
: Positive := <font color="#800000">1</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p></blockquote>
<p>This function returns the name of a stub on the redo stack. The topmost stub 
has the depth 1. End_Error is propagated when there is no such stub.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Get_Release_To_Latest">
</a>function</font> Get_Release_To_Latest<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; :
<font color="#0000FF">not null access constant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font> &nbsp;Gtk_Oscilloscope_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p></blockquote>
<p>This function returns <i><font color="#800000">true</font></i> the sweeper 
when released by the user from frozen state is also moved to the latest time. By 
default the sweeper position is not changed (the function returns
<font color="#800000"><i>false</i></font>). See also Set_Release_To_Latest.</p>
<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Oscilloscope.Get_Right_Extrapolation_Mode"></a>function</font> 
Get_Right_Extrapolation_Mode<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; :
<font color="#0000FF">not null access constant</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Channel</b> 
: Channel_Number<br>
&nbsp;&nbsp; <font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; return</font> 
Boolean;</tt></p></blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if the 
waveform extrapolates data right of the last sampled value. Constraint_Error 
is propagated when <b>Channel</b> does not specify an existing 
channel.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Selection_Mode<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access constant</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Oscilloscope_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Selection_Action;</tt></p></blockquote>
<p>This function returns the currently used
<a href="#Gtk.Oscilloscope.Selection_Action">action on selection</a> of a 
rectangular area in the oscilloscope,</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Snapshot_File<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access constant</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Oscilloscope_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> UTF8_String;</tt></p></blockquote>
<p>This function returns the name of the file used to store the snapshot of the 
oscilloscope's contents when the user chooses the corresponding menu item. When 
the file is written <i>snapshot-captured</i> is emitted and the handler has an 
opportunity to change the file name for the following snapshot using
<a href="#Gtk.Oscilloscope.Set_Snapshot_File">Set_Snapshot_File</a>.</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Snapshot_Format<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access constant</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Oscilloscope_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Snapshot_Format;</tt></p></blockquote>
<p>This function returns the format used for the snapshot files. The format is 
set using the procedure <a href="#Gtk.Oscilloscope.Set_Snapshot_File">
Set_Snapshot_File</a>.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Get_Superscript"></a>function</font> Get_Superscript<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;:
<font color="#0000FF">not null access </font>Gtk_Oscilloscope_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p></blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if 
superscripts are allowed when formatting values of the axis. See 
<a href="#Gtk.Oscilloscope.Set_Superscript">Set_Superscript</a>.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Sweeper<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; :
<font color="#0000FF">not null access </font>Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Sweeper</b> 
: Sweeper_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Gtk_Waveform_Sweeper_Record'Class;</tt></p></blockquote>
<p>This function returns the <a href="#Gtk.Layered.Waveform.Sweeper">sweeper 
object </a>of the scale specified by the parameter <b>Sweeper</b>.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Sweeper<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; :
<font color="#0000FF">not null access</font> 
<font color="#0000FF">constant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font>Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Channel</b> 
: Channel_Number <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Sweeper_Type;</tt></p></blockquote>
<p>This function returns the
<a href="#Gtk.Oscilloscope.Sweeper_Type">time scale</a> used to with the 
channel. Constraint_Error is propagated when <b>Channel</b> does not specify an 
existing channel.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Get_Time"></a>function</font> Get_Time<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; :
<font color="#0000FF">not null access</font> 
<font color="#0000FF">constant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font>Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Sweeper</b> 
: Sweeper_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ <b>X</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: GInt ]<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Time;</tt></p></blockquote>
<p>These functions return the time, at the scale specified by the parameter <b>
Sweeper</b>, corresponding to the horizontal coordinate <b>X</b> in the widget 
coordinated. When the parameter X is omitted it is the time at the right margin 
of the widget.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Get_Time_Axis"></a>function</font> Get_Time_Axis<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; :
<font color="#0000FF">not null access constant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font> &nbsp;Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Sweeper</b> 
: Sweeper_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p></blockquote>
<p>This function returns the visibility status of the time axis specified by the 
parameter <b>Sweeper</b>. When the axis is visible, the result is <i>
<font color="#800000">true</font></i>.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Get_Time_Axis_Annotation"></a>function</font> 
Get_Time_Axis_Annotation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;: <font color="#0000FF">not null access constant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font> &nbsp;Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Sweeper</b> 
: Sweeper_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> <font color="#0000FF">access</font> 
Graph_Paper_Annotation_Layer'Class;</tt></p></blockquote>
<p>This functions returns the
<a href="#Gtk.Layered.Graph_Paper_Annotation.Graph_Paper_Annotation_Layer">
annotation</a> of the axis specified by the parameter <b>Sweeper</b>. The result is <font color="#0000FF">null</font> when no 
annotation is used.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Get_Time_Axis_Height">
</a>function</font> Get_Time_Axis_Height<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; 
: <font color="#0000FF">not null access constant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font> &nbsp;Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Sweeper</b> 
: Sweeper_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Natural;</tt></p></blockquote>
<p>This functions returns height of the time axis specified by the parameter <b>Sweeper</b>, when the axis is visible.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Get_Time_Grid"></a>function</font> Get_Time_Grid<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; :
<font color="#0000FF">not null access constant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font>&nbsp;Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Sweeper</b> 
: Sweeper_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p></blockquote>
<p>This function returns the visibility status of the time scale grid, for the 
scale specified by the parameter <b>Sweeper</b>. The grid is a set of vertical 
lines drawn the scale's ticks. When the grid is visible, the result is <i>
<font color="#800000">true</font></i>.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Get_Time_Scale"></a>function</font> Get_Time_Scale<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; :
<font color="#0000FF">not null access constant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font> &nbsp;Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Sweeper</b> 
: Sweeper_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p></blockquote>
<p>This function returns the visibility status of the time scale specified by 
the parameter <b>Sweeper</b>. See <a href="#Gtk.Oscilloscope.Set_Time_Scale">
Set_Time_Scale</a>.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Get_Time_Text_Angle"></a>function</font> Get_Time_Text_Angle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; :
<font color="#0000FF">not null access constant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font>&nbsp;Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Sweeper</b> 
: Sweeper_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> GDouble;</tt></p></blockquote>
<p>This function returns the angle between the x-axis of the cairo coordinates 
and the texts at the time scale specified by the parameter <b>Sweeper</b>.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Get_Time_Text_Color"></a>function</font> Get_Time_Text_Color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; :
<font color="#0000FF">not null access constant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font>&nbsp;Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Sweeper</b> 
: Sweeper_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Gdk_Color;</tt></p></blockquote>
<p>This function returns the color of the texts at the time scale specified by 
the parameter <b>Sweeper</b>.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Get_Time_Text_Face"></a>function</font> Get_Time_Text_Face<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; :
<font color="#0000FF">not null access constant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font>&nbsp;Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Sweeper</b> 
: Sweeper_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Pango_Cairo_Font;</tt></p></blockquote>
<p>This function returns the font face used for the texts at the time scale 
specified by the parameter <b>Sweeper</b>.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Get_Time_Text_Height">
</a>function</font> Get_Time_Text_Height<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; :
<font color="#0000FF">not null access constant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font>&nbsp;Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Sweeper</b> 
: Sweeper_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> GDouble;</tt></p></blockquote>
<p>This function returns the height of the texts at the time scale specified by 
the parameter <b>Sweeper</b>.</p>
	<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Oscilloscope.Get_Time_Text_Horizontal_Alignment"></a>function</font> Get_Time_Text_Horizontal_Alignment<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; :
<font color="#0000FF">not null access constant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font>&nbsp;Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Sweeper</b> 
: Sweeper_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Alignment;</tt></p></blockquote>
<p>This function returns the horizontal alignment of the texts at the time scale 
specified by the parameter <b>Sweeper</b>.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Get_Time_Text_Stretch">
</a>function</font> Get_Time_Text_Stretch<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; :
<font color="#0000FF">not null access constant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font>&nbsp;Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Sweeper</b> 
: Sweeper_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> GDouble;</tt></p></blockquote>
<p>This function returns the stretch of the texts at the time scale specified by 
the parameter <b>Sweeper</b>.</p>
	<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Oscilloscope.Get_Time_Text_Vertical_Alignment"></a>function</font> Get_Time_Text_Vertical_Alignment<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; :
<font color="#0000FF">not null access constant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font>&nbsp;Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Sweeper</b> 
: Sweeper_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Vertical_Alignment;</tt></p></blockquote>
<p>This function returns the vertical alignment of the texts at the time scale 
specified by the parameter <b>Sweeper</b>.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Get_Time_Tooltip"></a>function</font> Get_Time_Tooltip<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; :
<font color="#0000FF">not null access constant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font>&nbsp;Gtk_Oscilloscope_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p></blockquote>
<p>The tooltip when the mouse cursor hovers a waveform indicates the 
corresponding channel value under the cursor. When the value is accompanied by 
the corresponding time, this function returns <i><font color="#800000">true</font></i>.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Get_Time_Tooltip_Suffix"></a>function</font> Get_Time_Tooltip_Suffix<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
	<b>Widget</b>&nbsp; :
<font color="#0000FF">not null access constant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font>&nbsp;Gtk_Oscilloscope_Record;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	<b>Channel</b> 
: Channel_Number<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; 
	<font color="#0000FF">return</font> UTF8_String;</tt></p>
</blockquote>
<p>This function returns the suffix added to the time value shown in the tooltip 
when the mouse is hovering over a channel. Constraint_Error is propagated when 
there is no channel with the number <b>Channel</b>. The suffix text is set by 
the procedure <a href="#Gtk.Oscilloscope.Set_Time_Tooltip_Suffix">
Set_Time_Tooltip_Suffix</a>.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Get_To"></a>function</font> Get_To<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; :
<font color="#0000FF">not null access constant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font>&nbsp;Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Sweeper</b> 
: Sweeper_Type := Lower<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> [Ada.Calendar.]Time;</tt></p></blockquote>
<p>These functions return the
last time of the sweeper specified by the parameter <b>Sweeper</b>. The result 
is either Ada.Real_Time.Time or Ada.Calendar.Time.</p>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Gtk.Oscilloscope.Get_Tooltip_Annotation"></a>function</font> Get_Tooltip_Annotation<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
	<b>Widget</b>&nbsp; :
<font color="#0000FF">not null access constant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font>&nbsp;Gtk_Oscilloscope_Record;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	<b>Channel</b> 
: Channel_Number<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; 
	<font color="#0000FF">return</font> UTF8_String;</tt></p>
</blockquote>
<p>This function returns the text introducing the channel specified by <b>
Channel</b> in the tooltip text shown when the mouse hovers over the channel 
curve. Constraint_Error is propagated when 
there is no channel with the number <b>Channel</b>. The text is set by the 
procedure <a href="#Gtk.Oscilloscope.Set_Tooltip_Annotation">
Set_Tooltip_Annotation</a>.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Get_Undo_Stub"></a>function</font> Get_Undo_Stub<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;:
<font color="#0000FF">not null access </font>Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Depth</b>&nbsp; 
: Positive := <font color="#800000">1</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p></blockquote>
<p>This function returns the name of a stub on the undo stack. The topmost stub 
has the depth 1. End_Error is propagated when there is no such stub. Subs are 
pushed using the procedure <a href="#Gtk.Oscilloscope.Push_Stub">Push_Stub</a>.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Get_Value"></a>function</font> Get_Value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> <font color="#0000FF">constant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font>&nbsp;Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Amplifier</b> 
: Amplifier_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Y</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: GInt<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> GDouble;<br>
<font color="#0000FF">function</font> Get_Value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font> <font color="#0000FF">constant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font>Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Group</b>&nbsp; 
: Group_Number;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Y </b>&nbsp;&nbsp;&nbsp;&nbsp; 
: GInt<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> GDouble;</tt></p></blockquote>
<p>These functions return the value on the vertical axis specified by the 
parameter <b>Amplifier</b> or <b>Group</b>, corresponding to the vertical 
coordinate <b>Y </b>(relative to the widget). Constraint_Error is propagated when no group is associated with <b>Amplifier</b>, 
or when <b>Group</b> does not specify an existing group.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Get_Values_Axis"></a>function</font> Get_Values_Axis<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">not null access constant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font>&nbsp;Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Amplifier</b> 
: Amplifier_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p></blockquote>
<p>This functions returns <i><font color="#800000">true</font></i> if the axis 
specified by the parameter <b>Amplifier</b> is visible.</p>
	<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Oscilloscope.Get_Values_Axis_Annotation"></a>function</font> 
Get_Values_Axis_Annotation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">not null access constant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font>&nbsp;Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Amplifier</b> 
: Amplifier_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> <font color="#0000FF">access</font> 
Graph_Paper_Annotation_Layer'Class;</tt></p></blockquote>
<p>This functions returns the
<a href="#Gtk.Layered.Graph_Paper_Annotation.Graph_Paper_Annotation_Layer">
annotation</a> of the axis specified by the parameter <b>
Amplifier</b>. The result is <font color="#0000FF">null</font> when no 
annotation is used.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Get_Values_Axis_Width">
</a>function</font> Get_Values_Axis_Width<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">not null access constant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font>&nbsp;Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Amplifier</b> 
: Amplifier_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Natural;</tt></p></blockquote>
<p>This functions returns width of the axis specified by the parameter <b>
Amplifier</b>, when the axis is visible.</p>
	<blockquote>
<p><tt><font color="#0000FF">
<a name="Gtk.Oscilloscope.Get_Values_Horizontal_Alignment"></a>function</font> Get_Values_Horizontal_Alignment<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">not null access constant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font>&nbsp;Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Amplifier</b> 
: Amplifier_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Alignment;</tt></p></blockquote>
<p>This functions returns the horizontal alignment of the texts shown at the 
vertical scale specified by the parameter <b>Amplifier</b>.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Get_Values_Grid"></a>function</font> Get_Values_Grid<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">not null access constant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font>&nbsp;Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Amplifier</b> 
: Amplifier_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p></blockquote>
<p>This functions returns <i><font color="#800000">true</font></i> if the 
vertical scale specified by the parameter <b>Amplifier</b> has grid visible. The 
grid is a set of horizontal lines drawn at the vertical scale ticks.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Get_Values_Scale"></a>function</font> Get_Values_Scale<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp; :
<font color="#0000FF">not null access constant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font>&nbsp;Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Amplifier</b> 
: Amplifier_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p></blockquote>
<p>This function returns the visibility status of the time scale specified by 
the parameter <b>Amplifier</b>. See <a href="#Gtk.Oscilloscope.Set_Values_Scale">Set_Values_Scale</a>.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Get_Values_Text_Angle"></a>function</font> Get_Values_Text_Angle<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp; :
<font color="#0000FF">not null access constant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font>&nbsp;Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Amplifier</b> 
: Amplifier_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> GDouble;</tt></p></blockquote>
<p>This function returns the angle between the x-axis of the cairo coordinates 
and the texts at the axis specified by the parameter <b>Amplifier</b>.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Get_Values_Text_Color">
</a>function</font> Get_Values_Text_Color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp; :
<font color="#0000FF">not null access constant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font>&nbsp;Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Amplifier</b> 
: Amplifier_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Gdk_Color;</tt></p></blockquote>
<p>This function returns the color of the texts at the axis specified by 
the parameter <b>Amplifier</b>.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Get_Values_Text_Face"></a>function</font> Get_Values_Text_Face<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp; :
<font color="#0000FF">not null access constant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font>&nbsp;Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Amplifier</b> 
: Amplifier_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Pango_Cairo_Font;</tt></p></blockquote>
<p>This function returns the font face used for the texts at the axis 
specified by the parameter <b>Amplifier</b>.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Get_Values_Text_Height">
</a>function</font> Get_Values_Text_Height<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp; :
<font color="#0000FF">not null access constant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font>&nbsp;Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Amplifier</b> 
: Amplifier_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> GDouble;</tt></p></blockquote>
<p>This function returns the height of the texts at the axis specified by 
the parameter <b>Amplifier</b>.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Get_Values_Text_Stretch">
</a>function</font> Get_Values_Text_Stretch<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp; :
<font color="#0000FF">not null access constant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font>&nbsp;Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Amplifier</b> 
: Amplifier_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> GDouble;</tt></p></blockquote>
<p>This function returns the stretch of the texts at the axis specified by 
the parameter <b>Amplifier</b>.</p>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Gtk.Oscilloscope.Get_Values_Tooltip_Suffix"></a>function</font> Get_Values_Tooltip_Suffix<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
	<b>Widget</b>&nbsp; :
<font color="#0000FF">not null access constant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font>Gtk_Oscilloscope_Record;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
	<b>Channel</b> 
: Channel_Number<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; 
	<font color="#0000FF">return</font> UTF8_String;</tt></p>
</blockquote>
<p>This function returns the suffix added to the value shown in the tooltip 
when the mouse is hovering over a channel. Constraint_Error is propagated when 
there is no channel with the number <b>Channel</b>. The suffix text is set by 
the procedure <a href="#Gtk.Oscilloscope.Set_Values_Tooltip_Suffix">
Set_Values_Tooltip_Suffix</a>.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Get_Waveform"></a>function</font> Get_Waveform<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; :
<font color="#0000FF">not null access constant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font>Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Channel</b> 
: Channel_Number<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return not null access</font> Waveform_Layer;</tt></p></blockquote>
<p>This function returns the waveform of <b>Channel</b>. Constraint_Error 
is propagated when <b>Channel</b> does not specify an existing 
channel.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Get_X"></a>function</font> Get_X<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; :
<font color="#0000FF">not null access constant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font>&nbsp;Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Sweeper</b> 
: Sweeper_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Stamp</b>&nbsp;&nbsp; 
: [Ada.Calendar.]Time;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Crop</b>&nbsp;&nbsp;&nbsp; 
: Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> GInt;</tt></p></blockquote>
<p>These functions return the horizontal coordinate corresponding to the time <b>
Stamp</b> according to the axis specified by the parameter <b>Sweeper</b>. The 
time can be either Ada.Real_Time.Time or Ada.Calendar.Time. The result is 
relative to the widget coordinates. When <b>Crop</b> is <i>
<font color="#800000">true</font></i>, the result is cropped to the
<a href="#Gtk.Oscilloscope.Get_Box">waveform's box</a>. When <b>Crop</b> is <i>
<font color="#800000">false</font></i> an the result is not in the
<a href="#Gtk.Oscilloscope.Get_Box">waveform's box</a> Layout_Error is 
propagated.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Get_Y"></a>function</font> Get_Y<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">not null access constant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font>&nbsp;Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Amplifier</b> 
: Amplifier_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Value</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Crop</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> GInt;<br>
<font color="#0000FF">function</font> Get_Y<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access constant<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font>&nbsp;Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Group</b>&nbsp; 
: Group_Number;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Value</b>&nbsp; 
: GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Crop</b>&nbsp;&nbsp; 
: Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> GInt;</tt></p></blockquote>
<p>These functions return the vertical coordinate corresponding to <b>Value</b> 
at the vertical axis specified by the parameter <b>Amplifier</b> or <b>Group</b>. 
The result is relative to the widget coordinates. When <b>Crop</b> is <i>
<font color="#800000">true</font></i>, the result is cropped to the
<a href="#Gtk.Oscilloscope.Get_Box">waveform's box</a>. When <b>Crop</b> is <i>
<font color="#800000">false</font></i> an the result is not in the
<a href="#Gtk.Oscilloscope.Get_Box">waveform's box</a> Layout_Error is 
propagated. Constraint_Error is propagated when no group is associated with <b>Amplifier</b>, 
or when <b>Group</b> does not specify an existing group.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Gtk_New"></a>procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Gtk_Oscilloscope;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Lower_Sweeper</b>&nbsp; : <font color="#0000FF">access</font> 
Gtk_Waveform_Sweeper_Record'Class := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Upper_Sweeper</b>&nbsp; : <font color="#0000FF">access</font> 
Gtk_Waveform_Sweeper_Record'Class := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Refresh_Engine</b> : <font color="#0000FF">not null access</font> 
Layered_Refresh_Engine;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Background</b>&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Color := RGB (<font color="#800000">1.0</font>,
<font color="#800000">1.0</font>, <font color="#800000">1.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Buffer_Size</b>&nbsp;&nbsp;&nbsp; : Positive&nbsp; := <font color="#800000">1024</font> 
* <font color="#800000">60</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Max_Channels</b>&nbsp;&nbsp; : Channel_Number := <font color="#800000">64</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Gtk_Oscilloscope;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Lower_Sweeper</b>&nbsp; : <font color="#0000FF">access</font> 
Gtk_Waveform_Sweeper_Record'Class := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Upper_Sweeper</b>&nbsp; : <font color="#0000FF">access</font> 
Gtk_Waveform_Sweeper_Record'Class := <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Refresh_Period</b> : Duration&nbsp; := <font color="#800000">0.02</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Background</b>&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Color := RGB (<font color="#800000">1.0</font>,
<font color="#800000">1.0</font>, <font color="#800000">1.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Buffer_Size</b>&nbsp;&nbsp;&nbsp; : Positive&nbsp; := <font color="#800000">1024</font> 
* <font color="#800000">60</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Max_Channels</b>&nbsp;&nbsp; : Channel_Number := <font color="#800000">64</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>These functions create a new widget. The result is returned through the 
parameter <b>Widget</b>. The parameters <b>Lower_Sweeper</b> and <b>
Upper_Sweeper</b> are the <a href="#Gtk.Layered.Waveform.Waveform_Sweeper">
waveform sweepers</a> used for the lower and upper time axis correspondingly. 
When a parameter is <font color="#0000FF">null</font> a new sweeper is created. 
Several oscilloscopes can share a sweeper. For example, they can be stacked up 
being synchronously swept. The parameter&nbsp; <b>Refresh_Engine</b> specifies 
the <a href="#Gtk.Layered.Refresh_Engine">refresh engine</a> updating the 
widget. Alternatively the parameter <b>Refresh_Period</b> is the update period 
of the engine newly created for the widget. The parameter <b>Background</b> is 
the color of the box where the waveforms are drawn. The parameter <b>Buffer_Size</b> 
is the default size of the source data buffers (in items) used for the channels 
when created implicitly (see <a href="#Gtk.Oscilloscope.Add_Channel">Add_Channel</a>). 
The parameter <b>Max_Channels</b> specifies the maximal number of channels.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Has_Group"></a>function</font> Has_Group<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">not null access constant</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Amplifier</b> 
: Amplifier_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p></blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if <b>Amplifier</b> 
has a group of channels assigned to it.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Initialize"></a>procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Lower_Sweeper</b>&nbsp; : <font color="#0000FF">access</font> 
Gtk_Waveform_Sweeper_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Upper_Sweeper</b>&nbsp; : <font color="#0000FF">access</font> 
Gtk_Waveform_Sweeper_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Refresh_Engine</b> : <font color="#0000FF">not null access</font> 
Layered_Refresh_Engine;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Background</b>&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Color;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Buffer_Size</b>&nbsp;&nbsp;&nbsp; : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Lower_Sweeper</b>&nbsp; : <font color="#0000FF">access</font> 
Gtk_Waveform_Sweeper_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Upper_Sweeper</b>&nbsp; : <font color="#0000FF">access</font> 
Gtk_Waveform_Sweeper_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Refresh_Period</b> : Duration;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Background</b>&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Color;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Buffer_Size</b>&nbsp;&nbsp;&nbsp; : Positive<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>These procedures initialize a newly allocated object. One of them shall be 
called from the Initialize of a derived type in the course of the widget 
initialization.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Is_Visible"></a>function</font> Is_Visible<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; :
<font color="#0000FF">not null access constant</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Channel</b> 
: Channel_Number<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Boolean;</tt></p></blockquote>
<p>This function returns <i><font color="#800000">true</font></i> if <b>Channel</b> 
refers to a visible channel.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Move_Channel"></a>procedure</font> Move_Channel<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Old_Number</b> : Channel_Number;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
New_Number</b> : Channel_Number<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the channel number <b>Old_Number</b> to <b>New_Number</b>. 
This operation also changes the numbers of channels between <b>Old_Number</b> 
and <b>New_Number</b>. Constraint_Error is propagated when either number does 
not specify an existing channel.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.On_Selection"></a>procedure</font> 
On_Selection<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Selected</b> : Cairo_Box<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">is null</font>;</tt></p></blockquote>
<p>This procedure is called upon selection of a rectangular area in the 
oscilloscope when the <a href="#Gtk.Oscilloscope.Selection_Action">selection 
mode</a> is set on <i>User_Action</i>. The parameter <b>Selected</b> specifies 
the selected rectangle. The default implementation does nothing. It can 
overridden to provide user-defined behavior on selection.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Push_Stub"></a>procedure</font> 
Push_Stub<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> 
: <font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Name </b>&nbsp; : UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>The procedure pushes a stub with the name <b>Name</b> onto the the undo 
stack. All actions after the stub can be reverted using a pattern that matches
<b>Name</b> as the parameter <b>Till</b> in <a href="#Gtk.Oscilloscope.Undo">
Undo</a>.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Push_Undo"></a>procedure</font> Push_Undo<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> 
: <font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
State</b>&nbsp; : Zooming_State := Values_Zooming <font color="#0000FF">or</font> 
Time_Zooming<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>The procedure pushes onto the the undo stack the data needed to restore the 
current zooming state as specified by the parameter <b>State</b>. The state to 
save is described by the type:</p>
	<blockquote>
<p><tt><font color="#0000FF">type</font> Zooming_State <font color="#0000FF">is 
mod</font> <font color="#800000">2</font>**<font color="#800000">2</font>;<br>
Values_Zooming : <font color="#0000FF">constant</font> Zooming_State :=
<font color="#800000">2</font>**<font color="#800000">0</font>;<br>
Time_Zooming&nbsp;&nbsp; : <font color="#0000FF">constant</font> Zooming_State 
:= <font color="#800000">2</font>**<font color="#800000">1</font>;</tt></p></blockquote>
<p>The values of the type are combined using <font color="#0000FF">or</font>. 
When used to keep on track of user actions, the redo stack is also erased using
<a href="#Gtk.Oscilloscope.Erase_Redo_Stack">Erase_Redo_Stack</a>.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Redo"></a>procedure</font> Redo<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Widget</b> 
: <font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Till</b>&nbsp;&nbsp; 
: UTF8_String := &quot;&quot;;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Stub</b>&nbsp;&nbsp; 
: UTF8_String := &quot;&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>When <b>Till </b>is empty the procedure repeats one reverted user action of zooming stored on the top 
of the redo stack. The top of the redo stack is popped. The information to 
revert this action is pushed onto the undo stack. When <b>Till</b> is not empty 
the procedure repeats all actions until a stub action with the name matched by 
the wildcard pattern contained by <b>Till</b>. The parameter <b>Stub</b> is the 
name of a stub to push onto the undo stack when <b>Till</b> is not empty. This 
allows to undo all actions re-done by the operation by specifying the name of 
this stub.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Set_Auto_Scaling"></a>procedure</font> Set_Auto_Scaling<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Amplifier</b> : Amplifier_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Auto</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
<font color="#0000FF">procedure</font> Set_Auto_Scaling<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Group</b>&nbsp; : Group_Number;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Auto</b>&nbsp;&nbsp; 
: Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure set the <a href="#Gtk.Layered.Waveform.Amplifier.Set_Scaling">
automatic scaling</a> for the group specified either by the axis <b>Amplifier</b> 
assigned to it or directly by the number <b>Group</b>. Constraint_Error is 
propagated when <b>Group</b> does not specify an existing group, or <b>Amplifier</b> 
has no group assigned.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Set_Default_Face"></a>procedure</font> Set_Default_Face<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;: <font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Face
</b>&nbsp; : Pango_Cairo_Font<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure sets the face of the font to use by default when an annotation 
is added to an axis.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Set_Enabled_Dropdown_Items"></a>procedure</font> 
Set_Enabled_Dropdown_Items<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;: <font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Items</b>&nbsp; : Dropdown_Items<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure sets menu item enabled to show in the drop-down menu. The 
items list is an or-combination of <a href="#Gtk.Oscilloscope.Dropdown_Items">Dropdown_Items</a> 
constants.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Set_Extrapolation_Mode<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; : <font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Channel</b> : Channel_Number;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Left</b>&nbsp;&nbsp;&nbsp; 
: Boolean;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Right</b>&nbsp;&nbsp; : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure sets the extrapolation mode of the channel <b>Channel</b>. The 
parameters <b>Left</b> and <b>Right</b> determine the extrapolation to the left 
and to the right correspondingly. Constraint_Error is propagated when <b>Channel</b> 
does not specify a channel.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Set_Frequency"></a>procedure</font> Set_Frequency<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sweeper</b> : Sweeper_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Frames</b>&nbsp; : GDouble<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the sweeping frequency in frames (pages) per second. 
The parameter <b>Sweeper</b> is the axis of which sweeper has to be altered. It 
is alternative to <a href="#Gtk.Oscilloscope.Set_Page_Span">Set_Page_Span</a>, 
which explicitly sets the page span.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Set_Frozen"></a>procedure</font> 
Set_Frozen<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sweeper</b> : Sweeper_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Frozen</b>&nbsp; : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the freezing state of the sweeper associated with the 
axis <b>Sweeper</b>. When frozen the axis maintains the times at the left and 
right margins of the waveform box. so that the waveform stand still.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Set_Grid_Colors"></a>procedure</font> Set_Grid_Colors<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">not null access </font>Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Major_Color</b> : Gdk_Color;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Minor_Color</b> : Gdk_Color<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure sets the colors of the lines corresponding to the major and 
minor ticks of the scale when the graph paper is shown.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Set_Group"></a>procedure</font> Set_Group<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Amplifier</b> : Amplifier_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Group</b>&nbsp;&nbsp;&nbsp;&nbsp; : Group_Number<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure assigns the group <b>Group</b> to the <b>Amplifier</b> axis. 
An axis can be assigned to only one group. The previously assigned group is 
detached from the axis. Constraint_Error is propagated when <b>Group</b> does 
not specify an existing group.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Set_Interpolation_Mode">
</a>procedure</font> Set_Interpolation_Mode<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Channel</b> : Channel_Number;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Mode</b>&nbsp;&nbsp;&nbsp; 
: Interpolation_Mode<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the <a href="#Gtk.Layered.Interpolation_Mode">
interpolation mode</a> of the channel <b>Channel</b> to <b>Mode</b>. 
Constraint_Error is propagated when <b>Channel</b> does not specify an existing 
channel.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Set_Manual_Sweep"></a>procedure</font> Set_Manual_Sweep<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; :
<font color="#0000FF">not null access constant</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Enable</b><font color="#0000FF">&nbsp; :</font> Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure enables (when <b>Enable</b> is <i><font color="#800000">true</font></i>) 
or disables (otherwise) the menu items allowing the user to freeze / release the 
oscilloscope's sweeper.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Set_Page_Span"></a>procedure</font> 
Set_Page_Span<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sweeper</b>&nbsp;&nbsp; : Sweeper_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Page_Span</b> : Duration<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the duration of the page to <b>Page_Span</b>. The 
parameter <b>Sweeper</b> is the axis of which sweeper has to be altered.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Set_Preferred_Method">
</a>procedure</font> Set_Preferred_Method<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Method</b> : Waveform_Drawing_Method<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure sets the
<a href="#Gtk.Layered.Waveform.Waveform_Drawing_Method">preferred drawing method</a> 
for the waveforms of <b>Widget</b>.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Set_Release_To_Latest">
</a>procedure</font> Set_Release_To_Latest<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Enable</b> : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure specifies what happens when a frozen sweeper is released by 
the user. When <b>Enable</b> is <i><font color="#800000">false</font></i>, which 
is the default, the sweeper position is not changed. When <b>Enable</b> is
<font color="#800000"><i>true</i></font> the sweeper is moved to the latest 
time. The current behavior is returned by
<a href="#Gtk.Oscilloscope.Get_Release_To_Latest">Get_Release_To_Latest</a>.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Set_Selection_Mode"></a>procedure</font> 
Set_Selection_Mode<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Action</b> : Selection_Action<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the oscilloscope's behavior when a rectangular area is 
selected using the right mouse button. The parameter <b>Action</b> specifies the
<a href="#Gtk.Oscilloscope.Selection_Action">selection action</a> to undertake.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Set_Snapshot_File"></a>procedure</font> 
Set_Snapshot_File<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Format</b> : Snapshot_Format := No_Snapshot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Name</b>&nbsp;&nbsp; 
: String := &quot;&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure sets the
format and the name of the file to store oscilloscope's contents when the user 
chooses the corresponding menu item. The parameter <b>Format</b> has the type:</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Snapshot_Format <font color="#0000FF">
is</font> (No_Snapshot, PDF_Snapshot, SVG_Snapshot);</tt></p></blockquote>
<p>When <i>No_Snapshot</i> is selected or <b>Name</b> is empty, no menu item 
appears.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Set_Superscript"></a>procedure</font> Set_Superscript<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Superscript</b>&nbsp;: Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes usage of superscript when formatting values of the axis 
specified by the parameter <b>Amplifier</b>. When <i><font color="#800000">true</font></i> values are formatted 
using superscript digits, e.g. as 
123&#903;10<sup>6</sup>. Otherwise they are formatted as 
123E6.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Set_Time"></a>procedure</font> Set_Time<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sweeper</b> : Sweeper_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Stamp</b>&nbsp;&nbsp; : [Ada.Calendar.]Time<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure set the time to <b>Stamp</b> at the right margin of the
<a href="#Gtk.Oscilloscope.Get_Box">waveform's box</a> for the axis specified by 
the parameter <b>Sweeper</b>. The time can be specified&nbsp; either as 
Ada.Real_Time.Time or Ada.Calendar.Time. It usually makes sense only when the 
axis is frozen (see <a href="#Gtk.Oscilloscope.Set_Frozen">Set_Frozen</a>), for 
manual scrolling the waveforms attached to it.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Set_Time_Axis"></a>procedure</font> Set_Time_Axis<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sweeper</b> : Sweeper_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Visible</b> : Boolean;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
As_Time</b> : Boolean := True<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the visibility status of the axis specified by the 
parameter <b>Sweeper</b>. The axis contains the annotation texts drawn at the 
axis ticks. The texts represent in human-readable form the time corresponding to 
the scale ticks when <b>As_Time</b> is <font color="#800000"><i>true</i></font>. 
Otherwise, it is rendered as a plain number. When all visible sweepers are 
rendered as numbers, the right button click pop-up menu does not show the <i>
Latest data</i> item.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Set_Time_Axis_Height"></a>procedure</font> Set_Time_Axis_Height<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sweeper</b> : Sweeper_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Height </b>&nbsp;: Natural<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure sets the height of the time axis specified by the parameter <b>
Sweeper</b> when the axis is visible. </p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Set_Time_Grid"></a>procedure</font> Set_Time_Grid<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sweeper</b> : Sweeper_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Visible</b> : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the visibility status of the grid for the axis 
specified by the parameter <b>Sweeper</b>. The grid is a set of vertical lines 
drawn at the axis ticks through the <a href="#Gtk.Oscilloscope.Get_Box">
waveform's box</a>.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Set_Time_Scale"></a>procedure</font> Set_Time_Scale<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sweeper</b> : Sweeper_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Visible</b> : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the visibility status of the scale at the axis 
specified by the parameter <b>Sweeper</b>. The scale is used to manually move 
the oscilloscope's contents connected to the axis. When set the invisible, the 
scale is never shown. When set visible it is shown when the corresponding 
sweeper is frozen (see <a href="#Gtk.Oscilloscope.Set_Frozen">Set_Frozen</a>). 
In running mode scale is not shown.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Set_Time_Text_Alignment">
</a>procedure</font> Set_Time_Text_Alignment<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sweeper</b>&nbsp;&nbsp;&nbsp; : Sweeper_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Horizontal</b> : Alignment;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Vertical</b>&nbsp;&nbsp; : Vertical_Alignment<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the horizontal and vertical alignment of the texts 
drawn at the scale specified by the parameter <b>Sweeper</b>, when the scale is 
visible.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Set_Time_Text_Font"></a>procedure</font> Set_Time_Text_Font<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sweeper</b> : Sweeper_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Face</b>&nbsp;&nbsp;&nbsp; 
: Pango_Cairo_Font;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Height</b>&nbsp; : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Stretch</b> : GDouble&nbsp;&nbsp;&nbsp;:= <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Color</b>&nbsp;&nbsp; : Gdk_Color := RGB (<font color="#800000">0.0</font>,
<font color="#800000">0.0</font>, <font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Angle</b>&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;:= <font color="#800000">0.0</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes parameters used for drawing the texts at the scale 
specified by the parameter <b>Sweeper</b>. The parameter <b>Face</b> is the font 
face. <b>Height</b> is the font height. <b>Stretch</b> is the text stretch. <b>
Color</b> is the color. <b>Angle</b> is the angle between the annotation text 
and the cairo's <i>x</i>-coordinate.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Set_Time_Tooltip"></a>procedure</font> Set_Time_Tooltip<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Visible</b> : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the behaviour of the widget tooltip. When <b>Visible</b> 
is <i><font color="#800000">true</font></i>, the tooltip contains the time 
specification for the values under the mouse cursor. When <b>Visible</b> is <i>
<font color="#800000">false</font></i>, only the value is indicated.</p>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Gtk.Oscilloscope.Set_Time_Tooltip_Suffix"></a>
	procedure</font> Set_Time_Tooltip_Suffix<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; 
	: <font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Channel</b> : Channel_Number;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Suffix</b>&nbsp; : UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p align="left">This procedure sets the suffix added to the channel time value shown in the 
tooltip when the mouse is hovering over the channel curve. Constraint_Error is propagated when 
there is no channel with the number <b>Channel</b>. The current suffix text is 
returned by the function <a href="#Gtk.Oscilloscope.Get_Time_Tooltip_Suffix">
Get_Time_Tooltip_Suffix</a>.</p>
<blockquote>
	<p><tt><font color="#0000FF">
	<a name="Gtk.Oscilloscope.Set_Tooltip_Annotation"></a>
	procedure</font> Set_Tooltip_Annotation<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; 
	: <font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Channel</b> : Channel_Number;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Text&nbsp;
	</b>&nbsp; : UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets the text introducing the channel specified by <b>Channel</b> 
in the tooltip text shown when the mouse hovers over the channel curve. 
Constraint_Error is propagated when there is no channel with the number <b>
Channel</b>. The current text is returned by
<a href="#Gtk.Oscilloscope.Get_Tooltip_Annotation">Get_Tooltip_Annotation</a>.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Set_Values_Alignment">
</a>procedure</font> Set_Values_Alignment<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Amplifier</b>&nbsp; : Amplifier_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Horizontal</b> : Alignment;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Vertical</b>&nbsp;&nbsp; : Vertical_Alignment<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the horizontal and vertical alignments of the texts at 
the vertical scale specified by the parameter <b>Amplifier</b>.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Set_Values_Axis"></a>procedure</font> Set_Values_Axis<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Amplifier</b> : Amplifier_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Visible</b>&nbsp;&nbsp; : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the visibility status of the axis specified by the 
parameter <b>Amplifier</b>. The axis contains the annotation texts drawn at the 
axis ticks. The texts represent in human-readable form the time corresponding to 
the scale ticks. Constraint_Error is propagated when <b>Amplifier</b> 
has no channel group assigned to it.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Set_Values_Axis_Height">
</a>procedure</font> Set_Values_Axis_Height<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sweeper</b> : Sweeper_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Height</b>&nbsp; : Natural<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure sets the height of the horizontal axis specified by the parameter <b>Sweeper</b>, when the axis is visible. The axis 
height influences the
<a href="#Gtk.Oscilloscope.Get_Box">waveform's box</a>, computed as the widget 
width minus the height of visible top and/or bottom axes.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Set_Values_Axis_Width">
</a>procedure</font> Set_Values_Axis_Width<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Amplifier</b> : Amplifier_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Width</b>&nbsp;&nbsp;&nbsp;&nbsp; : Natural<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure sets the width of the vertical axis specified by the parameter
<b>Amplifier</b>, when the axis is visible. The axis width influences the
<a href="#Gtk.Oscilloscope.Get_Box">waveform's box</a>, computed as the widget 
width minus the widths of visible left and/or right axes.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Set_Values_Grid"></a>procedure</font> Set_Values_Grid<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Amplifier</b> : Amplifier_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Visible</b>&nbsp;&nbsp; : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the visibility status of the grid for the axis 
specified by the parameter <b>Amplifier</b>. The grid is a set of horizontal 
lines drawn at the axis ticks through the <a href="#Gtk.Oscilloscope.Get_Box">
waveform's box</a>. Constraint_Error is propagated when no group is assigned to 
the axis.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Set_Values_Scale"></a>procedure</font> Set_Values_Scale<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp; : <font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Amplifier</b> : Amplifier_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Visible&nbsp; </b> &nbsp;: Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the visibility status of the scale at the axis 
specified by the parameter <b>Amplifier</b>. The scale is used to manually move 
the oscilloscope's contents connected to the axis. When set the invisible, the 
scale is never shown. When set visible it is shown when the corresponding 
amplifier is in manual scaling mode. In the automatic mode the scale is not shown 
(see <a href="#Gtk.Oscilloscope.Set_Auto_Scaling">Set_Auto_Scaling</a>).</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Set_Values_Text_Font"></a>procedure</font> Set_Values_Text_Font<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp; : <font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Amplifier</b> : Amplifier_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Face</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Pango_Cairo_Font;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Height</b>&nbsp;&nbsp;&nbsp; : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Stretch</b>&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;:= <font color="#800000">1.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Color</b>&nbsp;&nbsp;&nbsp;&nbsp; : Gdk_Color := RGB (<font color="#800000">0.0</font>,
<font color="#800000">0.0</font>, <font color="#800000">0.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Angle</b>&nbsp;&nbsp;&nbsp;&nbsp; : GDouble&nbsp;&nbsp;&nbsp;:= <font color="#800000">0.0</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes parameters used for drawing the texts at the vertical 
axis 
specified by the parameter <b>Amplifier</b>. The parameter <b>Face</b> is the font 
face. <b>Height</b> is the font height. <b>Stretch</b> is the text stretch. <b>
Color</b> is the color. <b>Angle</b> is the angle between the annotation text 
and the cairo's <i>x</i>-coordinate.</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Set_Values_Tooltip_Suffix"></a>
	procedure</font> Set_Values_Tooltip_Suffix<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; 
	: <font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Channel</b> : Channel_Number;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
	Suffix</b>&nbsp; : UTF8_String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p>
</blockquote>
<p>This procedure sets the suffix added to the channel value shown in the 
tooltip when the mouse is hovering over the channel curve. Constraint_Error is propagated when 
there is no channel with the number <b>Channel</b>. The current suffix text is 
returned by the function <a href="#Gtk.Oscilloscope.Get_Values_Tooltip_Suffix">
Get_Values_Tooltip_Suffix</a>.</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Set_Visible"></a>procedure</font> Set_Visible<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Channel</b> : Channel_Number;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Visible</b> : Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure changes the channel visibility status. When the channel is 
invisible, its waveform is not drawn. Constraint_Error is propagated when <b>
Channel</b> does not specify an existing channel.</p>
	<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Undo"></a>procedure</font> Undo<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>&nbsp; Widget</b> 
: <font color="#0000FF">not null access</font> Gtk_Oscilloscope_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Till</b>&nbsp;&nbsp; 
: UTF8_String := &quot;&quot;;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Stub</b>&nbsp;&nbsp; 
: UTF8_String := &quot;&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>When <b>Till</b> is empty the procedure reverts one user action caused a change of zooming stored on 
the top of the undo stack. The top of the undo stack is popped. The information 
to revert this action is pushed onto the redo stack. When <b>Till</b> is not 
empty the procedure reverts all actions until a stub action with the name 
matched by the wildcard pattern contained by <b>Till</b>. A stub pushed onto the 
undo stack using the procedure <a href="#Gtk.Oscilloscope.Push_Stub">Push_Stub</a>. 
The parameter <b>Stub</b> is the name of a stub to push onto the redo stack when
<b>Till</b> is not empty. This allows to redo all actions undone by the 
operation by specifying the name of this stub.</p>
<h4><a name="12.1.6"></a>12.1.6. Signals</h4>
<p>The oscilloscope widget emits the following signals:</p>
<TABLE border="5" cellpadding="3" cellspacing="0">
  <TR>
    <TD bgcolor="#008080" rowspan="2"><font color="#FFFFFF"><b>Signal</b></font></TD>
    <TD bgcolor="#008080" colspan="3" align="center"><font color="#FFFFFF"><b>Parameters</b></font></TD>
    <TD bgcolor="#008080" rowspan="2"><font color="#FFFFFF"><b>When emitted</b></font></TD>
  </TR>
  <TR>
    <TD bgcolor="#008080"><font color="#FFFFFF"><b>1</b></font></TD>
    <TD bgcolor="#008080"><font color="#FFFFFF"><b>2</b></font></TD>
    <TD bgcolor="#008080"><font color="#FFFFFF"><b>3</b></font></TD>
  </TR>
  <TR>
    <TD valign="top"><i>autoscaling-changed</i></TD>
    <TD valign="top">Group number<br>
	GUInt</TD>
    <TD valign="top" bgcolor="#C0C0C0">&nbsp;</TD>
    <TD valign="top" bgcolor="#C0C0C0">&nbsp;</TD>
    <TD valign="top">The scaling mode of the group's amplifier has been changed</TD>
  </TR>
  <tr>
    <TD valign="top"><i>channel-added</i></TD>
    <TD valign="top">Channel number<br>
	GUInt</TD>
    <TD valign="top" bgcolor="#C0C0C0">&nbsp;</TD>
    <TD valign="top" bgcolor="#C0C0C0">&nbsp;</TD>
    <TD valign="top">The channel has been added</TD>
  </tr>
	<tr>
    <TD valign="top"><i>channel-deleted</i></TD>
    <TD valign="top">Channel number<br>
	GUInt</TD>
    <TD valign="top" bgcolor="#C0C0C0">&nbsp;</TD>
    <TD valign="top" bgcolor="#C0C0C0">&nbsp;</TD>
    <TD valign="top">The channel has been deleted</TD>
  </tr>
	<tr>
    <TD valign="top"><i>extrapolation-changed</i></TD>
    <TD valign="top">Channel number <br>
	GUInt</TD>
    <TD valign="top" bgcolor="#C0C0C0">&nbsp;</TD>
    <TD valign="top" bgcolor="#C0C0C0">&nbsp;</TD>
    <TD valign="top">The channel extrapolation mode has been changed</TD>
  </tr>
	<tr>
    <TD valign="top"><i>freezing-changed</i></TD>
    <TD valign="top">Sweeper (Sweeper_Type'Pos)<br>
	GUInt</TD>
    <TD valign="top" bgcolor="#C0C0C0">&nbsp;</TD>
    <TD valign="top" bgcolor="#C0C0C0">&nbsp;</TD>
    <TD valign="top">Freezing mode of the sweeper has been changed</TD>
  </tr>
	<tr>
    <TD valign="top"><i>group-changed</i></TD>
    <TD valign="top">Amplifier (Amplifier_Type'Pos)<br>
	GUInt</TD>
    <TD valign="top" bgcolor="#C0C0C0">&nbsp;</TD>
    <TD valign="top" bgcolor="#C0C0C0">&nbsp;</TD>
    <TD valign="top">The axis' group has been changed</TD>
  </tr>
	<tr>
    <TD valign="top"><i>interpolation-changed</i></TD>
    <TD valign="top">Channel number <br>
	GUInt</TD>
    <TD valign="top" bgcolor="#C0C0C0">&nbsp;</TD>
    <TD valign="top" bgcolor="#C0C0C0">&nbsp;</TD>
    <TD valign="top">The channel interpolation mode has been changed</TD>
  </tr>
  <TR>
    <TD valign="top"><i>offset-changed</i></TD>
    <TD valign="top">Sweeper (Sweeper_Type'Pos)<br>
	GUInt</TD>
    <TD valign="top" bgcolor="#C0C0C0">&nbsp;</TD>
    <TD valign="top" bgcolor="#C0C0C0">&nbsp;</TD>
    <TD valign="top">The offset of the sweeper has been changed</TD>
  </TR>
  <tr>
    <TD valign="top"><i>position-changed</i></TD>
    <TD valign="top">
	Sweeper (Sweeper_Type'Pos)<br>
	GUInt</TD>
    <TD valign="top">
	Time at the cursor<br>
	GType_Double</TD>
    <TD valign="top">
	Duration of the selection box<br>
	GType_Double</TD>
    <TD valign="top">An operation of <a href="#selection-get-values">getting 
	values</a> was chosen in the drop-down menu when a rectangular area was selected. The width 
	is measured in seconds. The values or values differences are stored in the
	<a href="#Gtk.Oscillograph.Get_Channel_List">Get_Channel_List</a> store.</TD>
  </tr>
	<tr>
    <TD valign="top"><i>raster-mode-changed</i></TD>
    <TD valign="top">Group number<br>
	GUInt</TD>
    <TD valign="top" bgcolor="#C0C0C0">&nbsp;</TD>
    <TD valign="top" bgcolor="#C0C0C0">&nbsp;</TD>
    <TD valign="top">
	<a href="#Gtk.Layered.Waveform.Amplifier.Set_Raster_Scaling">Raster mode</a> 
	of the group's amplifier has been changed</TD>
  </tr>
	<tr>
    <TD valign="top"><i>snapshot-captured</i></TD>
    <TD valign="top">String</TD>
    <TD valign="top" bgcolor="#C0C0C0">&nbsp;</TD>
    <TD valign="top" bgcolor="#C0C0C0">&nbsp;</TD>
    <TD valign="top">The name of the snapshot file, successfully written</TD>
  </tr>
	<tr>
    <TD valign="top"><i>visibility-toggled</i></TD>
    <TD valign="top">Channel number<br>
	GUInt</TD>
    <TD valign="top" bgcolor="#C0C0C0">&nbsp;</TD>
    <TD valign="top" bgcolor="#C0C0C0">&nbsp;</TD>
    <TD valign="top">The visibility of the channel has been toggled</TD>
  </tr>
  <TR>
    <TD valign="top"><i>x-axis-toggled</i></TD>
    <TD valign="top">Sweeper (Sweeper_Type'Pos)<br>
	GUInt</TD>
    <TD valign="top" bgcolor="#C0C0C0">&nbsp;</TD>
    <TD valign="top" bgcolor="#C0C0C0">&nbsp;</TD>
    <TD valign="top">The horizontal axis visibility has been toggled</TD>
  </TR>
  <tr>
    <TD valign="top"><i>x-grid-toggled</i></TD>
    <TD valign="top">Sweeper (Sweeper_Type'Pos)<br>
	GUInt</TD>
    <TD valign="top" bgcolor="#C0C0C0">&nbsp;</TD>
    <TD valign="top" bgcolor="#C0C0C0">&nbsp;</TD>
    <TD valign="top">The visibility of the grid has been toggled</TD>
  </tr>
  <TR>
    <TD valign="top"><i>y-axis-toggled</i></TD>
    <TD valign="top">Amplifier (Amplifier_Type'Pos)<br>
	GUInt</TD>
    <TD valign="top" bgcolor="#C0C0C0">&nbsp;</TD>
    <TD valign="top" bgcolor="#C0C0C0">&nbsp;</TD>
    <TD valign="top">The vertical axis visibility has been toggled</TD>
  </TR>
  <TR>
    <TD valign="top"><i>y-grid-toggled</i></TD>
    <TD valign="top">Amplifier (Amplifier_Type'Pos)<br>
	GUInt</TD>
    <TD valign="top" bgcolor="#C0C0C0">&nbsp;</TD>
    <TD valign="top" bgcolor="#C0C0C0">&nbsp;</TD>
    <TD valign="top">The visibility of the grid has been toggled</TD>
  </TR>
  </TABLE>
<h4><a name="12.1.7"></a>12.1.7. Selection and drop-down menu</h4>
<p>The widget supports selection and various operations on the selected area of 
the widget. The selection starts when the left mouse button is pressed. Moving 
the mouse causes a ribbon box to appear. When the button is released the 
drop-down menu provides the list of operations:</p>
<blockquote>
	<p>
	<img border="0" src="oscilloscope-selection.png" width="380" height="354" alt="oscilloscope selection"></p>
</blockquote>
<ul>
	<li><i>Zoom in</i> makes the selected rectangle the new <a href="#Gtk.Oscilloscope.Get_Box">
waveform's box</a>;</li>
	<li><i>Zoom in time</i> does zooming only for the time axes;</li>
	<li><i>Zoom in values</i> does zooming only for the vertical axes;</li>
	<li><i>Zoom out</i> makes the <a href="#Gtk.Oscilloscope.Get_Box">
waveform's box</a> shrunk into the selected rectangle;</li>
	<li><i>Zoom out time</i> does zooming only for the time axes;</li>
	<li><i>Zoom out values</i> does zooming only for the vertical axes;</li>
	<li><i><a name="selection-get-values"></a>Get values at the mouse cursor</i> takes the values of all waveforms 
	crossing the vertical line at the cursor. The values are rendered as strings 
	and then set into the column 5 of the list store returned by
	<a href="#Gtk.Oscillograph.Get_Channel_List">Get_Channel_List</a>. 
	Non-existing values are rendered as empty strings. Then it emits the signal
	<i>position-changed</i> for each time sweeper;</li>
	<li><i>Subtract values at the mouse cursor</i> takes the values of all 
	waveforms crossing the vertical line at the cursor and subtracts them from 
	the values taken at the previous selection the results are rendered as 
	strings and then set into the column 5 of the list store returned by
	<a href="#Gtk.Oscillograph.Get_Channel_List">Get_Channel_List</a>. Then it 
	emits the signal <i>position-changed</i> for each time sweeper;</li>
	<li><i>Get differences between the margins </i>calculates differences of the 
	waveform values at the left and right margins of the selection box, sets 
	them into the column 5 and emits <i>position-changed</i>;</li>
	<li><i>Cancel selection</i> drops the selection.</li>
</ul>
<p>The oscilloscope's behavior can be altered using
<a href="#Gtk.Oscilloscope.Set_Selection_Mode">Set_Selection_Mode</a>. The 
selection action is one of the enumeration type defined in the package:</p>
<blockquote>
<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Selection_Action"></a>
type </font>Selection_Action<font color="#0000FF"> is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Interactive,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Zoom_In,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Zoom_In_Time,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Zoom_In_Values,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Zoom_Out,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Zoom_Out_Time,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Zoom_Out_Values,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Copy_Values,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Copy_Differences,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Copy_Range,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; User_Action,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; None<br>
&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<ul>
	<li>The value <i>Interactive</i> specifies the default behavior as described 
	above;</li>
	<li>The value <i>User_Action</i> causes a dispatching call to the primitive 
	operation <a href="#Gtk.Oscilloscope.On_Selection">On_Selection</a>;</li>
	<li>The value <i>None</i> removes the selection;</li>
	<li>Other values correspond to the menu elements described above.</li>
</ul>
<p>The right mouse button drop-down menu provides the following items enumerated 
by the type <a href="#Gtk.Oscilloscope.Dropdown_Items">Dropdown_Items</a>:</p>
<blockquote>
	<p><tt><font color="#0000FF"><a name="Gtk.Oscilloscope.Dropdown_Items"></a>
type </font>Dropdown_Items <font color="#0000FF">is mod </font>
	<font color="#800000">2</font>**<font color="#800000">6</font>;<br>
	Grid_Item&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 
	<font color="#0000FF">constant</font> Dropdown_Items := 
	<font color="#800000">2</font>**<font color="#800000">0</font>;<br>
	Hold_Release_Item&nbsp; : <font color="#0000FF">constant</font> 
	Dropdown_Items := <font color="#800000">2</font>**<font color="#800000">1</font>;<br>
	Interpolation_Item : <font color="#0000FF">constant</font> Dropdown_Items := 
	<font color="#800000">2</font>**<font color="#800000">2</font>;<br>
	Latest_Data_Item&nbsp;&nbsp; : <font color="#0000FF">constant</font> 
	Dropdown_Items := <font color="#800000">2</font>**<font color="#800000">3</font>;<br>
	Snapshot_Item&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">constant</font> 
	Dropdown_Items := <font color="#800000">2</font>**<font color="#800000">4</font>;<br>
	Undo_Redo_Item&nbsp;&nbsp;&nbsp;&nbsp; : <font color="#0000FF">constant</font> 
	Dropdown_Items := <font color="#800000">2</font>**<font color="#800000">5</font>;</tt></p>
</blockquote>
<ul>
	<li><i>Hold</i>/<i>Release</i> the oscilloscope sweepers;</li>
	<li><i>Latest data</i> to move the sweepers to the most recent data;</li>
	<li><i>Toggle grid</i> to show or hide the graph paper;</li>
	<li><i>Toggle interpolation</i> to turn linear interpolation on and off;</li>
	<li><i>Undo/Redo</i> zooming actions;</li>
	<li><i>Snapshot</i> to capture the oscilloscope's contents into a file. Note 
	that this item appears only if <a href="#Gtk.Oscilloscope.Set_Snapshot_File">
	Set_Snapshot_File</a> was used to set the file to write.</li>
</ul>
<p>The individual items can be enabled or disabled. The following type</p>
<H3><a name="12.2"></a>12.2. Sweeper panel</H3>
<blockquote>
	<p>
	<img border="0" src="oscilloscope-sweeper_panel.png" alt="oscilloscope sweeper panel"></p>
</blockquote>
<p><a name="Gtk.Oscilloscope.Sweeper_Panel"></a>The package
<a href="#Gtk.Oscilloscope.Sweeper_Panel">Gtk.Oscilloscope.Sweeper_Panel</a> 
provides a widget which can be used to control horizontal axis of the 
oscilloscope widget:</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Gtk_Oscilloscope_Sweeper_Panel_Record
<font color="#0000FF">is<br>
&nbsp;&nbsp; new</font> Gtk_Table_Record <font color="#0000FF">with private</font>;<br>
<font color="#0000FF">type</font> Gtk_Oscilloscope_Sweeper_Panel
<font color="#0000FF">is<br>
&nbsp;&nbsp; access all</font> Gtk_Oscilloscope_Sweeper_Panel_Record'Class;</tt></p></blockquote>
<p>The following operations are defined in the package:</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Gtk_Oscilloscope_Sweeper_Panel;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Oscilloscope</b> : <font color="#0000FF">not null access</font> 
Gtk_Oscilloscope_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sweeper</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Sweeper_Type := Lower;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Show_Buttons</b> : Boolean := True;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Flat</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Boolean := False<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure creates a new widget. The parameter <b>Oscilloscope</b> is the 
oscilloscope widget. <b>
Sweeper</b> indicates the time axis the panel will control. When <b>Show_Buttons</b> 
is <font color="#800000"><i>false</i></font> then buttons controlling the 
visibility of axis and graph paper are not shown. When <b>Flat</b> is <i>
<font color="#800000">true</font></i> the panel is in a single row.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Oscilloscope_Sweeper_Panel_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Oscilloscope</b> : <font color="#0000FF">not null access</font> 
Gtk_Oscilloscope_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Sweeper</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Sweeper_Type;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Show_Buttons</b> : Boolean;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>Flat</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure must be called from the Initialize of the derived type in 
order to initialize the parent. </p>
<H3><a name="12.3"></a>12.3. Amplifier panel</H3>
<blockquote>
	<p>
	<img border="0" src="oscilloscope-amplifier_panel.png" alt="oscilloscope amplifier panel"></p>
</blockquote>
<p><a name="Gtk.Oscilloscope.Amplifier_Panel"></a>The package
<a href="#Gtk.Oscilloscope.Amplifier_Panel">Gtk.Oscilloscope.Amplifier_Panel</a> 
provides a widget which can be used to control horizontal axis of the 
oscilloscope widget:</p>
<blockquote>
<p><tt><font color="#0000FF">type</font> Gtk_Oscilloscope_Amplifier_Panel_Record
<font color="#0000FF">is<br>
&nbsp;&nbsp; new</font> Gtk_Table_Record <font color="#0000FF">with private</font>;<br>
<font color="#0000FF">type</font> Gtk_Oscilloscope_Amplifier_Panel
<font color="#0000FF">is<br>
&nbsp;&nbsp; access all</font> Gtk_Oscilloscope_Amplifier_Panel_Record'Class;</tt></p></blockquote>
<p>The following operations are defined in the package:</p>
<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Page_Label<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Oscilloscope_Amplifier_Panel_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">return 
not null access</font> Gtk_Label_Record'Class;;</tt></p></blockquote>
<p>This function returns the label widget which can be used to place the 
measurement unit of the controlled axis.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Gtk_Oscilloscope_Amplifier_Panel;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Oscilloscope</b> : <font color="#0000FF">not null access</font> 
Gtk_Oscilloscope_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Amplifier</b>&nbsp;&nbsp;&nbsp; : Amplifier_Type := Left<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure creates a new widget. The parameter <b>Oscilloscope</b> is the 
oscilloscope widget. <b>
Amplieifer</b> indicates the values axis the panel will control. </p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Oscilloscope_Amplifier_Panel_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Oscilloscope</b> : <font color="#0000FF">not null access</font> 
Gtk_Oscilloscope_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Amplifier</b>&nbsp;&nbsp;&nbsp; : Amplifier_Type<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure must be called from the Initialize of the derived type in 
order to initialize the parent. </p>
<H3><a name="12.4"></a>12.4. Channels panel</H3>
<blockquote>
	<p>
	<img border="0" src="oscilloscope-channels_panel.png" width="302" height="147" alt="oscilloscope channels panel"></p>
</blockquote>
<p><a name="Gtk.Oscilloscope.Channels_Panel"></a>The package
<a href="#Gtk.Oscilloscope.Channels_Panel">Gtk.Oscilloscope.Channels_Panel</a> 
provides a widget listing the oscilloscope channels: The widget is a tree view 
with the columns indicating:</p>
<ul>
	<li>The channel color;</li>
	<li>The channel name;</li>
	<li>The channel visibility check button;</li>
	<li>The channel interpolation check button;</li>
	<li>The channel value (set when <a href="#selection-get-values">an operation 
	extracting values</a> is performed on the selection);</li>
	<li>The channel group.</li>
</ul>
<p>The widget has the right button menu:</p>
<blockquote>
	<p>
	<img border="0" src="oscilloscope-channels_panel-menu.png" width="193" height="113" alt="oscilloscope channels panel menu"></p>
</blockquote>
<p>The menu allows deletion of channels and changing their order and colors. The 
widget type is declared as follows:</p>
<blockquote>
	<p><tt><font color="#0000FF">type</font> 
	Gtk_Oscilloscope_Channels_Panel_Record <font color="#0000FF">is<br>
&nbsp;&nbsp; new</font> Gtk_Tree_View_Record <font color="#0000FF">with private</font>;<br>
	<font color="#0000FF">type</font> Gtk_Oscilloscope_Channels_Panel
	<font color="#0000FF">is<br>
&nbsp;&nbsp; access all</font> Gtk_Oscilloscope_Channels_Panel_Record'Class;</tt></p>
</blockquote>
<p>The following operations are defined in the package:</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Gtk_Oscilloscope_Channels_Panel;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Oscilloscope</b> : <font color="#0000FF">not null access</font> 
Gtk_Oscilloscope_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure creates a new widget. The parameter <b>Oscilloscope</b> is the 
oscilloscope widget.</p>
<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Oscilloscope_Channels_Panel_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Oscilloscope</b> : <font color="#0000FF">not null access</font> 
Gtk_Oscilloscope_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure must be called from the Initialize of the derived type in 
order to initialize the parent. </p>
<H3><a name="12.5"></a>12.5. Plotting data with the oscilloscope</H3>
<p>Though the primary usage of the oscilloscope is rendering on-line data in 
real-time, it can also be used for the purpose of simple plotting. In this case sweepers are 
set frozen and the channel data are written once and never updated. The 
horizontal axis can be set into a mode when it renders its values as plain 
number rather than as time stamps.</p>
<p><a name="test_oscilloscope_plotter"></a>The following code sample represents a complete program plotting the function <i>
e<sup>x</sup><font face="Times New Roman">&middot;</font>sin</i>7<i>x</i>.</p>File 
<EM>oscilloscope_plotter.adb</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt><font color="#0000FF">with</font> Ada.Exceptions;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Ada.Exceptions;<br>
<font color="#0000FF">with</font> Ada.Text_IO;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Ada.Text_IO;<br>
<font color="#0000FF">with </font> Glib;
<font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
use </font> Glib;<font color="#0000FF"><br>
with</font> Gtk.Missed;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Gtk.Missed;<br>
<font color="#0000FF">with</font> Gdk.Event;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Gdk.Event;<br>
<font color="#0000FF">with</font> Gtk.Layered.Waveform;&nbsp;
<font color="#0000FF">use</font> Gtk.Layered.Waveform;<br>
<font color="#0000FF">with</font> Gtk.Oscilloscope;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Gtk.Oscilloscope;<br>
<font color="#0000FF">with</font> Gtk.Widget;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Gtk.Widget;<br>
<font color="#0000FF">with</font> Gtk.Window;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Gtk.Window;<br>
<br>
<font color="#0000FF">with</font> Ada.Numerics.Elementary_Functions;<br>
<font color="#0000FF">with</font> Gtk.Main;<br>
<br>
<font color="#0000FF">procedure</font> Oscilloscope_Plotter
<font color="#0000FF">is</font><br>
&nbsp;&nbsp; Window : Gtk_Window;<br>
<font color="#0000FF">begin</font><br>
&nbsp;&nbsp; Gtk.Main.Init;<br>
&nbsp;&nbsp; Gtk.Window.Gtk_New (Window);<br>
&nbsp;&nbsp; Window.Set_Title (&quot;<font color="#FF0000">Test plotting</font>&quot;);<br>
&nbsp;&nbsp; Window.On_Delete_Event (Gtk.Missed.Delete_Event_Handler'Access);<br>
&nbsp;&nbsp; Window.On_Destroy (Gtk.Missed.Destroy_Handler'Access);</tt></TD>
  </TR>
</TABLE>
<p>The program begins with standard GTK stuff initializing the main loop, 
creating a windows, setting its title and connecting the destroy handler that 
exits the main loop upon termination.</p>File <EM>oscilloscope_plotter.adb 
(continuation)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp; <font color="#0000FF">declare</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Curve&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 
Channel_Number;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Oscilloscope : Gtk_Oscilloscope;<br>
&nbsp;&nbsp; <font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Gtk_New (Oscilloscope);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Add (Window, Oscilloscope);</tt></TD>
  </TR>
</TABLE>
<p>Here the oscilloscope widget is created and put into the application's 
window.</p>File <EM>oscilloscope_plotter.adb (continuation)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Oscilloscope.Set_Manual_Sweep (False);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#008000">--<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- Configuring the lower axis<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Oscilloscope.Set_Frozen&nbsp;&nbsp;&nbsp;&nbsp; 
(Lower, True);&nbsp; <font color="#008000">-- No sweeping</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Oscilloscope.Set_Time_Scale (Lower, False);
<font color="#008000">-- No scale</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Oscilloscope.Set_Time_Grid&nbsp; (Lower, True);&nbsp;
<font color="#008000">-- Grid</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Oscilloscope.Set_Time_Axis&nbsp; (Lower, True, 
False);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Oscilloscope.Get_Sweeper (Lower).Configure<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Value&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
=&gt; <font color="#800000">0.0</font>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Lower&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
=&gt; <font color="#800000">0.0</font>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Upper&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
=&gt; <font color="#800000">20.0</font>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Step_Increment =&gt;
<font color="#800000">0.1</font>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Page_Increment =&gt;
<font color="#800000">5.0</font>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Page_Size&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
=&gt; <font color="#800000">10.0</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></TD>
  </TR>
</TABLE>
<p>Next the lower horizontal axis is configured. A call to
<a href="#Gtk.Oscilloscope.Set_Manual_Sweep">Set_Manual_Sweep</a> suppresses the items 
of the right mouse menu, which would allow the user to hold and release the oscilloscope 
sweeper, since plotter need not to sweep the waveform. Then a call to
<a href="#Gtk.Oscilloscope.Set_Frozen">Set_Frozen</a> freezes the 
lower sweeper associated with the axis. The time scale is turned off using <a href="#Gtk.Oscilloscope.Set_Time_Scale">
Set_Time_Scale</a>, so that the horizontal slider will never appear. The vertical grid corresponding to the lower sweeper is turned 
on by <a href="#Gtk.Oscilloscope.Set_Time_Grid">Set_Time_Grid</a>. Then the time axis of 
the lower sweeper is shown using <a href="#Gtk.Oscilloscope.Set_Time_Axis">Set_Time_Axis</a>. This will render the numbers below the curve. Note 
the last parameter of the call to <a href="#Gtk.Oscilloscope.Set_Time_Axis">Set_Time_Axis</a>:&nbsp; <i><font color="#800000">false</font></i> 
instructs to render the time stamps as plain numbers. Finally the lower sweeper 
is set to indicate the area from 0.0 to 10.0 using the standard call to 
Configure of Gtk_Adjustment.</p>File <EM>oscilloscope_plotter.adb 
(continuation)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#008000">
--<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- Adding the channel<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Curve :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Add_Channel<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Widget&nbsp; =&gt; 
Oscilloscope,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Mode&nbsp;&nbsp;&nbsp; 
=&gt; Gtk.Layered.Linear, <font color="#008000">-- Linear interpolation</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Color&nbsp;&nbsp; 
=&gt; RGB (<font color="#800000">0.0</font>, <font color="#800000">0.0</font>,
<font color="#800000">0.7</font>),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Sweeper =&gt; 
Lower<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></TD>
  </TR>
</TABLE>
<p>Here we add one channel to the oscilloscope using
<a href="#Gtk.Oscilloscope.Add_Channel">Add_Channel</a>. The channel will show our 
function. The interpolation mode is set to linear, the color of the curve is set 
to dark blue. The channel is attached to the lower sweeper. The channel group is 
created automatically.</p>File <EM>oscilloscope_plotter.adb 
(continuation)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#008000">--<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- Configuring the left axis for this channel 
(and its group)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Oscilloscope.Set_Group (Left, 
Oscilloscope.Get_Group (Curve));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Oscilloscope.Set_Values_Axis&nbsp; (Left, True);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Oscilloscope.Set_Values_Scale (Left, False);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Oscilloscope.Set_Values_Grid&nbsp; (Left, True);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Oscilloscope.Set_Values_Axis_Width (Left,
<font color="#800000">60</font>);</tt></TD>
  </TR>
</TABLE>
<p>Now, the left axis is configured. First it is attached to the channel's 
group using <a href="#Gtk.Oscilloscope.Set_Group">Set_Group</a>. Then similarly to the lower axis, it is shown 
(<a href="#Gtk.Oscilloscope.Get_Values_Axis">Set_Values_Axis</a>), its scale (slider) is disabled 
(<a href="#Gtk.Oscilloscope.Set_Values_Scale">Set_Values_Scale</a>), the 
corresponding horizontal grid is turned on (<a href="#Gtk.Oscilloscope.Get_Values_Grid">Set_Values_Grid</a>). Finally the width of the left axis 
is set to 60 pixels using <a href="#Gtk.Oscilloscope.Get_Values_Axis_Width">
Set_Values_Axis_Width</a>. This is the space where the values at the axis will be 
shown. Since the visual width of the annotation numbers is hard to predict, 
usually <a href="#Gtk.Oscilloscope.Get_Values_Axis_Width">Set_Values_Axis_Width</a> 
need to be attuned in order to achieve an optimal view.</p>File <EM>oscilloscope_plotter.adb 
(continuation)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#008000">--<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- Pushing the data into the channel's buffer<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">declare</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">use</font> 
Ada.Numerics.Elementary_Functions;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; X : Float :=
<font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; loop</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Oscilloscope.Feed<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
Channel =&gt; Curve,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
T =&gt; GDouble (X),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
V =&gt; GDouble (sin (X * <font color="#800000">7.0</font>) * exp (X))<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; X := X +
<font color="#800000">0.001</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">exit when</font> X &gt; <font color="#800000">10.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end loop</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font>;</tt></TD>
  </TR>
</TABLE>
<p>This part pushes the curve into the channel's buffer. It generates values of <i>
e<sup>x</sup><font face="Times New Roman">&middot;</font>sin</i>7<i>x</i> at the interval 0..10 with the step 0.001. 
The procedure <a href="#Gtk.Oscillograph.Feed">Feed</a> is used to write data points into the channel's buffer. 
The buffer could also be filled using direct calls to
<a href="#Gtk.Layered.Waveform.Put">Put</a> on the channel's buffer (see
<a href="#Gtk.Oscilloscope.Get_Buffer">Get_Buffer</a>).</p>File <EM>oscilloscope_plotter.adb 
(continuation)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp; Window.Set_Size_Request (<font color="#800000">400</font>,
<font color="#800000">300</font>);<br>
&nbsp;&nbsp; Show_All (Window);<br>
&nbsp;&nbsp; Gtk.Main.Main;<br>
<font color="#0000FF">exception<br>
&nbsp;&nbsp; when</font> Error : <font color="#0000FF">others</font> =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Put_Line (&quot;<font color="#FF0000">Error</font>: &quot; 
&amp; Exception_Information (Error));<br>
<font color="#0000FF">end</font> Oscilloscope_Plotter;</tt></TD>
  </TR>
</TABLE>
<p>Finally the windows are shown and the main loop entered. The result is 
indicated on the figure below:</p>
<p><img border="0" src="plotter.png" width="492" height="355" alt="plotter"></p>
<H3><a name="12.6"></a>12.6. Asynchronous plotting</H3>
<p>Usually scientific computations take much time which would block the user 
interface when performed on the context of the main task. The following sample 
illustrates a typical design when intensive computing is performed 
asynchronously to the user interface in a separate task.</p>
<p><img border="0" src="on-line-plotting.png" width="816" height="438" alt="on-line plotting"></p>
<p>The sample uses contributed by Yogeshwarsing Calleecharan 
code to solve a differential 
equation of 2<sup>nd</sup> order describing the frequency of a hydropower 
generator's rotor as described in <i>&quot;On the dynamics of an hydropower generator 
subjected to unbalanced magnetic pull: characterisation and analysis&quot;,</i> 
Yogeshwarsing Calleecharan (2010), Lule&aring; University of Technology, Lule&aring;, 
ISBN13: 978-91-7439-161-9, ISBN10: 9174391615. The sample consists of three 
files:</p>
<ul>
	<li><i>on_line_plotter.adb</i> contains the main procedure which configures 
	user interface and runs the main messages loop as required by GTK;</li>
	<li><i>worker.ads</i> contains the package describing the interface of a 
	task type <i>Process</i>. An instance of <i>Process</i> solves the problem;</li>
	<li><i>worker.adb</i> contains the implementation of the task.</li>
</ul>
File <EM>on_line_plotter.adb</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt><font color="#0000FF">with</font> Ada.Exceptions;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Ada.Exceptions;<br>
<font color="#0000FF">with</font> Ada.Text_IO;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Ada.Text_IO;<br>
<font color="#0000FF">with</font> Gdk.Event; <font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
use</font> Gdk.Event;<br>
<font color="#0000FF">with</font> Glib; <font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
use</font> Glib;<br>
<font color="#0000FF">with</font> Gtk.Enums;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Gtk.Enums;<br>
<font color="#0000FF">with</font> Gtk.Box;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Gtk.Box;<br>
<font color="#0000FF">with</font> Gtk.Button;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Gtk.Button;<br>
<font color="#0000FF">with</font> Gtk.Check_Button;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Gtk.Check_Button;<br>
<font color="#0000FF">with</font> Gtk.Toggle_Button;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Gtk.Toggle_Button;<br>
<font color="#0000FF">with</font> Gtk.Dialog; <font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
use</font> Gtk.Dialog;<br>
<font color="#0000FF">with</font> Gtk.Frame; <font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
use</font> Gtk.Frame;<br>
<font color="#0000FF">with</font> Gtk.GEntry; <font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
use</font> Gtk.GEntry;<br>
<font color="#0000FF">with</font> Gtk.Missed; <font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
use</font> Gtk.Missed;<br>
<font color="#0000FF">with</font> Gtk.Label; <font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
use</font> Gtk.Label;<br>
<font color="#0000FF">with</font> Gtk.Layered.Waveform;&nbsp;
<font color="#0000FF">use</font> Gtk.Layered.Waveform;<br>
<font color="#0000FF">with</font> Gtk.Oscilloscope;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Gtk.Oscilloscope;<br>
<font color="#0000FF">with</font> Gtk.Progress_Bar;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Gtk.Progress_Bar;<br>
<font color="#0000FF">with</font> Gtk.Table; <font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
use</font> Gtk.Table;<br>
<font color="#0000FF">with</font> Gtk.Widget; <font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
use</font> Gtk.Widget;<br>
<font color="#0000FF">with</font> Gtk.Window; <font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
use</font> Gtk.Window;<br>
<br>
<font color="#0000FF">with</font> Ada.Numerics.Elementary_Functions;<br>
<font color="#0000FF">with</font> Ada.Unchecked_Conversion;<br>
<font color="#0000FF">with</font> Gtk.File_Chooser;<br>
<font color="#0000FF">with</font> Gtk.File_Chooser_Dialog;<br>
<font color="#0000FF">with</font> Gtk.Main.Router;<br>
<font color="#0000FF">with</font> Worker;<br>
<br>
<font color="#0000FF">procedure</font> On_Line_Plotter <font color="#0000FF">is</font><br>
&nbsp;&nbsp; Window&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 
Gtk_Window;<br>
&nbsp;&nbsp; Calculator&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Worker.Process;<br>
&nbsp;&nbsp; Start_Button&nbsp;&nbsp;&nbsp; : Gtk_Button;<br>
&nbsp;&nbsp; Oscilloscope&nbsp;&nbsp;&nbsp; : Gtk_Oscilloscope;<br>
&nbsp;&nbsp; Curve&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 
Channel_Number;<br>
&nbsp;&nbsp; Progress&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 
Gtk_Progress_Bar;<br>
&nbsp;&nbsp; Start_Frequency : Gtk_Entry;<br>
&nbsp;&nbsp; Stop_Frequency&nbsp; : Gtk_Entry;<br>
&nbsp;&nbsp; Stiffness_Ratio : Gtk_Entry;<br>
&nbsp;&nbsp; Steps&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 
Gtk_Entry;<br>
&nbsp;&nbsp; Autoscale_Check : Gtk_Check_Button;<br>
&nbsp;&nbsp; Unicode_Check&nbsp;&nbsp; : Gtk_Check_Button;</tt></TD>
  </TR>
</TABLE>
<p>The above part declares the main window of the application, the worker task 
that performs calculation and major widgets.</p>File <EM>on_line_plotter.adb (continuation)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt><font color="#008000">--<br>
-- Delete_Event -- Window closing notification event<br>
--</font><br>
&nbsp;&nbsp; <font color="#0000FF">function</font> Delete_Event<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
Widget : <font color="#0000FF">access</font> Gtk_Widget_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Event&nbsp; : Gdk_Event<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; 
<font color="#0000FF">return</font> Boolean<font color="#0000FF"> is<br>
&nbsp;&nbsp; begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Calculator.Stop; <font color="#008000">-- Stop 
the computation process</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> False;&nbsp;&nbsp;&nbsp;
<font color="#008000">-- Confirm completion exception<br>
&nbsp;&nbsp;
</font>
<font color="#0000FF">exception<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when</font> Tasking_Error =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">return</font> 
False;<font color="#008000"><br>
</font>&nbsp;&nbsp; <font color="#0000FF">end</font> Delete_Event;</tt></TD>
  </TR>
</TABLE>
<p>Destroy is the handler of the signal emitted when the main windows is about 
to destroyed. It ends the main messages loop in response. Delete_Event is the 
handler called when the main window is closed by the user. It stops the 
computation process and then confirms window to close by returning <i>
<font color="#800000">false</font></i>. Since the task might be already 
terminated prematurely, Tasking_Error is handled.</p>
File <EM>on_line_plotter.adb (continuation)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt><font color="#008000">--<br>
-- Value -- Get floating-point value from an entry widget<br>
--<br>
</font>&nbsp;&nbsp; <font color="#0000FF">function</font> Value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Edit : Gtk_Entry;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Name : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Min&nbsp; : GDouble := GDouble'First;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Max&nbsp; : GDouble := GDouble'Last<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">return</font> GDouble<font color="#0000FF"> is<br>
&nbsp;&nbsp;
begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return </font>Result : GDouble := GDouble'Value (Edit.Get_Text) 
<font color="#0000FF">do</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">if</font> Result 
<font color="#0000FF">not in</font> Min..Max <font color="#0000FF">then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
raise </font>Data_Error <font color="#0000FF">with</font> Name &amp; &quot;<font color="#FF0000"> out of range</font>&quot;;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end if</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end return</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">exception<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
when</font> Constraint_Error =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">raise</font> Data_Error
<font color="#0000FF">with</font> &quot;<font color="#FF0000">Wrong </font>&quot; &amp; Name;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Value;<br>
<font color="#008000">--<br>
-- Value -- Get integer value from an entry widget<br>
--</font><br>
&nbsp;&nbsp; <font color="#0000FF">function</font> Value<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Edit : Gtk_Entry;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Name : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Min&nbsp; : Integer := <font color="#800000">1</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Max&nbsp; : Integer := Integer'Last<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">return</font> Integer <font color="#0000FF">is<br>
&nbsp;&nbsp;
begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return </font>Result : Integer := Integer'Value (Edit.Get_Text)<font color="#0000FF"> do<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if</font> Result not in Min..Max <font color="#0000FF">then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
raise</font> Data_Error <font color="#0000FF">with</font> Name &amp; &quot;<font color="#FF0000"> out of range</font>&quot;;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end if</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end return</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">exception<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
when</font> Constraint_Error =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">raise</font> Data_Error
<font color="#0000FF">with</font> &quot;<font color="#FF0000">Wrong</font> &quot; &amp; Name;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Value;</tt></TD>
  </TR>
</TABLE>
<p>The above defines two convenience functions are to get a floating-point or an 
integer value from an entry field.</p>
File <EM>on_line_plotter.adb (continuation)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt><font color="#008000">--<br>
-- Save_Clicked -- Button &quot;save to PDF&quot;<br>
--</font><br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Save_Clicked (Widget : 
<font color="#0000FF">access</font> Gtk_Widget_Record'Class) 
<font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
use</font> Gtk.File_Chooser;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">use</font> Gtk.File_Chooser_Dialog;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">use</font> Gtk.Main.Router;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Dialog : Gtk_File_Chooser_Dialog;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Button : Gtk_Widget;<br>
&nbsp;&nbsp; <font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Gtk_New (Dialog, &quot;<font color="#FF0000">PDF file to save into</font>&quot;, Window, Action_Save);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Button := Dialog.Add_Button (&quot;<font color="#FF0000">OK</font>&quot;,&nbsp;&nbsp;&nbsp;&nbsp; Gtk_Response_OK);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Button := Dialog.Add_Button (&quot;<font color="#FF0000">Cancel</font>&quot;, Gtk_Response_Cancel);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">case</font> Dialog.Run
<font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
when</font> Gtk_Response_OK =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Oscilloscope.Capture_PDF (Get_Filename (+Dialog));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when others</font> =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end case</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Dialog.Destroy;<br>
&nbsp;&nbsp; <font color="#0000FF">exception<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
when</font> Error : <font color="#0000FF">others</font> =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Say (Exception_Information (Error));<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Save_Clicked;</tt></TD>
  </TR>
</TABLE>
<p><i>Save_Clicked</i> is a handler of the signal emitted when the <i>save to 
PDF</i> button is pressed. The implementation uses file chooser dialog to get 
the file name name. The dialog is first created. Then the <i>OK</i> button and 
the <i>Cancel</i> buttons are added to the dialog using <i>Add_Button</i> 
operation. After that the dialog is activated by calling <i>Run</i> operation. 
When the dialog is completed this or other way, <i>Run</i> returns the outcome, 
which is <i>Gtk_Response_OK</i> when a file was selected. The file name is taken 
using <i>Get_Filename</i> and then passed to
<a href="#Gtk.Oscilloscope.Capture_PDF">Capture_PDF</a> to store the 
oscilloscope's contents into the file.</p>
File <EM>on_line_plotter.adb (continuation)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt><font color="#008000">--<br>
-- Start_Clicked -- Button &quot;start&quot;<br>
--</font><br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Start_Clicked (Widget : 
<font color="#0000FF">access</font> Gtk_Widget_Record'Class) 
<font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
use</font> Gtk.Main.Router;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
From&nbsp; : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
To&nbsp;&nbsp;&nbsp; : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Ratio : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Width : GDouble;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Count : Positive;<br>
&nbsp;&nbsp; <font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Start_Button.Set_Sensitive (False);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
From&nbsp; := Value (Start_Frequency, &quot;<font color="#FF0000">start frequency</font>&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
To&nbsp;&nbsp;&nbsp; := Value (Stop_Frequency,&nbsp; &quot;<font color="#FF0000">stop frequency</font>&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Count := Value (Steps,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">frequency steps</font>&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Ratio := Value (Stiffness_Ratio, &quot;<font color="#FF0000">stiffness ratio</font>&quot;, 
<font color="#800000">0.0</font>, <font color="#800000">1.0</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Width := To - From;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#008000">-- Set page size of the scope</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Oscilloscope.Get_Sweeper (Lower).Configure<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Value&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =&gt; From,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Lower&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =&gt; From,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Upper&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =&gt; Width,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Step_Increment =&gt; Width / <font color="#800000">100.0,</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Page_Increment =&gt; Width / <font color="#800000">10.0</font>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Page_Size&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =&gt; Width<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#008000">-- Initiate calculation process</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Calculator.Start<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; (&nbsp; Start&nbsp;&nbsp;&nbsp;&nbsp; =&gt; Long_Float (From),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Stop&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =&gt; Long_Float (To),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Steps&nbsp;&nbsp;&nbsp;&nbsp; =&gt; Count,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Stiffness =&gt; Long_Float (Ratio)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Oscilloscope,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Curve,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Progress<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);<br>
&nbsp;&nbsp; <font color="#0000FF">exception<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
when</font> Error : Data_Error =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Say (Exception_Message (Error));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> Error : 
<font color="#0000FF">others</font> =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Say (Exception_Information (Error));<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Start_Clicked;</tt></TD>
  </TR>
</TABLE>
<p><i>Start_Clicked</i> is a handler of the signal emitted when the <i>Start</i> 
button is pressed. The implementation makes the button insensitive. Then it gets 
values from the entry fields of the window. The fields <i>Start</i> and <i>Stop 
frequency</i> are used to calculate the oscilloscope's horizontal axis width. 
Then the parameters are passed to the task's entry <i>Start</i>.</p>File <EM>on_line_plotter.adb (continuation)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt><font color="#008000">--<br>
-- Unicode_Toggled -- Check button toggling<br>
--</font><br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Unicode_Toggled<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Widget : <font color="#0000FF">access</font> Gtk_Widget_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">is<br>
&nbsp;&nbsp;
begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Oscilloscope.Set_Superscript (Unicode_Check.Get_Active);<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Unicode_Toggled;</tt></TD>
  </TR>
</TABLE>
<p>This procedure handles toggling the <i>Use Unicode</i> checkbox. It calls
<a href="#Gtk.Oscilloscope.Set_Superscript">Set_Superscript</a> with the 
checkbox state.</p>
File <EM>on_line_plotter.adb (continuation)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt><font color="#008000">--<br>
-- Autoscale_Toggled -- Check button toggling<br>
--</font><br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Autoscale_Toggled<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Widget : <font color="#0000FF">access</font> Gtk_Widget_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">is<br>
&nbsp;&nbsp;
begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Oscilloscope.Set_Auto_Scaling (Left, Autoscale_Check.Get_Active);<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Autscale_Toggled;</tt></TD>
  </TR>
</TABLE>
<p><i>Autoscale_Toggled</i> is called to handle toggling the<i> Autoscale Y </i>
checkbox. It calls directly to <a href="#Gtk.Oscilloscope.Set_Auto_Scaling">
Set_Auto_Scaling</a> operation with the first parameter specifying the axis on 
the left.</p>File <EM>on_line_plotter.adb (continuation)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt><font color="#008000">--<br>
-- Circumvention of accessibility checks<br>
--<br>
</font>&nbsp;&nbsp; <font color="#0000FF">type</font> Local_Widget_Callback
<font color="#0000FF">is access procedure</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Widget :
<font color="#0000FF">access</font> Gtk_Widget_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
&nbsp;&nbsp; <font color="#0000FF">function</font> &quot;<font color="#FF0000">+</font>&quot;
<font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new</font> Ada.Unchecked_Conversion<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
Local_Widget_Callback,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Cb_Gtk_Toggle_Button_Void<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
&nbsp;&nbsp; <font color="#0000FF">function</font> &quot;<font color="#FF0000">+</font>&quot;
<font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new</font> Ada.Unchecked_Conversion<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
Local_Widget_Callback,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Cb_Gtk_Button_Void<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Local_Delete_Callback
<font color="#0000FF">is access function</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Widget :
<font color="#0000FF">access</font> Gtk_Widget_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Event&nbsp; : 
Gdk_Event<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; return Boolean;<br>
&nbsp;&nbsp; <font color="#0000FF">function</font> &quot;<font color="#FF0000">+</font>&quot;
<font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new </font>Ada.Unchecked_Conversion<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; 
Local_Delete_Callback,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Cb_Gtk_Widget_Gdk_Event_Boolean<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></TD>
  </TR>
</TABLE>
<p>Here conversions are defined to circumvent accessibility checks. Normally 
callbacks are defined at the library level packages. Here callbacks are nested 
routines which cannot be passed without an unchecked conversion.</p>File <EM>on_line_plotter.adb (continuation)</EM>:<br>
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt><font color="#0000FF">begin</font><br>
&nbsp;&nbsp;
Gtk.Main.Init;<br>
&nbsp;&nbsp;
Gtk.Window.Gtk_New (Window);<br>
&nbsp;&nbsp;
Gtk.Main.Router.Init (Window); <font color="#008000">-- Initialize routing</font><br>
&nbsp;&nbsp;
Window.Set_Title (&quot;<font color="#FF0000">Sample on-line plotting</font>&quot;);<br>
&nbsp;&nbsp; Window.On_Delete_Event (+Delete_Event'Access);<br>
&nbsp;&nbsp; Window.On_Destroy (Gtk.Missed.Destroy_Handler'Access);</tt></TD>
  </TR>
</TABLE>
<p>This fragment performs standard initialization of the main window. First it 
initiates the main messages loop. Then it initializes servicing the requests and 
messages from Ada tasks. Then the window is created. Its title is set and 
finally the <i>destroy</i> and <i>delete_event</i> events handlers are 
connected.</p>
File <EM>on_line_plotter.adb (continuation)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp; <font color="#0000FF">declare</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Main_Box : Gtk_HBox;<br>
&nbsp;&nbsp; <font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Gtk_New_HBox (Main_Box);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Main_Box.Set_Spacing (<font color="#800000">3</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Main_Box.Set_Border_Width (<font color="#800000">3</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Add (Window, Main_Box);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </tt></TD>
  </TR>
</TABLE>
<p>This creates a horizontal box (<i>Main_Box</i>), which is put into the 
window. The box spacing and border width are set to 3 pixels. The box will 
contain another box on the left and the oscilloscope on the right.</p>File <EM>on_line_plotter.adb (continuation)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">declare</font>
<font color="#008000">-- Box on the left</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Left_Box : Gtk_VBox;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Gtk_New_VBox (Left_Box);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Left_Box.Set_Spacing (<font color="#800000">3</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Main_Box.Pack_Start (Left_Box, False, False);</tt></TD>
  </TR>
</TABLE>
<p>Here the vertical box (<i>Left_Box</i>) is created and put into the main box. 
Spacing is set to 3. The packing parameters are set to make the box occupy no 
more width than required. When the window is expanded or shrinking, the space is 
given to or taken from the oscilloscope.</p>
File <EM>on_line_plotter.adb (continuation)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">declare</font> <font color="#008000">-- Parameters in the left box</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Parameters : Gtk_Table;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">procedure</font> Create<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Edit&nbsp; : <font color="#0000FF">out</font> Gtk_Entry;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Row&nbsp;&nbsp; : GUInt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Label : String;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Init&nbsp; : String<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
)&nbsp; <font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Annotation : Gtk_Label;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Gtk_New (Annotation, Label);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Annotation.Set_Alignment (<font color="#800000">1.0</font>, 
<font color="#800000">0.5</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Parameters.Attach<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Annotation,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#800000">0</font>, <font color="#800000">1</font>, Row, Row + 
<font color="#800000">1</font>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
XOptions =&gt; Fill,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
YOptions =&gt; Shrink<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Gtk_New (Edit);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Edit.Set_Width_Chars (<font color="#800000">10</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Edit.Set_Text (Init);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Parameters.Attach<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Edit,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#800000">1</font>, <font color="#800000">2</font>, Row, Row + 
<font color="#800000">1</font>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
XOptions =&gt; Fill <font color="#0000FF">or</font> Expand,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
YOptions =&gt; Shrink<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">end</font> Create;</tt></TD>
  </TR>
</TABLE>
<p>The entry fields and their labels in the left box are put in a table which 
aligns them vertically. The table is named <i>Parameters</i> and a convenience 
procedure <i>Create</i> is used to create a label and an entry field at the 
specified row of the table. The labels are aligned to the right horizontally and 
centred vertically using the operation <i>Set_Alignment</i>. The operation <i>
Attach</i> places a child widget into the table. <i>Set_Width</i> controls the 
number of characters in the entry field.</p>
File <EM>on_line_plotter.adb (continuation)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Gtk_New (Parameters, <font color="#800000">6</font>, <font color="#800000">2</font>, False);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Parameters.Set_Row_Spacings (<font color="#800000">3</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Parameters.Set_Col_Spacings (<font color="#800000">3</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Left_Box.Pack_Start (Parameters);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Create (Start_Frequency, <font color="#800000">0</font>, &quot;<font color="#FF0000">Start frequency</font>&quot;, &quot;<font color="#FF0000">-44.88</font>&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Create (Stop_Frequency,&nbsp; <font color="#800000">1</font>, &quot;<font color="#FF0000">Stop frequency</font>&quot;,&nbsp; &quot;<font color="#FF0000">67.32</font>&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Create (Steps,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#800000">2</font>, &quot;<font color="#FF0000">Steps</font>&quot;,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;<font color="#FF0000">300</font>&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Create (Stiffness_Ratio, <font color="#800000">3</font>, &quot;<font color="#FF0000">Stiffness ratio</font>&quot;, &quot;<font color="#FF0000">1</font>&quot;);</tt></TD>
  </TR>
</TABLE>
<p>This creates the table of 6 rows and 2 columns. The parameter <i>
<font color="#800000">false</font></i> tells that table cells may have different 
sizes. Table row and columns spacing is set to 3. The table is put into the left 
box. Then fields and labels are created and put into the table.</p>
File <EM>on_line_plotter.adb (continuation)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">declare</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Label : Gtk_Label;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Gtk_New (Label, &quot;<font color="#FF0000">Autoscale Y</font>&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Label.Set_Alignment (<font color="#800000">1.0</font>, <font color="#800000">0.5</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Parameters.Attach<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Label,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#800000">0</font>, <font color="#800000">1</font>, 
<font color="#800000">4</font>, <font color="#800000">5</font>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
XOptions =&gt; Fill,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
YOptions =&gt; Shrink<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Gtk_New (Autoscale_Check);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Autoscale_Check.Set_Active (True);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Parameters.Attach<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Autoscale_Check,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#800000">1</font>, <font color="#800000">2</font>, 
<font color="#800000">4</font>, <font color="#800000">5</font>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
XOptions =&gt; Fill,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
YOptions =&gt; Shrink<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Autoscale_Check.On_Toggled (+Autoscale_Toggled'Access);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">end</font>;</tt></TD>
  </TR>
</TABLE>
<p>Here the checkbox <i>Autoscale Y</i> and its label is created and put into 
the table's row 5. Then the event handler is connected.</p>File <EM>on_line_plotter.adb (continuation)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">declare</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Label : Gtk_Label;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Gtk_New (Label, &quot;<font color="#FF0000">Use Unicode</font>&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Label.Set_Alignment (<font color="#800000">1.0</font>, <font color="#800000">0.5</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Parameters.Attach<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Label,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#800000">0</font>, <font color="#800000">1</font>, 
<font color="#800000">5</font>, <font color="#800000">6</font>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
XOptions =&gt; Fill,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
YOptions =&gt; Shrink<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Gtk_New (Unicode_Check);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Unicode_Check.Set_Active (True);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Parameters.Attach<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Unicode_Check,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#800000">1</font>, <font color="#800000">2</font>, 
<font color="#800000">5</font>, <font color="#800000">6</font>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
XOptions =&gt; Fill,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
YOptions =&gt; Shrink<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Unicode_Check.On_Toggled (+Unicode_Toggled'Access);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">end</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end</font>;</tt></TD>
  </TR>
</TABLE>
<p>This is basically same for the checkbox <i>Use Unicode</i>.</p>File <EM>on_line_plotter.adb (continuation)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">declare</font> <font color="#008000">-- Save button</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Box&nbsp;&nbsp;&nbsp; : Gtk_HBox;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Button : 
Gtk_Button;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Gtk_New_HBox (Box);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Box.Set_Spacing (<font color="#800000">3</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Left_Box.Pack_Start (Box, False, False);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Gtk_New (Button, &quot;<font color="#FF0000">Save to PDF</font>&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Box.Pack_Start (Button, False, False);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Button.On_Clicked (+Save_Clicked'Access);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end</font>;</tt></TD>
  </TR>
</TABLE>
<p>This fragment creates a horizontal box, puts it into the left box. Then 
creates the <i>Save to PDF</i> button and puts it into the former box. The box 
is needed to prevent the button from being expanded horizontally. Then the 
button handler is connected to the button.</p>File <EM>on_line_plotter.adb (continuation)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">declare</font> <font color="#008000">-- Start button and progress bar in the left box</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Box : Gtk_HBox;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Gtk_New_HBox (Box);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Box.Set_Spacing (<font color="#800000">3</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Left_Box.Pack_Start (Box, False, False);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Gtk_New (Start_Button, &quot;<font color="#FF0000">Start</font>&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Box.Pack_Start (Start_Button, False, False);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Start_Button.On_Clicked (+Start_Clicked'Access);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Gtk_New (Progress);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Box.Pack_Start (Progress);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end</font>;</tt></TD>
  </TR>
</TABLE>
<p>This creates the <i>Start</i> button. Then a progress bar is created and put 
into the box next to the button.</p>File <EM>on_line_plotter.adb (continuation)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">declare</font>
<font color="#008000">-- Frame with the oscilloscope on the right</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Frame : Gtk_Frame;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Gtk_New (Frame);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Frame.Set_Shadow_Type (Shadow_In);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Main_Box.Pack_Start (Frame);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Gtk_New (Oscilloscope);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Frame.Add (Oscilloscope);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Oscilloscope.Set_Manual_Sweep (False);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#008000">--<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-- Configuring the lower axis<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
--</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Oscilloscope.Set_Frozen&nbsp;&nbsp;&nbsp;&nbsp; (Lower, True);&nbsp;
<font color="#008000">-- No sweeping</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Oscilloscope.Set_Time_Scale (Lower, False); <font color="#008000">-- No scale (slider)</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Oscilloscope.Set_Time_Grid&nbsp; (Lower, True);&nbsp; <font color="#008000">-- Grid</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Oscilloscope.Set_Time_Axis<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Lower,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
True,<font color="#008000"> -- Visible</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
False<font color="#008000"> -- As plain numbers</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#008000">--<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-- Adding the channel<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
--</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Curve :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Add_Channel<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(&nbsp; Widget&nbsp; =&gt; Oscilloscope,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Mode&nbsp;&nbsp;&nbsp; =&gt; Gtk.Layered.Linear, <font color="#008000">-- Linear interpolation</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Color&nbsp;&nbsp; =&gt; RGB (<font color="#800000">0.0</font>, 
<font color="#800000">0.0</font>, <font color="#800000">0.7</font>),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Sweeper =&gt; Lower<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#008000">--<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-- Configuring the left axis for this channel (and its group)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
--</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Oscilloscope.Set_Group (Left, Oscilloscope.Get_Group (Curve));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Oscilloscope.Set_Values_Axis&nbsp; (Left, True);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Oscilloscope.Set_Values_Scale (Left, True);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Oscilloscope.Set_Values_Grid&nbsp; (Left, True);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Oscilloscope.Set_Values_Axis_Width (Left, <font color="#800000">80</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font>;</tt></TD>
  </TR>
</TABLE>
<p>Here the oscilloscope widget is create put into a frame which is then placed 
into the main box. The oscilloscope's parameters are set the same way it was 
done as described in the previous <a href="#test_oscilloscope_plotter">plotting 
example</a>.</p>
File <EM>on_line_plotter.adb (continuation)</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp;
Window.Set_Default_Size (<font color="#800000">800</font>, <font color="#800000">400</font>);<br>
&nbsp;&nbsp;
Show_All (Window);<br>
&nbsp;&nbsp;
Gtk.Main.Main;<br>
<font color="#0000FF">exception</font><br>
&nbsp;&nbsp; <font color="#0000FF">when</font> Error : <font color="#0000FF">others</font> =&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Put_Line (&quot;<font color="#FF0000">Error: </font>&quot; &amp; Exception_Information (Error));<br>
<font color="#0000FF">end</font> On_Line_Plotter;</tt></TD>
  </TR>
</TABLE>
<p>Finally the window is sized, shown and the main messages loop is entered.</p>
File <EM>worker.ads</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#FFDEBD"><tt><font color="#0000FF">with</font> Gtk.Oscilloscope;&nbsp;
<font color="#0000FF">use</font> Gtk.Oscilloscope;<br>
<font color="#0000FF">with</font> Gtk.Progress_Bar;&nbsp; <font color="#0000FF">
use</font> Gtk.Progress_Bar;<br>
<br>
<font color="#0000FF">package</font> Worker <font color="#0000FF">is</font><br>
<font color="#008000">--<br>
-- Parameters -- Of a calculation session<br>
--</font><br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Parameters<font color="#0000FF"> 
is record</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Start&nbsp;&nbsp;&nbsp;&nbsp; : Long_Float;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Stop&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Long_Float;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Stiffness : Long_Float;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Steps&nbsp;&nbsp;&nbsp;&nbsp; : Positive;<br>
&nbsp;&nbsp; <font color="#0000FF">end record</font>;<br>
<font color="#008000">--<br>
-- Process -- Calculation process task<br>
--</font><br>
&nbsp;&nbsp; <font color="#0000FF">task type</font> Process
<font color="#0000FF">is</font><br>
&nbsp;&nbsp; <font color="#008000">--<br>
&nbsp;&nbsp; -- Start -- Computations with the parameters specified<br>
&nbsp;&nbsp; --<br>
&nbsp;&nbsp; -- Parameters - To use in the computations<br>
&nbsp;&nbsp; -- Scope&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - The oscilloscope<br>
&nbsp;&nbsp; -- Channel&nbsp;&nbsp;&nbsp; - The number of the channel to feed<br>
&nbsp;&nbsp; -- Progress&nbsp;&nbsp; - The progress bar to update during 
computations<br>
&nbsp;&nbsp; --</font><br>
&nbsp;&nbsp; <font color="#0000FF">&nbsp;&nbsp; entry</font> Start<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Data&nbsp;&nbsp;&nbsp;&nbsp; 
: Parameters;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Scope&nbsp;&nbsp;&nbsp; : Gtk_Oscilloscope;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Channel&nbsp; : Channel_Number;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Progress : Gtk_Progress_Bar<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
&nbsp;&nbsp; <font color="#008000">--<br>
&nbsp;&nbsp; -- Stop -- Terminate the task prematurely<br>
&nbsp;&nbsp; --</font><br>
&nbsp;&nbsp; <font color="#0000FF">&nbsp;&nbsp; entry</font> Stop;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Process;<br>
<font color="#0000FF">end</font> Worker;</tt></TD>
  </TR>
</TABLE>
<p>The package worker defines parameters of the task performing computations. 
Then it declares the task type with two entries. The entry <i>Start</i> 
initiates computations. The entry <i>Stop</i> requests task completion.</p>
<p>The file worker.adb provides implementation of the package:</p>
File <EM>worker.adb</EM>:
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>
<br>
<font color="#0000FF">with</font> Ada.Calendar;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Ada.Calendar;<br>
<font color="#0000FF">with</font> Ada.Exceptions;&nbsp;&nbsp;
<font color="#0000FF">use</font> Ada.Exceptions;<br>
<font color="#0000FF">with</font> Ada.Numerics;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> Ada.Numerics;<br>
<font color="#0000FF">with</font> GLib;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">use</font> GLib;<br>
<font color="#0000FF">with</font> Gtk.Main.Router;&nbsp; <font color="#0000FF">
use</font> Gtk.Main.Router;<br>
<br>
<font color="#0000FF">with</font> Ada.Numerics.Long_Elementary_Functions;<br>
<font color="#0000FF">use</font>&nbsp; Ada.Numerics.Long_Elementary_Functions;<br>
<br>
<font color="#0000FF">with</font> Interfaces.C;<br>
<br>
<font color="#0000FF">package body</font> Worker <font color="#0000FF">is</font><br>
<font color="#008000">--<br>
-- Update_Request -- Progress bar update refresh<br>
--<br>
-- Since&nbsp; GTK&nbsp; is single tasking,&nbsp; drawing may not be performed 
on the<br>
-- context of another task. This data type is used to request the main<br>
-- GTK task to perform update of the progress bar state.<br>
--<br>
</font>&nbsp;&nbsp; <font color="#0000FF">type</font> Update_Request
<font color="#0000FF">is record</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Progress&nbsp;&nbsp;&nbsp;&nbsp; : 
Gtk_Progress_Bar;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Step_No&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : Natural;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Step_Last&nbsp;&nbsp;&nbsp; : Positive;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Substep_No&nbsp;&nbsp; : Natural;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Substep_Last : Positive;<br>
&nbsp;&nbsp; <font color="#0000FF">end record</font>;<font color="#008000"><br>
--<br>
-- Messages -- Update_Request marshaller<br>
--</font><br>
&nbsp;&nbsp; <font color="#0000FF">package</font> Messages <font color="#0000FF">
is new</font> Generic_Message (Update_Request);<br>
<font color="#008000">--<br>
-- Service -- Called&nbsp; on the GTK context to service the request.&nbsp; This<br>
--&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; procedure 
updates the progress bar state.<br>
--</font><br>
&nbsp;&nbsp; <font color="#0000FF">procedure</font> Service (Data :
<font color="#0000FF">in out</font> Update_Request) <font color="#0000FF">is<br>
&nbsp;&nbsp; begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Data.Progress.Set_Fraction<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; (&nbsp; (&nbsp; GDouble (Data.Substep_No)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /&nbsp; GDouble (Data.Substep_Last)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +&nbsp; GDouble (Data.Step_No)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /&nbsp; GDouble (Data.Step_Last)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Data.Progress.Set_Text<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; &quot;<font color="#FF0000">step</font>&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&nbsp; Integer'Image (Data.Step_No)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&nbsp; &quot;<font color="#FF0000">, index</font>&quot;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;&nbsp; Integer'Image (Data.Substep_No)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Service;</tt></TD>
  </TR>
</TABLE>
<p>The package defines the type <i>Update_Requests</i> used to update the 
progress bar while performing computations. The type is used to instantiate the 
package <i>Messages</i>. The procedure <i>Service</i> will be called on the 
context of main GTK task to update the state of the progress bar.</p>
<p>Next follows the code solving the actual problem. The application code is 
marked as by the pink color (<span style="background-color: #FFECFF"><font color="#FFECFF">__</font></span>).</p>
File <EM>worker.adb (continuation)</EM>:<br>
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#FFECFF"><tt><font color="#008000">--<br>
-- Vector algebra primitives<br>
--</font><br>
&nbsp;&nbsp; <font color="#0000FF">type</font> Vector <font color="#0000FF">is 
array</font> (Integer <font color="#0000FF">range</font> &lt;&gt;)
<font color="#0000FF">of</font> Long_Float;<br>
<br>
&nbsp;&nbsp; <font color="#0000FF">function</font> &quot;<font color="#FF0000">+</font>&quot; 
(X, Y : Vector) <font color="#0000FF">return</font> Vector <font color="#0000FF">
is<br>
&nbsp;&nbsp; begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return</font> Z : Vector (X'Range)<font color="#0000FF"> 
do<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for</font> I
<font color="#0000FF">in</font> X'Range <font color="#0000FF">loop</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Z(I) := X(I) 
+ Y(I);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end loop</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end return</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> &quot;<font color="#FF0000">+</font>&quot;;<br>
<br>
&nbsp;&nbsp; <font color="#0000FF">function</font> &quot;<font color="#FF0000">*</font>&quot; 
(S : Long_Float; X : Vector) <font color="#0000FF">return</font> Vector<font color="#0000FF"> 
is<br>
&nbsp;&nbsp; begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return </font>Z : Vector (X'Range)<font color="#0000FF"> 
do<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for</font> I
<font color="#0000FF">in</font> X'Range <font color="#0000FF">loop</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Z(I) := S * 
X(I);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end loop</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end return</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> &quot;<font color="#FF0000">*</font>&quot;;<br>
<br>
&nbsp;&nbsp; <font color="#0000FF">function</font> &quot;<font color="#FF0000">/</font>&quot; 
(X : Vector; S : Long_Float) <font color="#0000FF">return</font> Vector<font color="#0000FF"> 
is<br>
&nbsp;&nbsp; begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return </font>Z : Vector (X'Range)
<font color="#0000FF">do<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for </font>I
<font color="#0000FF">in</font> X'Range <font color="#0000FF">loop</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Z (I) := X 
(I) /S;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end loop</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end return</font>;<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> &quot;<font color="#FF0000">/</font>&quot;;<br>
<br>
&nbsp;&nbsp; Young_Modulus&nbsp;&nbsp; : <font color="#0000FF">constant</font> 
:= <font color="#800000">200.0E9</font>;<br>
&nbsp;&nbsp; Second_Moment&nbsp;&nbsp; : <font color="#0000FF">constant</font> 
:= <font color="#800000">0.0635</font>;<br>
&nbsp;&nbsp; Rotor_Length&nbsp;&nbsp;&nbsp; : <font color="#0000FF">constant</font> 
:= <font color="#800000">3.6</font>;<br>
&nbsp;&nbsp; Stiffness_Shaft : <font color="#0000FF">constant</font> :=
<font color="#800000">48.0</font> * Young_Modulus * Second_Moment /<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Rotor_Length**<font color="#800000">3</font>;<br>
&nbsp;&nbsp; Stiffness_Bearings : <font color="#0000FF">constant</font> :=
<font color="#800000">1000.0E6</font>;<br>
&nbsp;&nbsp; Stiffness_Total&nbsp;&nbsp;&nbsp; : <font color="#0000FF">constant</font> 
:=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; (Stiffness_Shaft * Stiffness_Bearings)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /&nbsp; (Stiffness_Shaft + Stiffness_Bearings)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );<br>
&nbsp;&nbsp; Rotor_Mass&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :
<font color="#0000FF">constant</font> := <font color="#800000">30.0E3</font>;<br>
&nbsp;&nbsp; Zeta&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">constant</font> := <font color="#800000">0.1</font>;<br>
&nbsp;&nbsp; Mean_Airgap_Length : <font color="#0000FF">constant</font> :=
<font color="#800000">17.0E-3</font>;<br>
<br>
&nbsp;&nbsp; Two_PI : <font color="#0000FF">constant</font> :=
<font color="#800000">2.0</font> * Pi;<br>
<br>
&nbsp;&nbsp; <font color="#0000FF">subtype</font> Actual_Vector
<font color="#0000FF">is</font> Vector (<font color="#800000">1</font>..<font color="#800000">4</font>);<br>
<font color="#008000">--<br>
-- F -- Calculate the state vector<br>
--</font><br>
&nbsp;&nbsp; <font color="#0000FF">function</font> F<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; T&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Long_Float;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Actual_Vector;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Force_Z2, Force_Z4&nbsp;&nbsp;&nbsp;&nbsp; : Long_Float;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Norm_Driving_Frequency : Long_Float;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Norm_Radial_Stiffness&nbsp; : Long_Float;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Zeta&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Long_Float<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;
<font color="#0000FF">return</font> Actual_Vector <font color="#0000FF">is<br>
&nbsp;&nbsp; begin<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <font color="#800000">1</font> =&gt; Y (<font color="#800000">2</font>),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#800000">2</font> 
=&gt; (&nbsp; Force_Z2 * Cos (Norm_Driving_Frequency * T - Y (<font color="#800000">3</font>))<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -&nbsp;
<font color="#800000">2.0</font> * Zeta * Y (<font color="#800000">2</font>)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -&nbsp; 
(<font color="#800000">1.0</font> - Y (<font color="#800000">4</font>) * Y (<font color="#800000">4</font>)) 
* Y (<font color="#800000">1</font>)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +&nbsp; 
Norm_Radial_Stiffness * Y (<font color="#800000">1</font>)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#800000">3</font> 
=&gt; Y (<font color="#800000">4</font>),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#800000">4</font> 
=&gt; (&nbsp; Force_Z4 * Sin (Norm_Driving_Frequency * T - Y (<font color="#800000">3</font>))<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -&nbsp;
<font color="#800000">2.0</font> * (Y (<font color="#800000">2</font>) / Y (<font color="#800000">1</font>) 
+ Zeta) * Y (<font color="#800000">4</font>)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; );<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> F;</tt></TD>
  </TR>
  </TABLE>
<br>File <EM>worker.adb (continuation)</EM>:<br>
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>
<font color="#008000">--<br>
-- Process -- The task doing actual computations<br>
--</font><br>
&nbsp;&nbsp; <font color="#0000FF">task body</font> Process
<font color="#0000FF">is</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Scope&nbsp;&nbsp;&nbsp;&nbsp; : Gtk_Oscilloscope;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Channel&nbsp;&nbsp; : Channel_Number;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Progress&nbsp; : Gtk_Progress_Bar;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Last_Time : Time := Clock;</tt></TD>
  </TR>
  </TABLE>
<p>The task <i>Process</i> wraps computations.</p>
File <EM>worker.adb (continuation)</EM>:<br>
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#FFECFF"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Steps&nbsp;&nbsp;&nbsp;&nbsp; 
: Positive;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#008000">-- Initial time, final 
time, no of steps, step size</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A : <font color="#0000FF">constant</font> :=
<font color="#800000">0.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; B : <font color="#0000FF">constant</font> :=
<font color="#800000">10_000.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; N : <font color="#0000FF">constant</font> :=
<font color="#800000">2_500_000</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; H : <font color="#0000FF">constant</font> := (B - 
A) / Long_Float (N);</tt></TD>
  </TR>
  </TABLE>
<br>
File <EM>worker.adb (continuation)</EM>:<br>
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">procedure</font> 
Show_Progress (Step : Natural; I : Natural) <font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Messages.Send (Service'Access, 
(Progress, Step, Steps, I, N));<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end</font> Show_Progress;</tt></TD>
  </TR>
  </TABLE>
<p>The procedure <i>Show_Progress</i> is used to update the state of the 
progress bar. It uses the procedure <i>Send</i> of the package <i>Message</i>.
<i>Send</i> marshals the record aggregate to the main GTK task, which later 
calls the procedure <i>Service</i> with these data.</p>
File <EM>worker.adb (continuation)</EM>:<br>
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#FFECFF"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; T&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Long_Float;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; K1, K2, K3, K4 : Actual_Vector;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Actual_Vector;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Radial_Ump&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: <font color="#0000FF">constant</font> := <font color="#800000">148724.91491</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Radial_Stiffness&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Long_Float;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Stiffness_Ratio&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Long_Float;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Actual_Stiffness&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Long_Float;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Norm_Radial_Stiffness&nbsp;&nbsp; : Long_Float;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Whirl_Frequency&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Long_Float;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Norm_Forcing_Frequency&nbsp; : Long_Float;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Natural_Frequency&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Long_Float;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Force_Z2, Force_Z4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
: Long_Float;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#008000">-- Driving frequencies over 
whirling range</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Forcing_Frequency_Start : Long_Float;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Forcing_Frequency_Limit : Long_Float;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Forcing_Frequency_Step&nbsp; : Long_Float;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#008000">-- Minmax algorithm</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Largest&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 
Long_Float;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Currentvalue : Long_Float;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">procedure</font> Get_Rk_K
<font color="#0000FF">is<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; begin</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; K1 :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; H * F (&nbsp; 
T,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Y,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Force_Z2,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Force_Z4,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Norm_Forcing_Frequency,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Norm_Radial_Stiffness,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Zeta<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; K2 :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; H * F (&nbsp; 
T + H / <font color="#800000">2.0</font>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Y + K1 / <font color="#800000">2.0</font>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Force_Z2,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Force_Z4,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Norm_Forcing_Frequency,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Norm_Radial_Stiffness,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Zeta<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; K3 :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; H * F (&nbsp; 
T + H / <font color="#800000">2.0</font>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Y + K2 / <font color="#800000">2.0</font>,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Force_Z2,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Force_Z4,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Norm_Forcing_Frequency,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Norm_Radial_Stiffness,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Zeta<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; K4 :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; H * F (&nbsp; 
T + H,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Y + K3,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Force_Z2,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Force_Z4,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Norm_Forcing_Frequency,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Norm_Radial_Stiffness,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Zeta<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end</font> Get_Rk_K;<br>
&nbsp; <font color="#0000FF">&nbsp;begin</font></tt></TD>
  </TR>
  </TABLE>
<br>File <EM>worker.adb (continuation)</EM>:<br>
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt> <font color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; select</font> <font color="#008000">-- Waiting 
for parameters or exit request</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">accept</font> 
Start<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
(&nbsp; Data&nbsp;&nbsp;&nbsp;&nbsp; : Parameters;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Scope&nbsp;&nbsp;&nbsp; : Gtk_Oscilloscope;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Channel&nbsp; : Channel_Number;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Progress : Gtk_Progress_Bar<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">do</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Forcing_Frequency_Start := Data.Start;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Forcing_Frequency_Limit := Data.Stop;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Forcing_Frequency_Step :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
(Data.Stop - Data.Start) / Long_Float (Data.Steps);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Stiffness_Ratio&nbsp; := Data.Stiffness;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Process.Scope&nbsp;&nbsp;&nbsp; 
:= Scope;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Process.Channel&nbsp; := Channel;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Process.Progress := Progress;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Steps&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
:= Data.Steps;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">or accept</font> Stop;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">raise</font> 
Quit_Error;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end select</font>;</tt></TD>
  </TR>
  </TABLE>
<p>The task starts waiting for configuration parameters accepting the entry <i>
Start</i>. Alternatively it accepts the entry <i>Stop</i> and then exit.</p>
File <EM>worker.adb (continuation)</EM>:<br>
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#FFECFF"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#008000">-- Starting computations</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Actual_Stiffness := Stiffness_Ratio * 
Stiffness_Total;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Natural_Frequency := Sqrt (Actual_Stiffness / 
Rotor_Mass);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#008000">-- Looping the whirling 
frequency range</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Whirl_Frequency := Forcing_Frequency_Start;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">for</font> Step
<font color="#0000FF">in</font> <font color="#800000">0</font>..Steps
<font color="#0000FF">loop</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Largest := Long_Float'First;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; T := A; <font color="#008000">
-- Initial time</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Y := (<font color="#0000FF">others</font> 
=&gt; <font color="#800000">0.01</font>);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#008000">-- For 
each whirling frequency</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">for</font> 
I <font color="#0000FF">in</font> <font color="#800000">1</font>..N
<font color="#0000FF">loop</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Radial_Stiffness := Radial_Ump / (Mean_Airgap_Length * <font color="#800000">0.1</font>);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Norm_Radial_Stiffness :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Radial_Stiffness / Actual_Stiffness;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Force_Z2 :=
<font color="#800000">0.1</font>; <font color="#008000">--new force</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Force_Z4 :=
<font color="#800000">0.1</font> / Y (<font color="#800000">1</font>);
<font color="#008000">--new force</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Norm_Forcing_Frequency :=<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Whirl_Frequency / Natural_Frequency;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Get_Rk_K;<font color="#008000"> 
-- get the k coefficients</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Y := Y + (K1 
+ <font color="#800000">2.0</font> * K2 + <font color="#800000">2.0</font> * K3 
+ K4) / <font color="#800000">6.0</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Y (<font color="#800000">3</font>) 
:= Long_Float'Remainder (Y (<font color="#800000">3</font>), Two_Pi);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">if</font> Y (<font color="#800000">3</font>) &lt;
<font color="#800000">0.0</font> then<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Y (<font color="#800000">3</font>) := Y (<font color="#800000">3</font>) + 
Two_PI;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">end if</font>;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#008000">-- Last 25000 values to calculate rmax</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">if</font> I &gt;= <font color="#800000">2_475_000</font>
<font color="#0000FF">then</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Currentvalue := Y (1);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Largest := Long_Float'Max (Largest, Currentvalue);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">end if</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; T := T + H;</tt></TD>
  </TR>
  </TABLE>
<br>
File <EM>worker.adb (continuation)</EM>:<br>
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#008000">--<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- Updating&nbsp; 
the progress bar or exiting.&nbsp; We don't do it on<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- each 
iteration, it would only waste resources. Instead of<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- that we do 
it each 200ms, which is short enough to appear<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -- &quot;instant&quot; 
for the user.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">if</font> Clock - Last_Time &gt; <font color="#800000">0.2</font>
<font color="#0000FF">then</font> <font color="#008000">-- Update progress bar</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">select<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
accept</font> Stop; <font color="#008000">-- Check if existing is requested</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">raise</font> Quit_Error;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">else</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Show_Progress (Step, I);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Last_Time := Clock;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">end select</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font color="#0000FF">end if</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end loop</font>;
<font color="#008000">-- end for each whirling frequency</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Scope.Feed<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; Channel =&gt; Channel,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; T&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
=&gt; GDouble (Whirl_Frequency),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; V&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
=&gt; GDouble (Largest)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></TD>
  </TR>
  </TABLE>
<p>The progress bar is updated approximately each 200ms. This is frequently 
enough and does not cause much overhead on the computations. The oscilloscope is 
updated by calling to the procedure <a href="#Gtk.Oscillograph.Feed">Feed</a>. 
The procedure can be called from any task under the condition that this is 
single task.</p>
File <EM>worker.adb (continuation)</EM>:<br>
<TABLE border="1" cellpadding="15" cellspacing="0">
  <TR>
<TD bgcolor="#FFECFF"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Whirl_Frequency := Whirl_Frequency + Forcing_Frequency_Step;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">end loop</font>;</tt></TD>
  </TR>
  <TR>
<TD bgcolor="#C0D8D6"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Show_Progress (Steps, 
N);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">accept</font> Stop;<br>
&nbsp;&nbsp; <font color="#0000FF">exception</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> Quit_Error | 
Busy_Error =&gt; <font color="#008000">-- Main loop quitted, we follow</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">null</font>;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#0000FF">when</font> Error : others 
=&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Say (Exception_Information 
(Error));<br>
&nbsp;&nbsp; <font color="#0000FF">end</font> Process;<br>
<br>
<font color="#0000FF">end</font> Worker;</tt></TD>
  </TR>
</TABLE>
<hr>
<p align="right">
  <a name="13"></a><a href="#12"><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><a href="#16"
><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></a><a href="#14"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H2>13. Editor widget</H2>
<p><a name="Gtk.Layered_Editor"></a>The package <a href="#Gtk.Layered_Editor">
Gtk.Layered_Editor</a> provides a simple editor widget for visual editing 
layered widgets:</p>
<blockquote>
	<p><img border="0" src="gtk_layered_editor.png" width="581" height="497" alt="layered editor"></p>
</blockquote>
<p>The widget can be used for creation stand-alone editor application or for 
integration it in a user interface. The package declares the widget type:</p>
	<blockquote>
<p><tt><font color="#0000FF">type</font> Gtk_Layered_Editor_Record
<font color="#0000FF">is new</font> Gtk_Widget_Record <font color="#0000FF">with 
private</font>;<br>
<font color="#0000FF">type</font> Gtk_Layered_Editor <font color="#0000FF">is<br>
&nbsp;&nbsp; access all</font> Gtk_Layered_Editor_Record'Class;</tt></p></blockquote>
<p>The following operations are defined:</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font> Gtk_Layered_Editor_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Gtk_Layered;</tt></p></blockquote>
<p>This function returns the widget being edited. There result is
<font color="#0000FF">null</font> if there is none.</p>
	<blockquote>
<p><tt><font color="#0000FF">function</font> Get_Buttons_Box<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b> :
<font color="#0000FF">not null access</font> Gtk_Layered_Editor_Record<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp; <font color="#0000FF">
return</font> Gtk_Box;</tt></p></blockquote>
<p>This function returns the button box on the widget's top. The application may 
add some custom buttons there, e.g. <i>load</i> and <i>save</i> buttons.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Gtk_New<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp; 
: <font color="#0000FF">out</font> Gtk_Layered_Editor;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Layered</b>&nbsp; : <font color="#0000FF">access</font> Gtk_Layered_Record'Class 
:= <font color="#0000FF">null</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure creates a new editor widget. The result is <b>Widget</b>. The 
parameter <b>Layered</b> is the widget to edit. Note that when omitted, no 
tooltips will be shown.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Initialize<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp;&nbsp; 
: <font color="#0000FF">not null access</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Gtk_Layered_Editor_Record'Class;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Layered</b>&nbsp; : <font color="#0000FF">access</font> Gtk_Layered_Record'Class<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure has to be called from Initialize of a derived widget.</p>
	<blockquote>
<p><tt><font color="#0000FF">procedure</font> Put<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (&nbsp; <b>Widget</b>&nbsp; 
: <font color="#0000FF">not null access</font> Gtk_Layered_Editor_Record;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>
Layered</b> : <font color="#0000FF">access</font> Gtk_Layered_Record'Class :=
<font color="#0000FF">null</font><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</tt></p></blockquote>
<p>This procedure sets the widget to edit. When <b>Layered</b> is
<font color="#0000FF">null</font> the editor will edit no widget.</p> 
<hr>
<p align="right">
  <a name="14"></a><a href="#13"
><IMG src="prev.gif" alt="[Back]" width="29"
      height="29"></a><a href="#16"
><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"></a><a href="#15"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H2>14. Installation</H2>
<P>
<a name="Installation"></a>The software does not require special installation. The archive's content can be 
put in a directory and used as-is. For users of <a href="http://libre.adacore.com/libre/">GNAT compiler</a> 
the software provides gpr project files, which can be used in the
<a href="https://libre.adacore.com/gps/main.html">Gnat Programming Studio</a> 
(GPS).<P>
The distribution includes:<ul>
	<li><a href="http://www.dmitry-kazakov.de/ada/gtkada_contributions.htm">
	GtkAda contributions</a>;</li>
	<li><a href="http://www.dmitry-kazakov.de/ada/strings_edit.htm">Strings edit</a>.</li>
	</ul>
<h3><a name="14.1"></a>14.1. Fedora packages repository</h3>
<p>The Fedora packages of this library are located in a <i>yum</i> software 
package manager repository. They can be searched, installed and updated 
automatically using <i>yum</i>. In order to do so, the file
<a href="http://dmitry-kazakov.de/dmitry-kazakov.repo">dmitry-kazakov.repo</a> 
can be put into the directory <i>/etc/yum.repos.d</i>.</p>
<h3><a name="14.2"></a>14.2. Debian packages repository</h3>
<p>In order to use <i>apt</i> Debian repository for automatic install and update 
these packages add the following line to <i>/etc/apt/sources.list</i>:</p>
<blockquote>
	<tt>deb http://dmitry-kazakov.de/distributions sid main</tt></blockquote>
<hr>
<p align="right">
  <a name="15"></a><a href="#14"
><IMG src="prev.gif" alt="[Back]" width="29" height="29"></a><a href="#16"
><IMG
      src="index.gif" alt="[TOC]" width="29" height="29"><IMG src="next.gif" alt="[Next]" width="29" height="29"></a></p>
<H2>15.
<a name="changes_log"></a>Changes log</H2>
<P>
<i>
The following versions were tested with the compilers:</i>
<ul>
  <li>
GNAT GPL 2016 (20160515-49)</li>
	<li><i>GNAT 6</i></li>
  </ul>
<P><i>and the GtkAda versions:</i></p>
<ul>
	<li><i>GtkAda 3.14.2</i></li>
</ul>
<P>
Changes (25 July 2016) to the version 3.14:<ul>
	<li>Compatibility with GtkAda 3.14</li>
	</ul>
<P>
<i>
The following versions were tested with the compilers:</i>
<ul>
  <li>
<i>GNAT GPL 2015 (20150428-49)</i></li>
	<li><i>GNAT 5.3</i></li>
  </ul>
<P>
<i>and the GtkAda versions:</i><ul>
	<li><i>GtkAda 3.8.3</i></li>
	</ul>
<p>Changes (12 April 2016) to the version 3.13:</p>
<ul>
  <li>In Gtk_Oscilloscope, when the selection mode is set to None, the selection 
	highlighting on left button press is turned off;</li>
	<li>The right button click drop-down Gtk_Oscilloscope menu item <i>Latest data</i> 
	is shown only if at least one sweeper does render time;</li>
	<li>Gtk_Oscilloscope drop-down menu items can be individually enabled and 
	disabled;</li>
	<li>Add_Group of Gtk_Oscilloscope accepts an amplifier object to use with 
	the group;</li>
	<li>Set_Renderer was added to Gtk.Layered.Graph_Paper_Annotation;</li>
	<li>Get_Suffix and Set_Suffix were added to Gtk.Layered.Graph_Paper_Annotation;</li>
	<li>Get_Time_Tooltip_Suffix, Get_Tooltip_Annotation, Get_Values_Tooltip_Suffix, 
	Set_Time_Tooltip_Suffix, Set_Tooltip_Annotation, Set_Values_Tooltip_Suffix were added to Gtk_Oscilloscope;</li>
	<li>Function Image was added to Gtk.Layered.Graph_Paper_Annotation;</li>
	<li>Extrapolation left and right was added to Gtk.Layered.Waveform and 
	Gtk.Oscilloscope;</li>
	<li>Get_Release_To_Latest and Set_Release_To_Latest were added to 
	Gtk.Oscilloscope;</li>
	<li>Undo/redo stubs with pattern matched names added to Gtk.Oscilloscope.</li>
</ul>
<p>Changes (4 March 2016) to the version 3.12:</p>
<ul>
  <li>Minor changes improving performance;</li>
	<li>Waveform sweeper interface is enhanced to suppress the &quot;draw&quot; signal 
	flood when a sweeper is shared by several independent widgets.</li>
</ul>
<p>Changes (18 October 2015) to the version 3.11:</p>
<ul>
  <li>Adapted to GNAT 5</li>
</ul>
<P>
<i>
The following versions were tested with the compilers:</i>
<ul>
  <li>
<i>GNAT GPL 2015 (20150428-49)</i></li>
	<li><i>GNAT 4.9.2</i></li>
  </ul>
<P>
<i>and the GtkAda versions:</i><ul>
	<li><i>GtkAda 3.8.3</i></li>
	</ul>
<p>Changes (28 June 2015) to the version 3.10:</p>
<ul>
  <li>Adapted to GNAT GPL 2015 and GtkAda 3.8.3.</li>
</ul>
<p>
<i>
The following versions were tested with the compilers:</i>
</p>
<ul>
  <li>
<i>GNAT GPL 2014 (20140331)</i></li>
	<li>
<i>GNAT 4.8.2 (20131212)</i></li>
  <li><i>GNAT 4.9.0</i></li>
  </ul>
<P>
<i>and the GtkAda versions:</i><ul>
	<li><i>GtkAda 3.8.2</i></li>
	</ul>
<p>Changes (2 April 2015) to the version 3.9:</p>
<ul>
  <li>ARMv7 (AKA armhf) support.</li>
</ul>
	<P>
Changes&nbsp; (24 July 2014) to the version 3.8:<ul>
	<li>Oscilloscope behavior on selection can be altered using 
	Set_Selection_Mode;</li>
	<li>Minor bug files.</li>
	</ul>
	<P>
Changes&nbsp; (1 June 2014) to the version 2.14:<ul>
	<li>The library was adapted to the GtkAda 3.x. Earlier versions are no more 
	supported;</li>
	<li>Only Ada 2005 and Ada 2012 are supported when GtkAda 3.x is used;</li>
	<li>This version was switched to the native GtkAda's cairo bindings;</li>
	<li>The type Interfaces.C.Double was replaced by GDouble as this is the type 
	used in GtkAda's cairo;</li>
	<li>The second parameter of the procedure Refresh of the package Gtk.Layered 
	was replaced with Cairo_Context;</li>
	<li>Functions Get_Time_Axis_Annotation, Get_Values_Axis_Annotation, 
	Get_Values_Text_Angle, Get_Values_Text_Color, Get_Values_Text_Face, Get_Values_Text_Height, 
	Get_Values_Text_Stretch, Set_Values_Text_Font were added to the package Gtk.Oscilloscope;</li>
	<li>Annotation text interface and labels changed to support markup;</li>
	<li>Compiled with GNAT 4.9.</li>
	</ul>
<P>
<i>
The following versions were tested with the compilers:</i>
<ul>
  <li>
<i>GNAT Pro 6.4.2 (20110614-45)</i></li>
	<li>
<i>GNAT 4.6.2 (20111027)</i></li>
  </ul>
<P>
<i>and the GtkAda versions:</i><ul>
	<li><i>GtkAda 2.18.0</i></li>
	<li><i>GtkAda 2.24.0</i></li>
	</ul>
	<P>
Changes&nbsp; (10 August 2012) to the version 1.3:<ul>
	<li>Bug fix Gtk.Layered.Line that caused lines drawn with wrong length;</li>
	<li>Length of scales and annotations is computed more accurate;</li>
	<li>Various thermometer widgets added;</li>
	<li>Various LED widgets added;</li>
	<li>Digital_Layer added to render changing values 
	as text.</li>
	</ul>
<P>
<i>
The following versions were tested with the compilers:</i>
<ul>
  <li>
<i>GNAT Pro 6.4.2 (20110614-45)</i></li>
	<li>
<i>GNAT 4.6.2 (20111027)</i></li>
  </ul>
<P>
<i>and the GtkAda versions:</i><ul>
	<li><i>GtkAda 2.14.2</i></li>
	<li><i>GtkAda 2.18.0</i></li>
	<li><i>GtkAda 2.24.0</i></li>
	</ul>
	<P>
Changes to the version 1.2:<ul>
	<li>Sample of asynchronous plotting added;</li>
	<li>Memory leak while drawing graph paper annotations fixed;</li>
	<li>Graph paper annotations formatting flag to enable or disable 
	superscript numbers.</li>
	</ul>
	<P>
Changes to the version 1.1:<ul>
	<li>Bug fix in waveform sampling which had the effect that sometimes the 
	amplifier get permanently rescaled when in auto-scale mode;</li>
	<li>Rendering waveform annotations was changed to prevent values shown as 
	xxx*10**0.</li>
	</ul>
	<P>
Changes to the version 1.0:<ul>
<li>Waveform layers, sweepers, amplifiers and data sampling buffers were added;</li>
<li>Graph papers and their annotation layers were added;</li>
<li>The package Gtk.Oscilloscope provides a ready-to-use multi-channel real-time 
oscilloscope/data plotter widget with visual zooming, and undo/redo buffers;</li>
<li>The function Get_Drawing_Time was added to Gtk.Layered for drawing layers 
depending on clock;</li>
<li>Gtk.Layered.Rectangle providing rectangle layers added;</li>
<li>The procedure Snapshot was added to Gtk.Layered for rendering the widget 
contents onto PDF and other surfaces;</li>
<li>Procedure Prepare is added to the layer interface;</li>
<li>Pango fonts support was added;</li>
<li>Compatibility to GtkAda 2.24.0.</li>
</ul>
<P>
<i>
The following versions were tested with the compilers:</i>
<ul>
  <li>
<i>GNAT Pro 6.3.1 ((20100111-43)</i></li>
	<li>
<i>GNAT 4.4.5 (20101112)</i></li>
  </ul>
<P>
<i>and the GtkAda versions:</i><ul>
	<li><i>GtkAda 2.14.0</i></li>
	<li><i>GtkAda 2.14.1</i></li>
	<li><i>GtkAda 2.14.2</i></li>
	</ul>
	<P>
The version 1.0.<HR>
<H2 align="right">
  <a name="16"></a><a href="#15"><IMG src="prev.gif" alt="[Back]" width="29" height="29"></a><a href="#16"
><IMG src="index.gif" alt="[TOC]" width="29" height="29"></a></H2>
<H2>16. Table of Contents</H2>
<table border="0" cellpadding="0" cellspacing="20">
	<tr>
		<td valign="top">
<b><big><big>1</big></big></b> <A href="#1"><big>Widgets gallery</big></A><BR>
&nbsp;&nbsp;&nbsp; <A href="#1.1">1.1. Gauges</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#1.2">1.2. Sectors and segments</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#1.3">1.3. Meters</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#1.4">1.4. Flat and rectangular</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#1.5">1.5. Wall clocks</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#1.6">1.6. Oscilloscope</A><hr>
<b><big><big>2 </big></big></b><A href="#2"><big>Layered widgets</big></A><BR>
&nbsp;&nbsp;&nbsp; <A href="#2.1">2.1. Anatomy of a gauge</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#2.2">2.2. Abstract layer</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.2.1">2.2.1. Primitive operations</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.2.2">2.2.2. Abstract operations</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#2.3">2.3. Layered widget </A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.3.1">2.3.1. Primitive operations</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.3.2">2.3.2. Class-wide operations</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#2.4">2.4. Abstract bordered layer</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.4.1">2.4.1. Primitive operations</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.4.2">2.4.2. Abstract operations</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#2.5">2.5. Layer interfaces</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.5.1">2.5.1. Layer location interface</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.5.2">2.5.2. Scalable layer interface</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.5.3">2.5.3. Widened layer interface</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.5.4">2.5.4. Annotation layer interface</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.5.5">2.5.5. Needle interface</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#2.6">2.6. Other types declared</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.6.1">2.6.1. Closures of elliptic arcs</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.6.2">2.6.2. Line parameters</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.6.3">2.6.3. Tick parameters</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#2.6.4">2.6.4. Text transformation</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#2.7">2.7. Refresh engine</A><hr>
<b><big><big>3 </big></big></b><A href="#3"><big>Backgrounds</big></A><BR>
&nbsp;&nbsp;&nbsp; <A href="#3.1">3.1. Elliptic background</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#3.2">3.2. Rectangular background </A><hr>
<b><big><big>4 </big></big></b><A href="#4"><big>Scales</big></A><br>
&nbsp;&nbsp;&nbsp; <A href="#4.1">4.1. Elliptic scale</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#4.2">4.2. Flat scale</A><hr>
<b><big><big>5 </big></big></b><A href="#5"><big>Annotations</big></A><br>
&nbsp;&nbsp;&nbsp; <A href="#5.1">5.1. Elliptic annotation</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#5.2">5.2. Flat annotation</A><hr>
<b><big><big>6 </big></big></b><A href="#6"><big>Needles</big></A><br>
&nbsp;&nbsp;&nbsp; <A href="#6.1">6.1. Needle</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#6.2">6.2. Clock hand</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#6.3">6.3. Elliptic bar needle</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#6.4">6.4. Filled shape needle</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#6.5">6.5. Flat needle</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#6.6">6.6. Bar needle</A><br>
&nbsp;&nbsp;&nbsp; <A href="#6.7">6.7. Digital value</A><BR>
</td>
<td valign="top">
<b><big><big>7 </big></big></b><A href="#7"><big>Shapes</big></A><br>
&nbsp;&nbsp;&nbsp; <a href="#7.1">7.1. Arc</a><BR>
&nbsp;&nbsp;&nbsp; <A href="#7.2">7.2. Cap</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#7.3">7.3. Line</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#7.4">7.4. Text (label)</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#7.5">7.5. Rectangle</A><hr>
<b><big><big>8 </big></big></b><A href="#8"><big>Special layers</big></A><br>
&nbsp;&nbsp;&nbsp; <a href="#8.1">8.1. Rectangular clip region</a><BR>
&nbsp;&nbsp;&nbsp; <A href="#8.2">8.2. Caching layer</A><hr>
<b><big><big>9 </big></big></b><A href="#9"><big>Waveforms</big></A><br>
&nbsp;&nbsp;&nbsp; <a href="#9.1">9.1. Data sources and scanners</a><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#9.1.1">9.1.1. Data source interface</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#9.1.2">9.1.2. Data scanner interface</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#9.1.3">9.1.3. Data feed interface</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#9.1.4">9.1.4. Ring buffer implementation</A><BR>
&nbsp;&nbsp;&nbsp; <a href="#9.2">9.2. Waveform amplifiers</a><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#9.2.1">9.2.1. Amplifier interface</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#9.2.2">9.2.2. Amplifier implementation</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#9.3">9.3. Waveform sweepers</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#9.3.1">9.3.1. Sweeper interface</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#9.3.2">9.3.2. Time operations</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#9.3.3">9.3.3. Sweeper implementation</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#9.4">9.4. Waveform layer</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#9.5">9.5. Graph paper</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#9.6">9.6. Graph paper annotation</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#9.6.1">9.6.1. Annotation interface</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#9.6.2">9.6.2. Axis annotation implementation</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#9.6.3">9.6.3. Time annotation implementation</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#9.7">9.7. Scales</A><hr>
<b><big><big>10 </big></big></b><A href="#10"><big>Miscellany</big></A><br>
&nbsp;&nbsp;&nbsp; <a href="#10.1">10.1. Elliptic shapes</a><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#10.1.1">10.1.1. Relative angles</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#10.1.2">10.1.2. Transformations</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#10.1.3">10.1.3. Information functions</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#10.1.4">10.1.4. Drawing</A><BR>
&nbsp;&nbsp;&nbsp; <a href="#10.2">10.2. Stream I/O</a><BR>
&nbsp;&nbsp;&nbsp; <a href="#10.3">10.3. Interpolation mode</a><BR>
&nbsp;&nbsp;&nbsp; <a href="#10.4">10.4. Vertical alignment</a><BR>
&nbsp;&nbsp;&nbsp; <a href="#10.5">10.5. Fonts</a><hr>
<b><big><big>11 </big></big></b><A href="#11"><big>Samples</big></A><br>
&nbsp;&nbsp;&nbsp; <A href="#11.1">11.1. Gauges</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#11.1.1">11.1.1. Gtk.Gauge.Round_254</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#11.1.2">11.1.2. Gtk.Gauge.Round_270</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#11.1.3">11.1.3. Gtk.Gauge.Round_270_Outer</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#11.1.4">11.1.4. Gtk.Gauge.Round_270_Reversed</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#11.1.5">11.1.5. Gtk.Gauge.Round_270_Inout</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#11.1.6">11.1.6. Gtk.Gauge.Round_270_60s</A><BR>
</td>
<td valign="top">
&nbsp;&nbsp;&nbsp; <A href="#11.2">11.2. Sectors and segments</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#11.2.1">11.2.1. Gtk.Gauge.Round_180</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#11.2.2">11.2.2. Gtk.Gauge.Round_90</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#11.2.3">11.2.3. Gtk.Gauge.Round_110</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#11.2.4">11.2.4. Gtk.Gauge.Elliptic_180</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#11.3">11.3. Meters</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#11.3.1">11.3.1. Gtk.Meter.Angular_90</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#11.3.2">11.3.2. Gtk.Meter.Elliptic_90</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#11.3.3">11.3.3. Gtk.Meter.Round_90</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#11.3.4">11.3.4. Gtk.Meter.Round_94</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#11.3.5">11.3.5. Gtk.Meter.Thermo</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#11.3.6">11.3.6. Gtk.Meter.Thermo_Symmetric</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#11.3.7">11.3.7. Gtk.Meter.Thermo_Dual</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#11.4">11.4. Flat and rectangular</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#11.4.1">11.4.1. Gtk.Gauge.Rectangular_70s</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#11.4.2">11.4.2. Gtk.Gauge.Rectangular_70s_Slanted</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#11.4.3">11.4.3. Gtk.Gauge.Flat_Horizontal</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#11.4.4">11.4.4. Gtk.Gauge.Flat_Vertical</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#11.5">11.5. Wall clocks</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#11.5.1">11.5.1. Gtk.Wall_Clock.Imperial</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#11.5.2">11.5.2. Gtk.Wall_Clock.Classic</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#11.5.3">11.5.3. Gtk.Wall_Clock.Modern</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#11.6">11.6. LEDs</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#11.6.1">11.6.1. Gtk.Gauge.LED_Round</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#11.6.2">11.6.2. Gtk.Gauge.LED_Rectangualar</A><hr>
<b><big><big>12 </big></big></b><A href="#12"><big>Oscilloscope</big></A><br>
&nbsp;&nbsp;&nbsp; <A href="#12.1">12.1. Oscilloscope widget</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#12.1.1">12.1.1. Channels</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#12.1.2">12.1.2. Groups</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#12.1.3">12.1.3. Vertical scales and axes</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#12.1.4">12.1.4. Horizontal scales and axes</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#12.1.5">12.1.5. The widget type and operations</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#12.1.6">12.1.6. Signals</A><BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="#12.1.7">12.1.7. Selection and drop-down menu</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#12.2">12.2. Sweeper panel</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#12.3">12.3. Amplifier panel</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#12.4">12.4. Channels panel</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#12.5">12.5. Plotting data with the oscilloscope</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#12.6">12.6. Asynchronous plotting</A><hr>
<b><big><big>13 </big></big></b><A href="#13"><big>Editor widget</big></A><hr>
<b><big><big>14 </big></big></b><A href="#14"><big>Installation</big></A><br>
&nbsp;&nbsp;&nbsp; <A href="#14.1">14.1. Fedora packages repository</A><BR>
&nbsp;&nbsp;&nbsp; <A href="#14.2">14.2. Debian packages repository</A><hr>
<b><big><big>15 </big></big></b><A href="#15"><big>Changes log</big></A><hr>
<b><big><big>16 </big></big></b><A href="#16"><big>Table of contents</big></A></td>
</tr>
</table>
</BODY>
</HTML>
